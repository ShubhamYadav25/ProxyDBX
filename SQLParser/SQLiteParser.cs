//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SQLiteParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class SQLiteParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SCOL=1, DOT=2, OPEN_PAR=3, CLOSE_PAR=4, COMMA=5, ASSIGN=6, STAR=7, PLUS=8, 
		MINUS=9, TILDE=10, PIPE2=11, DIV=12, MOD=13, LT2=14, GT2=15, AMP=16, PIPE=17, 
		LT=18, LT_EQ=19, GT=20, GT_EQ=21, EQ=22, NOT_EQ1=23, NOT_EQ2=24, ABORT_=25, 
		ACTION_=26, ADD_=27, AFTER_=28, ALL_=29, ALTER_=30, ANALYZE_=31, AND_=32, 
		AS_=33, ASC_=34, ATTACH_=35, AUTOINCREMENT_=36, BEFORE_=37, BEGIN_=38, 
		BETWEEN_=39, BY_=40, CASCADE_=41, CASE_=42, CAST_=43, CHECK_=44, COLLATE_=45, 
		COLUMN_=46, COMMIT_=47, CONFLICT_=48, CONSTRAINT_=49, CREATE_=50, CROSS_=51, 
		CURRENT_DATE_=52, CURRENT_TIME_=53, CURRENT_TIMESTAMP_=54, DATABASE_=55, 
		DEFAULT_=56, DEFERRABLE_=57, DEFERRED_=58, DELETE_=59, DESC_=60, DETACH_=61, 
		DISTINCT_=62, DROP_=63, EACH_=64, ELSE_=65, END_=66, ESCAPE_=67, EXCEPT_=68, 
		EXCLUSIVE_=69, EXISTS_=70, EXPLAIN_=71, FAIL_=72, FOR_=73, FOREIGN_=74, 
		FROM_=75, FULL_=76, GLOB_=77, GROUP_=78, HAVING_=79, IF_=80, IGNORE_=81, 
		IMMEDIATE_=82, IN_=83, INDEX_=84, INDEXED_=85, INITIALLY_=86, INNER_=87, 
		INSERT_=88, INSTEAD_=89, INTERSECT_=90, INTO_=91, IS_=92, ISNULL_=93, 
		JOIN_=94, KEY_=95, LEFT_=96, LIKE_=97, LIMIT_=98, MATCH_=99, NATURAL_=100, 
		NO_=101, NOT_=102, NOTNULL_=103, NULL_=104, OF_=105, OFFSET_=106, ON_=107, 
		OR_=108, ORDER_=109, OUTER_=110, PLAN_=111, PRAGMA_=112, PRIMARY_=113, 
		QUERY_=114, RAISE_=115, RECURSIVE_=116, REFERENCES_=117, REGEXP_=118, 
		REINDEX_=119, RELEASE_=120, RENAME_=121, REPLACE_=122, RESTRICT_=123, 
		RETURNING_=124, RIGHT_=125, ROLLBACK_=126, ROW_=127, ROWS_=128, SAVEPOINT_=129, 
		SELECT_=130, SET_=131, TABLE_=132, TEMP_=133, TEMPORARY_=134, THEN_=135, 
		TO_=136, TRANSACTION_=137, TRIGGER_=138, UNION_=139, UNIQUE_=140, UPDATE_=141, 
		USING_=142, VACUUM_=143, VALUES_=144, VIEW_=145, VIRTUAL_=146, WHEN_=147, 
		WHERE_=148, WITH_=149, WITHOUT_=150, FIRST_VALUE_=151, OVER_=152, PARTITION_=153, 
		RANGE_=154, PRECEDING_=155, UNBOUNDED_=156, CURRENT_=157, FOLLOWING_=158, 
		CUME_DIST_=159, DENSE_RANK_=160, LAG_=161, LAST_VALUE_=162, LEAD_=163, 
		NTH_VALUE_=164, NTILE_=165, PERCENT_RANK_=166, RANK_=167, ROW_NUMBER_=168, 
		GENERATED_=169, ALWAYS_=170, STORED_=171, TRUE_=172, FALSE_=173, WINDOW_=174, 
		NULLS_=175, FIRST_=176, LAST_=177, FILTER_=178, GROUPS_=179, EXCLUDE_=180, 
		TIES_=181, OTHERS_=182, DO_=183, NOTHING_=184, IDENTIFIER=185, NUMERIC_LITERAL=186, 
		BIND_PARAMETER=187, STRING_LITERAL=188, BLOB_LITERAL=189, SINGLE_LINE_COMMENT=190, 
		MULTILINE_COMMENT=191, SPACES=192, UNEXPECTED_CHAR=193;
	public const int
		RULE_parse = 0, RULE_sql_stmt_list = 1, RULE_sql_stmt = 2, RULE_alter_table_stmt = 3, 
		RULE_analyze_stmt = 4, RULE_attach_stmt = 5, RULE_begin_stmt = 6, RULE_commit_stmt = 7, 
		RULE_rollback_stmt = 8, RULE_savepoint_stmt = 9, RULE_release_stmt = 10, 
		RULE_create_index_stmt = 11, RULE_indexed_column = 12, RULE_create_table_stmt = 13, 
		RULE_column_def = 14, RULE_type_name = 15, RULE_column_constraint = 16, 
		RULE_signed_number = 17, RULE_table_constraint = 18, RULE_foreign_key_clause = 19, 
		RULE_conflict_clause = 20, RULE_create_trigger_stmt = 21, RULE_create_view_stmt = 22, 
		RULE_create_virtual_table_stmt = 23, RULE_with_clause = 24, RULE_cte_table_name = 25, 
		RULE_recursive_cte = 26, RULE_common_table_expression = 27, RULE_delete_stmt = 28, 
		RULE_delete_stmt_limited = 29, RULE_detach_stmt = 30, RULE_drop_stmt = 31, 
		RULE_expr = 32, RULE_raise_function = 33, RULE_literal_value = 34, RULE_value_row = 35, 
		RULE_values_clause = 36, RULE_insert_stmt = 37, RULE_returning_clause = 38, 
		RULE_upsert_clause = 39, RULE_pragma_stmt = 40, RULE_pragma_value = 41, 
		RULE_reindex_stmt = 42, RULE_select_stmt = 43, RULE_join_clause = 44, 
		RULE_select_core = 45, RULE_factored_select_stmt = 46, RULE_simple_select_stmt = 47, 
		RULE_compound_select_stmt = 48, RULE_table_or_subquery = 49, RULE_result_column = 50, 
		RULE_join_operator = 51, RULE_join_constraint = 52, RULE_compound_operator = 53, 
		RULE_update_stmt = 54, RULE_column_name_list = 55, RULE_update_stmt_limited = 56, 
		RULE_qualified_table_name = 57, RULE_vacuum_stmt = 58, RULE_filter_clause = 59, 
		RULE_window_defn = 60, RULE_over_clause = 61, RULE_frame_spec = 62, RULE_frame_clause = 63, 
		RULE_simple_function_invocation = 64, RULE_aggregate_function_invocation = 65, 
		RULE_window_function_invocation = 66, RULE_common_table_stmt = 67, RULE_order_by_stmt = 68, 
		RULE_limit_stmt = 69, RULE_ordering_term = 70, RULE_asc_desc = 71, RULE_frame_left = 72, 
		RULE_frame_right = 73, RULE_frame_single = 74, RULE_window_function = 75, 
		RULE_offset = 76, RULE_default_value = 77, RULE_partition_by = 78, RULE_order_by_expr = 79, 
		RULE_order_by_expr_asc_desc = 80, RULE_expr_asc_desc = 81, RULE_initial_select = 82, 
		RULE_recursive_select = 83, RULE_unary_operator = 84, RULE_error_message = 85, 
		RULE_module_argument = 86, RULE_column_alias = 87, RULE_keyword = 88, 
		RULE_name = 89, RULE_function_name = 90, RULE_schema_name = 91, RULE_table_name = 92, 
		RULE_table_or_index_name = 93, RULE_column_name = 94, RULE_collation_name = 95, 
		RULE_foreign_table = 96, RULE_index_name = 97, RULE_trigger_name = 98, 
		RULE_view_name = 99, RULE_module_name = 100, RULE_pragma_name = 101, RULE_savepoint_name = 102, 
		RULE_table_alias = 103, RULE_transaction_name = 104, RULE_window_name = 105, 
		RULE_alias = 106, RULE_filename = 107, RULE_base_window_name = 108, RULE_simple_func = 109, 
		RULE_aggregate_func = 110, RULE_table_function_name = 111, RULE_any_name = 112;
	public static readonly string[] ruleNames = {
		"parse", "sql_stmt_list", "sql_stmt", "alter_table_stmt", "analyze_stmt", 
		"attach_stmt", "begin_stmt", "commit_stmt", "rollback_stmt", "savepoint_stmt", 
		"release_stmt", "create_index_stmt", "indexed_column", "create_table_stmt", 
		"column_def", "type_name", "column_constraint", "signed_number", "table_constraint", 
		"foreign_key_clause", "conflict_clause", "create_trigger_stmt", "create_view_stmt", 
		"create_virtual_table_stmt", "with_clause", "cte_table_name", "recursive_cte", 
		"common_table_expression", "delete_stmt", "delete_stmt_limited", "detach_stmt", 
		"drop_stmt", "expr", "raise_function", "literal_value", "value_row", "values_clause", 
		"insert_stmt", "returning_clause", "upsert_clause", "pragma_stmt", "pragma_value", 
		"reindex_stmt", "select_stmt", "join_clause", "select_core", "factored_select_stmt", 
		"simple_select_stmt", "compound_select_stmt", "table_or_subquery", "result_column", 
		"join_operator", "join_constraint", "compound_operator", "update_stmt", 
		"column_name_list", "update_stmt_limited", "qualified_table_name", "vacuum_stmt", 
		"filter_clause", "window_defn", "over_clause", "frame_spec", "frame_clause", 
		"simple_function_invocation", "aggregate_function_invocation", "window_function_invocation", 
		"common_table_stmt", "order_by_stmt", "limit_stmt", "ordering_term", "asc_desc", 
		"frame_left", "frame_right", "frame_single", "window_function", "offset", 
		"default_value", "partition_by", "order_by_expr", "order_by_expr_asc_desc", 
		"expr_asc_desc", "initial_select", "recursive_select", "unary_operator", 
		"error_message", "module_argument", "column_alias", "keyword", "name", 
		"function_name", "schema_name", "table_name", "table_or_index_name", "column_name", 
		"collation_name", "foreign_table", "index_name", "trigger_name", "view_name", 
		"module_name", "pragma_name", "savepoint_name", "table_alias", "transaction_name", 
		"window_name", "alias", "filename", "base_window_name", "simple_func", 
		"aggregate_func", "table_function_name", "any_name"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'.'", "'('", "')'", "','", "'='", "'*'", "'+'", "'-'", "'~'", 
		"'||'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", 
		"'>='", "'=='", "'!='", "'<>'", "'ABORT'", "'ACTION'", "'ADD'", "'AFTER'", 
		"'ALL'", "'ALTER'", "'ANALYZE'", "'AND'", "'AS'", "'ASC'", "'ATTACH'", 
		"'AUTOINCREMENT'", "'BEFORE'", "'BEGIN'", "'BETWEEN'", "'BY'", "'CASCADE'", 
		"'CASE'", "'CAST'", "'CHECK'", "'COLLATE'", "'COLUMN'", "'COMMIT'", "'CONFLICT'", 
		"'CONSTRAINT'", "'CREATE'", "'CROSS'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
		"'CURRENT_TIMESTAMP'", "'DATABASE'", "'DEFAULT'", "'DEFERRABLE'", "'DEFERRED'", 
		"'DELETE'", "'DESC'", "'DETACH'", "'DISTINCT'", "'DROP'", "'EACH'", "'ELSE'", 
		"'END'", "'ESCAPE'", "'EXCEPT'", "'EXCLUSIVE'", "'EXISTS'", "'EXPLAIN'", 
		"'FAIL'", "'FOR'", "'FOREIGN'", "'FROM'", "'FULL'", "'GLOB'", "'GROUP'", 
		"'HAVING'", "'IF'", "'IGNORE'", "'IMMEDIATE'", "'IN'", "'INDEX'", "'INDEXED'", 
		"'INITIALLY'", "'INNER'", "'INSERT'", "'INSTEAD'", "'INTERSECT'", "'INTO'", 
		"'IS'", "'ISNULL'", "'JOIN'", "'KEY'", "'LEFT'", "'LIKE'", "'LIMIT'", 
		"'MATCH'", "'NATURAL'", "'NO'", "'NOT'", "'NOTNULL'", "'NULL'", "'OF'", 
		"'OFFSET'", "'ON'", "'OR'", "'ORDER'", "'OUTER'", "'PLAN'", "'PRAGMA'", 
		"'PRIMARY'", "'QUERY'", "'RAISE'", "'RECURSIVE'", "'REFERENCES'", "'REGEXP'", 
		"'REINDEX'", "'RELEASE'", "'RENAME'", "'REPLACE'", "'RESTRICT'", "'RETURNING'", 
		"'RIGHT'", "'ROLLBACK'", "'ROW'", "'ROWS'", "'SAVEPOINT'", "'SELECT'", 
		"'SET'", "'TABLE'", "'TEMP'", "'TEMPORARY'", "'THEN'", "'TO'", "'TRANSACTION'", 
		"'TRIGGER'", "'UNION'", "'UNIQUE'", "'UPDATE'", "'USING'", "'VACUUM'", 
		"'VALUES'", "'VIEW'", "'VIRTUAL'", "'WHEN'", "'WHERE'", "'WITH'", "'WITHOUT'", 
		"'FIRST_VALUE'", "'OVER'", "'PARTITION'", "'RANGE'", "'PRECEDING'", "'UNBOUNDED'", 
		"'CURRENT'", "'FOLLOWING'", "'CUME_DIST'", "'DENSE_RANK'", "'LAG'", "'LAST_VALUE'", 
		"'LEAD'", "'NTH_VALUE'", "'NTILE'", "'PERCENT_RANK'", "'RANK'", "'ROW_NUMBER'", 
		"'GENERATED'", "'ALWAYS'", "'STORED'", "'TRUE'", "'FALSE'", "'WINDOW'", 
		"'NULLS'", "'FIRST'", "'LAST'", "'FILTER'", "'GROUPS'", "'EXCLUDE'", "'TIES'", 
		"'OTHERS'", "'DO'", "'NOTHING'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", "COMMA", "ASSIGN", "STAR", 
		"PLUS", "MINUS", "TILDE", "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", 
		"PIPE", "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", "ABORT_", 
		"ACTION_", "ADD_", "AFTER_", "ALL_", "ALTER_", "ANALYZE_", "AND_", "AS_", 
		"ASC_", "ATTACH_", "AUTOINCREMENT_", "BEFORE_", "BEGIN_", "BETWEEN_", 
		"BY_", "CASCADE_", "CASE_", "CAST_", "CHECK_", "COLLATE_", "COLUMN_", 
		"COMMIT_", "CONFLICT_", "CONSTRAINT_", "CREATE_", "CROSS_", "CURRENT_DATE_", 
		"CURRENT_TIME_", "CURRENT_TIMESTAMP_", "DATABASE_", "DEFAULT_", "DEFERRABLE_", 
		"DEFERRED_", "DELETE_", "DESC_", "DETACH_", "DISTINCT_", "DROP_", "EACH_", 
		"ELSE_", "END_", "ESCAPE_", "EXCEPT_", "EXCLUSIVE_", "EXISTS_", "EXPLAIN_", 
		"FAIL_", "FOR_", "FOREIGN_", "FROM_", "FULL_", "GLOB_", "GROUP_", "HAVING_", 
		"IF_", "IGNORE_", "IMMEDIATE_", "IN_", "INDEX_", "INDEXED_", "INITIALLY_", 
		"INNER_", "INSERT_", "INSTEAD_", "INTERSECT_", "INTO_", "IS_", "ISNULL_", 
		"JOIN_", "KEY_", "LEFT_", "LIKE_", "LIMIT_", "MATCH_", "NATURAL_", "NO_", 
		"NOT_", "NOTNULL_", "NULL_", "OF_", "OFFSET_", "ON_", "OR_", "ORDER_", 
		"OUTER_", "PLAN_", "PRAGMA_", "PRIMARY_", "QUERY_", "RAISE_", "RECURSIVE_", 
		"REFERENCES_", "REGEXP_", "REINDEX_", "RELEASE_", "RENAME_", "REPLACE_", 
		"RESTRICT_", "RETURNING_", "RIGHT_", "ROLLBACK_", "ROW_", "ROWS_", "SAVEPOINT_", 
		"SELECT_", "SET_", "TABLE_", "TEMP_", "TEMPORARY_", "THEN_", "TO_", "TRANSACTION_", 
		"TRIGGER_", "UNION_", "UNIQUE_", "UPDATE_", "USING_", "VACUUM_", "VALUES_", 
		"VIEW_", "VIRTUAL_", "WHEN_", "WHERE_", "WITH_", "WITHOUT_", "FIRST_VALUE_", 
		"OVER_", "PARTITION_", "RANGE_", "PRECEDING_", "UNBOUNDED_", "CURRENT_", 
		"FOLLOWING_", "CUME_DIST_", "DENSE_RANK_", "LAG_", "LAST_VALUE_", "LEAD_", 
		"NTH_VALUE_", "NTILE_", "PERCENT_RANK_", "RANK_", "ROW_NUMBER_", "GENERATED_", 
		"ALWAYS_", "STORED_", "TRUE_", "FALSE_", "WINDOW_", "NULLS_", "FIRST_", 
		"LAST_", "FILTER_", "GROUPS_", "EXCLUDE_", "TIES_", "OTHERS_", "DO_", 
		"NOTHING_", "IDENTIFIER", "NUMERIC_LITERAL", "BIND_PARAMETER", "STRING_LITERAL", 
		"BLOB_LITERAL", "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", "SPACES", 
		"UNEXPECTED_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SQLiteParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SQLiteParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SQLiteParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SQLiteParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(SQLiteParser.Eof, 0); }
		public Sql_stmt_listContext[] sql_stmt_list() {
			return GetRuleContexts<Sql_stmt_listContext>();
		}
		public Sql_stmt_listContext sql_stmt_list(int i) {
			return GetRuleContext<Sql_stmt_listContext>(i);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SCOL) | (1L << ALTER_) | (1L << ANALYZE_) | (1L << ATTACH_) | (1L << BEGIN_) | (1L << COMMIT_) | (1L << CREATE_) | (1L << DELETE_) | (1L << DETACH_) | (1L << DROP_))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (END_ - 66)) | (1L << (EXPLAIN_ - 66)) | (1L << (INSERT_ - 66)) | (1L << (PRAGMA_ - 66)) | (1L << (REINDEX_ - 66)) | (1L << (RELEASE_ - 66)) | (1L << (REPLACE_ - 66)) | (1L << (ROLLBACK_ - 66)) | (1L << (SAVEPOINT_ - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SELECT_ - 130)) | (1L << (UPDATE_ - 130)) | (1L << (VACUUM_ - 130)) | (1L << (VALUES_ - 130)) | (1L << (WITH_ - 130)))) != 0)) {
				{
				{
				State = 226; sql_stmt_list();
				}
				}
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 232; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmt_listContext : ParserRuleContext {
		public Sql_stmtContext[] sql_stmt() {
			return GetRuleContexts<Sql_stmtContext>();
		}
		public Sql_stmtContext sql_stmt(int i) {
			return GetRuleContext<Sql_stmtContext>(i);
		}
		public ITerminalNode[] SCOL() { return GetTokens(SQLiteParser.SCOL); }
		public ITerminalNode SCOL(int i) {
			return GetToken(SQLiteParser.SCOL, i);
		}
		public Sql_stmt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterSql_stmt_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitSql_stmt_list(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmt_listContext sql_stmt_list() {
		Sql_stmt_listContext _localctx = new Sql_stmt_listContext(Context, State);
		EnterRule(_localctx, 2, RULE_sql_stmt_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 234; Match(SCOL);
				}
				}
				State = 239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 240; sql_stmt();
			State = 249;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 242;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 241; Match(SCOL);
						}
						}
						State = 244;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==SCOL );
					State = 246; sql_stmt();
					}
					} 
				}
				State = 251;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 255;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 252; Match(SCOL);
					}
					} 
				}
				State = 257;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmtContext : ParserRuleContext {
		public Alter_table_stmtContext alter_table_stmt() {
			return GetRuleContext<Alter_table_stmtContext>(0);
		}
		public Analyze_stmtContext analyze_stmt() {
			return GetRuleContext<Analyze_stmtContext>(0);
		}
		public Attach_stmtContext attach_stmt() {
			return GetRuleContext<Attach_stmtContext>(0);
		}
		public Begin_stmtContext begin_stmt() {
			return GetRuleContext<Begin_stmtContext>(0);
		}
		public Commit_stmtContext commit_stmt() {
			return GetRuleContext<Commit_stmtContext>(0);
		}
		public Create_index_stmtContext create_index_stmt() {
			return GetRuleContext<Create_index_stmtContext>(0);
		}
		public Create_table_stmtContext create_table_stmt() {
			return GetRuleContext<Create_table_stmtContext>(0);
		}
		public Create_trigger_stmtContext create_trigger_stmt() {
			return GetRuleContext<Create_trigger_stmtContext>(0);
		}
		public Create_view_stmtContext create_view_stmt() {
			return GetRuleContext<Create_view_stmtContext>(0);
		}
		public Create_virtual_table_stmtContext create_virtual_table_stmt() {
			return GetRuleContext<Create_virtual_table_stmtContext>(0);
		}
		public Delete_stmtContext delete_stmt() {
			return GetRuleContext<Delete_stmtContext>(0);
		}
		public Delete_stmt_limitedContext delete_stmt_limited() {
			return GetRuleContext<Delete_stmt_limitedContext>(0);
		}
		public Detach_stmtContext detach_stmt() {
			return GetRuleContext<Detach_stmtContext>(0);
		}
		public Drop_stmtContext drop_stmt() {
			return GetRuleContext<Drop_stmtContext>(0);
		}
		public Insert_stmtContext insert_stmt() {
			return GetRuleContext<Insert_stmtContext>(0);
		}
		public Pragma_stmtContext pragma_stmt() {
			return GetRuleContext<Pragma_stmtContext>(0);
		}
		public Reindex_stmtContext reindex_stmt() {
			return GetRuleContext<Reindex_stmtContext>(0);
		}
		public Release_stmtContext release_stmt() {
			return GetRuleContext<Release_stmtContext>(0);
		}
		public Rollback_stmtContext rollback_stmt() {
			return GetRuleContext<Rollback_stmtContext>(0);
		}
		public Savepoint_stmtContext savepoint_stmt() {
			return GetRuleContext<Savepoint_stmtContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Update_stmtContext update_stmt() {
			return GetRuleContext<Update_stmtContext>(0);
		}
		public Update_stmt_limitedContext update_stmt_limited() {
			return GetRuleContext<Update_stmt_limitedContext>(0);
		}
		public Vacuum_stmtContext vacuum_stmt() {
			return GetRuleContext<Vacuum_stmtContext>(0);
		}
		public ITerminalNode EXPLAIN_() { return GetToken(SQLiteParser.EXPLAIN_, 0); }
		public ITerminalNode QUERY_() { return GetToken(SQLiteParser.QUERY_, 0); }
		public ITerminalNode PLAN_() { return GetToken(SQLiteParser.PLAN_, 0); }
		public Sql_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterSql_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitSql_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmtContext sql_stmt() {
		Sql_stmtContext _localctx = new Sql_stmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_sql_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXPLAIN_) {
				{
				State = 258; Match(EXPLAIN_);
				State = 261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUERY_) {
					{
					State = 259; Match(QUERY_);
					State = 260; Match(PLAN_);
					}
				}

				}
			}

			State = 289;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 265; alter_table_stmt();
				}
				break;
			case 2:
				{
				State = 266; analyze_stmt();
				}
				break;
			case 3:
				{
				State = 267; attach_stmt();
				}
				break;
			case 4:
				{
				State = 268; begin_stmt();
				}
				break;
			case 5:
				{
				State = 269; commit_stmt();
				}
				break;
			case 6:
				{
				State = 270; create_index_stmt();
				}
				break;
			case 7:
				{
				State = 271; create_table_stmt();
				}
				break;
			case 8:
				{
				State = 272; create_trigger_stmt();
				}
				break;
			case 9:
				{
				State = 273; create_view_stmt();
				}
				break;
			case 10:
				{
				State = 274; create_virtual_table_stmt();
				}
				break;
			case 11:
				{
				State = 275; delete_stmt();
				}
				break;
			case 12:
				{
				State = 276; delete_stmt_limited();
				}
				break;
			case 13:
				{
				State = 277; detach_stmt();
				}
				break;
			case 14:
				{
				State = 278; drop_stmt();
				}
				break;
			case 15:
				{
				State = 279; insert_stmt();
				}
				break;
			case 16:
				{
				State = 280; pragma_stmt();
				}
				break;
			case 17:
				{
				State = 281; reindex_stmt();
				}
				break;
			case 18:
				{
				State = 282; release_stmt();
				}
				break;
			case 19:
				{
				State = 283; rollback_stmt();
				}
				break;
			case 20:
				{
				State = 284; savepoint_stmt();
				}
				break;
			case 21:
				{
				State = 285; select_stmt();
				}
				break;
			case 22:
				{
				State = 286; update_stmt();
				}
				break;
			case 23:
				{
				State = 287; update_stmt_limited();
				}
				break;
			case 24:
				{
				State = 288; vacuum_stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_stmtContext : ParserRuleContext {
		public Table_nameContext new_table_name;
		public Column_nameContext old_column_name;
		public Column_nameContext new_column_name;
		public ITerminalNode ALTER_() { return GetToken(SQLiteParser.ALTER_, 0); }
		public ITerminalNode TABLE_() { return GetToken(SQLiteParser.TABLE_, 0); }
		public Table_nameContext[] table_name() {
			return GetRuleContexts<Table_nameContext>();
		}
		public Table_nameContext table_name(int i) {
			return GetRuleContext<Table_nameContext>(i);
		}
		public ITerminalNode RENAME_() { return GetToken(SQLiteParser.RENAME_, 0); }
		public ITerminalNode ADD_() { return GetToken(SQLiteParser.ADD_, 0); }
		public Column_defContext column_def() {
			return GetRuleContext<Column_defContext>(0);
		}
		public ITerminalNode DROP_() { return GetToken(SQLiteParser.DROP_, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		public ITerminalNode TO_() { return GetToken(SQLiteParser.TO_, 0); }
		public ITerminalNode COLUMN_() { return GetToken(SQLiteParser.COLUMN_, 0); }
		public Alter_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_stmtContext alter_table_stmt() {
		Alter_table_stmtContext _localctx = new Alter_table_stmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_alter_table_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291; Match(ALTER_);
			State = 292; Match(TABLE_);
			State = 296;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 293; schema_name();
				State = 294; Match(DOT);
				}
				break;
			}
			State = 298; table_name();
			State = 321;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RENAME_:
				{
				State = 299; Match(RENAME_);
				State = 309;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 300; Match(TO_);
					State = 301; _localctx.new_table_name = table_name();
					}
					break;
				case 2:
					{
					State = 303;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						State = 302; Match(COLUMN_);
						}
						break;
					}
					State = 305; _localctx.old_column_name = column_name();
					State = 306; Match(TO_);
					State = 307; _localctx.new_column_name = column_name();
					}
					break;
				}
				}
				break;
			case ADD_:
				{
				State = 311; Match(ADD_);
				State = 313;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 312; Match(COLUMN_);
					}
					break;
				}
				State = 315; column_def();
				}
				break;
			case DROP_:
				{
				State = 316; Match(DROP_);
				State = 318;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 317; Match(COLUMN_);
					}
					break;
				}
				State = 320; column_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Analyze_stmtContext : ParserRuleContext {
		public ITerminalNode ANALYZE_() { return GetToken(SQLiteParser.ANALYZE_, 0); }
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public Table_or_index_nameContext table_or_index_name() {
			return GetRuleContext<Table_or_index_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		public Analyze_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyze_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterAnalyze_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitAnalyze_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Analyze_stmtContext analyze_stmt() {
		Analyze_stmtContext _localctx = new Analyze_stmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_analyze_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323; Match(ANALYZE_);
			State = 331;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 324; schema_name();
				}
				break;
			case 2:
				{
				State = 328;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 325; schema_name();
					State = 326; Match(DOT);
					}
					break;
				}
				State = 330; table_or_index_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attach_stmtContext : ParserRuleContext {
		public ITerminalNode ATTACH_() { return GetToken(SQLiteParser.ATTACH_, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode AS_() { return GetToken(SQLiteParser.AS_, 0); }
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DATABASE_() { return GetToken(SQLiteParser.DATABASE_, 0); }
		public Attach_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attach_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterAttach_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitAttach_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Attach_stmtContext attach_stmt() {
		Attach_stmtContext _localctx = new Attach_stmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_attach_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; Match(ATTACH_);
			State = 335;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 334; Match(DATABASE_);
				}
				break;
			}
			State = 337; expr(0);
			State = 338; Match(AS_);
			State = 339; schema_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_stmtContext : ParserRuleContext {
		public ITerminalNode BEGIN_() { return GetToken(SQLiteParser.BEGIN_, 0); }
		public ITerminalNode TRANSACTION_() { return GetToken(SQLiteParser.TRANSACTION_, 0); }
		public ITerminalNode DEFERRED_() { return GetToken(SQLiteParser.DEFERRED_, 0); }
		public ITerminalNode IMMEDIATE_() { return GetToken(SQLiteParser.IMMEDIATE_, 0); }
		public ITerminalNode EXCLUSIVE_() { return GetToken(SQLiteParser.EXCLUSIVE_, 0); }
		public Transaction_nameContext transaction_name() {
			return GetRuleContext<Transaction_nameContext>(0);
		}
		public Begin_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterBegin_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitBegin_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Begin_stmtContext begin_stmt() {
		Begin_stmtContext _localctx = new Begin_stmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_begin_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341; Match(BEGIN_);
			State = 343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (DEFERRED_ - 58)) | (1L << (EXCLUSIVE_ - 58)) | (1L << (IMMEDIATE_ - 58)))) != 0)) {
				{
				State = 342;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (DEFERRED_ - 58)) | (1L << (EXCLUSIVE_ - 58)) | (1L << (IMMEDIATE_ - 58)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TRANSACTION_) {
				{
				State = 345; Match(TRANSACTION_);
				State = 347;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 346; transaction_name();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Commit_stmtContext : ParserRuleContext {
		public ITerminalNode COMMIT_() { return GetToken(SQLiteParser.COMMIT_, 0); }
		public ITerminalNode END_() { return GetToken(SQLiteParser.END_, 0); }
		public ITerminalNode TRANSACTION_() { return GetToken(SQLiteParser.TRANSACTION_, 0); }
		public Commit_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commit_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterCommit_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitCommit_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Commit_stmtContext commit_stmt() {
		Commit_stmtContext _localctx = new Commit_stmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_commit_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			_la = TokenStream.LA(1);
			if ( !(_la==COMMIT_ || _la==END_) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TRANSACTION_) {
				{
				State = 352; Match(TRANSACTION_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollback_stmtContext : ParserRuleContext {
		public ITerminalNode ROLLBACK_() { return GetToken(SQLiteParser.ROLLBACK_, 0); }
		public ITerminalNode TRANSACTION_() { return GetToken(SQLiteParser.TRANSACTION_, 0); }
		public ITerminalNode TO_() { return GetToken(SQLiteParser.TO_, 0); }
		public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public ITerminalNode SAVEPOINT_() { return GetToken(SQLiteParser.SAVEPOINT_, 0); }
		public Rollback_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollback_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterRollback_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitRollback_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Rollback_stmtContext rollback_stmt() {
		Rollback_stmtContext _localctx = new Rollback_stmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_rollback_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355; Match(ROLLBACK_);
			State = 357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TRANSACTION_) {
				{
				State = 356; Match(TRANSACTION_);
				}
			}

			State = 364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TO_) {
				{
				State = 359; Match(TO_);
				State = 361;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 360; Match(SAVEPOINT_);
					}
					break;
				}
				State = 363; savepoint_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Savepoint_stmtContext : ParserRuleContext {
		public ITerminalNode SAVEPOINT_() { return GetToken(SQLiteParser.SAVEPOINT_, 0); }
		public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public Savepoint_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepoint_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterSavepoint_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitSavepoint_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Savepoint_stmtContext savepoint_stmt() {
		Savepoint_stmtContext _localctx = new Savepoint_stmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_savepoint_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366; Match(SAVEPOINT_);
			State = 367; savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Release_stmtContext : ParserRuleContext {
		public ITerminalNode RELEASE_() { return GetToken(SQLiteParser.RELEASE_, 0); }
		public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public ITerminalNode SAVEPOINT_() { return GetToken(SQLiteParser.SAVEPOINT_, 0); }
		public Release_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_release_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterRelease_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitRelease_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Release_stmtContext release_stmt() {
		Release_stmtContext _localctx = new Release_stmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_release_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369; Match(RELEASE_);
			State = 371;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 370; Match(SAVEPOINT_);
				}
				break;
			}
			State = 373; savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_index_stmtContext : ParserRuleContext {
		public ITerminalNode CREATE_() { return GetToken(SQLiteParser.CREATE_, 0); }
		public ITerminalNode INDEX_() { return GetToken(SQLiteParser.INDEX_, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode ON_() { return GetToken(SQLiteParser.ON_, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		public Indexed_columnContext[] indexed_column() {
			return GetRuleContexts<Indexed_columnContext>();
		}
		public Indexed_columnContext indexed_column(int i) {
			return GetRuleContext<Indexed_columnContext>(i);
		}
		public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public ITerminalNode UNIQUE_() { return GetToken(SQLiteParser.UNIQUE_, 0); }
		public ITerminalNode IF_() { return GetToken(SQLiteParser.IF_, 0); }
		public ITerminalNode NOT_() { return GetToken(SQLiteParser.NOT_, 0); }
		public ITerminalNode EXISTS_() { return GetToken(SQLiteParser.EXISTS_, 0); }
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public ITerminalNode WHERE_() { return GetToken(SQLiteParser.WHERE_, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Create_index_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterCreate_index_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitCreate_index_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_index_stmtContext create_index_stmt() {
		Create_index_stmtContext _localctx = new Create_index_stmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_create_index_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375; Match(CREATE_);
			State = 377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNIQUE_) {
				{
				State = 376; Match(UNIQUE_);
				}
			}

			State = 379; Match(INDEX_);
			State = 383;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 380; Match(IF_);
				State = 381; Match(NOT_);
				State = 382; Match(EXISTS_);
				}
				break;
			}
			State = 388;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 385; schema_name();
				State = 386; Match(DOT);
				}
				break;
			}
			State = 390; index_name();
			State = 391; Match(ON_);
			State = 392; table_name();
			State = 393; Match(OPEN_PAR);
			State = 394; indexed_column();
			State = 399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 395; Match(COMMA);
				State = 396; indexed_column();
				}
				}
				State = 401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 402; Match(CLOSE_PAR);
			State = 405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE_) {
				{
				State = 403; Match(WHERE_);
				State = 404; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexed_columnContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode COLLATE_() { return GetToken(SQLiteParser.COLLATE_, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public Asc_descContext asc_desc() {
			return GetRuleContext<Asc_descContext>(0);
		}
		public Indexed_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexed_column; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterIndexed_column(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitIndexed_column(this);
		}
	}

	[RuleVersion(0)]
	public Indexed_columnContext indexed_column() {
		Indexed_columnContext _localctx = new Indexed_columnContext(Context, State);
		EnterRule(_localctx, 24, RULE_indexed_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 407; column_name();
				}
				break;
			case 2:
				{
				State = 408; expr(0);
				}
				break;
			}
			State = 413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLLATE_) {
				{
				State = 411; Match(COLLATE_);
				State = 412; collation_name();
				}
			}

			State = 416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC_ || _la==DESC_) {
				{
				State = 415; asc_desc();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_stmtContext : ParserRuleContext {
		public IToken row_ROW_ID;
		public ITerminalNode CREATE_() { return GetToken(SQLiteParser.CREATE_, 0); }
		public ITerminalNode TABLE_() { return GetToken(SQLiteParser.TABLE_, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		public Column_defContext[] column_def() {
			return GetRuleContexts<Column_defContext>();
		}
		public Column_defContext column_def(int i) {
			return GetRuleContext<Column_defContext>(i);
		}
		public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public ITerminalNode AS_() { return GetToken(SQLiteParser.AS_, 0); }
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public ITerminalNode IF_() { return GetToken(SQLiteParser.IF_, 0); }
		public ITerminalNode NOT_() { return GetToken(SQLiteParser.NOT_, 0); }
		public ITerminalNode EXISTS_() { return GetToken(SQLiteParser.EXISTS_, 0); }
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		public ITerminalNode TEMP_() { return GetToken(SQLiteParser.TEMP_, 0); }
		public ITerminalNode TEMPORARY_() { return GetToken(SQLiteParser.TEMPORARY_, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Table_constraintContext[] table_constraint() {
			return GetRuleContexts<Table_constraintContext>();
		}
		public Table_constraintContext table_constraint(int i) {
			return GetRuleContext<Table_constraintContext>(i);
		}
		public ITerminalNode WITHOUT_() { return GetToken(SQLiteParser.WITHOUT_, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(SQLiteParser.IDENTIFIER, 0); }
		public Create_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterCreate_table_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitCreate_table_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_stmtContext create_table_stmt() {
		Create_table_stmtContext _localctx = new Create_table_stmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_create_table_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 418; Match(CREATE_);
			State = 420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP_ || _la==TEMPORARY_) {
				{
				State = 419;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP_ || _la==TEMPORARY_) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 422; Match(TABLE_);
			State = 426;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 423; Match(IF_);
				State = 424; Match(NOT_);
				State = 425; Match(EXISTS_);
				}
				break;
			}
			State = 431;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 428; schema_name();
				State = 429; Match(DOT);
				}
				break;
			}
			State = 433; table_name();
			State = 457;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAR:
				{
				State = 434; Match(OPEN_PAR);
				State = 435; column_def();
				State = 440;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 436; Match(COMMA);
						State = 437; column_def();
						}
						} 
					}
					State = 442;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
				}
				State = 447;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 443; Match(COMMA);
					State = 444; table_constraint();
					}
					}
					State = 449;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 450; Match(CLOSE_PAR);
				State = 453;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITHOUT_) {
					{
					State = 451; Match(WITHOUT_);
					State = 452; _localctx.row_ROW_ID = Match(IDENTIFIER);
					}
				}

				}
				break;
			case AS_:
				{
				State = 455; Match(AS_);
				State = 456; select_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_defContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Column_constraintContext[] column_constraint() {
			return GetRuleContexts<Column_constraintContext>();
		}
		public Column_constraintContext column_constraint(int i) {
			return GetRuleContext<Column_constraintContext>(i);
		}
		public Column_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterColumn_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitColumn_def(this);
		}
	}

	[RuleVersion(0)]
	public Column_defContext column_def() {
		Column_defContext _localctx = new Column_defContext(Context, State);
		EnterRule(_localctx, 28, RULE_column_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459; column_name();
			State = 461;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 460; type_name();
				}
				break;
			}
			State = 466;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS_) | (1L << CHECK_) | (1L << COLLATE_) | (1L << CONSTRAINT_) | (1L << DEFAULT_))) != 0) || ((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & ((1L << (NOT_ - 102)) | (1L << (NULL_ - 102)) | (1L << (PRIMARY_ - 102)) | (1L << (REFERENCES_ - 102)) | (1L << (UNIQUE_ - 102)))) != 0) || _la==GENERATED_) {
				{
				{
				State = 463; column_constraint();
				}
				}
				State = 468;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		public Signed_numberContext[] signed_number() {
			return GetRuleContexts<Signed_numberContext>();
		}
		public Signed_numberContext signed_number(int i) {
			return GetRuleContext<Signed_numberContext>(i);
		}
		public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public ITerminalNode COMMA() { return GetToken(SQLiteParser.COMMA, 0); }
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 30, RULE_type_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 470;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 469; name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 472;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 484;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 474; Match(OPEN_PAR);
				State = 475; signed_number();
				State = 476; Match(CLOSE_PAR);
				}
				break;
			case 2:
				{
				State = 478; Match(OPEN_PAR);
				State = 479; signed_number();
				State = 480; Match(COMMA);
				State = 481; signed_number();
				State = 482; Match(CLOSE_PAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraintContext : ParserRuleContext {
		public ITerminalNode CHECK_() { return GetToken(SQLiteParser.CHECK_, 0); }
		public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public ITerminalNode DEFAULT_() { return GetToken(SQLiteParser.DEFAULT_, 0); }
		public ITerminalNode COLLATE_() { return GetToken(SQLiteParser.COLLATE_, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public Foreign_key_clauseContext foreign_key_clause() {
			return GetRuleContext<Foreign_key_clauseContext>(0);
		}
		public ITerminalNode AS_() { return GetToken(SQLiteParser.AS_, 0); }
		public ITerminalNode CONSTRAINT_() { return GetToken(SQLiteParser.CONSTRAINT_, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode PRIMARY_() { return GetToken(SQLiteParser.PRIMARY_, 0); }
		public ITerminalNode KEY_() { return GetToken(SQLiteParser.KEY_, 0); }
		public ITerminalNode NULL_() { return GetToken(SQLiteParser.NULL_, 0); }
		public ITerminalNode UNIQUE_() { return GetToken(SQLiteParser.UNIQUE_, 0); }
		public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public Conflict_clauseContext conflict_clause() {
			return GetRuleContext<Conflict_clauseContext>(0);
		}
		public ITerminalNode GENERATED_() { return GetToken(SQLiteParser.GENERATED_, 0); }
		public ITerminalNode ALWAYS_() { return GetToken(SQLiteParser.ALWAYS_, 0); }
		public ITerminalNode STORED_() { return GetToken(SQLiteParser.STORED_, 0); }
		public ITerminalNode VIRTUAL_() { return GetToken(SQLiteParser.VIRTUAL_, 0); }
		public Asc_descContext asc_desc() {
			return GetRuleContext<Asc_descContext>(0);
		}
		public ITerminalNode AUTOINCREMENT_() { return GetToken(SQLiteParser.AUTOINCREMENT_, 0); }
		public ITerminalNode NOT_() { return GetToken(SQLiteParser.NOT_, 0); }
		public Column_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterColumn_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitColumn_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraintContext column_constraint() {
		Column_constraintContext _localctx = new Column_constraintContext(Context, State);
		EnterRule(_localctx, 32, RULE_column_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTRAINT_) {
				{
				State = 486; Match(CONSTRAINT_);
				State = 487; name();
				}
			}

			State = 539;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY_:
				{
				{
				State = 490; Match(PRIMARY_);
				State = 491; Match(KEY_);
				State = 493;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC_ || _la==DESC_) {
					{
					State = 492; asc_desc();
					}
				}

				State = 496;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_) {
					{
					State = 495; conflict_clause();
					}
				}

				State = 499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AUTOINCREMENT_) {
					{
					State = 498; Match(AUTOINCREMENT_);
					}
				}

				}
				}
				break;
			case NOT_:
			case NULL_:
			case UNIQUE_:
				{
				State = 506;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NOT_:
				case NULL_:
					{
					State = 502;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NOT_) {
						{
						State = 501; Match(NOT_);
						}
					}

					State = 504; Match(NULL_);
					}
					break;
				case UNIQUE_:
					{
					State = 505; Match(UNIQUE_);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 509;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_) {
					{
					State = 508; conflict_clause();
					}
				}

				}
				break;
			case CHECK_:
				{
				State = 511; Match(CHECK_);
				State = 512; Match(OPEN_PAR);
				State = 513; expr(0);
				State = 514; Match(CLOSE_PAR);
				}
				break;
			case DEFAULT_:
				{
				State = 516; Match(DEFAULT_);
				State = 523;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
				case 1:
					{
					State = 517; signed_number();
					}
					break;
				case 2:
					{
					State = 518; literal_value();
					}
					break;
				case 3:
					{
					State = 519; Match(OPEN_PAR);
					State = 520; expr(0);
					State = 521; Match(CLOSE_PAR);
					}
					break;
				}
				}
				break;
			case COLLATE_:
				{
				State = 525; Match(COLLATE_);
				State = 526; collation_name();
				}
				break;
			case REFERENCES_:
				{
				State = 527; foreign_key_clause();
				}
				break;
			case AS_:
			case GENERATED_:
				{
				State = 530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GENERATED_) {
					{
					State = 528; Match(GENERATED_);
					State = 529; Match(ALWAYS_);
					}
				}

				State = 532; Match(AS_);
				State = 533; Match(OPEN_PAR);
				State = 534; expr(0);
				State = 535; Match(CLOSE_PAR);
				State = 537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VIRTUAL_ || _la==STORED_) {
					{
					State = 536;
					_la = TokenStream.LA(1);
					if ( !(_la==VIRTUAL_ || _la==STORED_) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_numberContext : ParserRuleContext {
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(SQLiteParser.NUMERIC_LITERAL, 0); }
		public ITerminalNode PLUS() { return GetToken(SQLiteParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(SQLiteParser.MINUS, 0); }
		public Signed_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterSigned_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitSigned_number(this);
		}
	}

	[RuleVersion(0)]
	public Signed_numberContext signed_number() {
		Signed_numberContext _localctx = new Signed_numberContext(Context, State);
		EnterRule(_localctx, 34, RULE_signed_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 542;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 541;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 544; Match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_constraintContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		public Indexed_columnContext[] indexed_column() {
			return GetRuleContexts<Indexed_columnContext>();
		}
		public Indexed_columnContext indexed_column(int i) {
			return GetRuleContext<Indexed_columnContext>(i);
		}
		public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public ITerminalNode CHECK_() { return GetToken(SQLiteParser.CHECK_, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode FOREIGN_() { return GetToken(SQLiteParser.FOREIGN_, 0); }
		public ITerminalNode KEY_() { return GetToken(SQLiteParser.KEY_, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Foreign_key_clauseContext foreign_key_clause() {
			return GetRuleContext<Foreign_key_clauseContext>(0);
		}
		public ITerminalNode CONSTRAINT_() { return GetToken(SQLiteParser.CONSTRAINT_, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode PRIMARY_() { return GetToken(SQLiteParser.PRIMARY_, 0); }
		public ITerminalNode UNIQUE_() { return GetToken(SQLiteParser.UNIQUE_, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Conflict_clauseContext conflict_clause() {
			return GetRuleContext<Conflict_clauseContext>(0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterTable_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitTable_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Table_constraintContext table_constraint() {
		Table_constraintContext _localctx = new Table_constraintContext(Context, State);
		EnterRule(_localctx, 36, RULE_table_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 548;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTRAINT_) {
				{
				State = 546; Match(CONSTRAINT_);
				State = 547; name();
				}
			}

			State = 587;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY_:
			case UNIQUE_:
				{
				State = 553;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PRIMARY_:
					{
					State = 550; Match(PRIMARY_);
					State = 551; Match(KEY_);
					}
					break;
				case UNIQUE_:
					{
					State = 552; Match(UNIQUE_);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 555; Match(OPEN_PAR);
				State = 556; indexed_column();
				State = 561;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 557; Match(COMMA);
					State = 558; indexed_column();
					}
					}
					State = 563;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 564; Match(CLOSE_PAR);
				State = 566;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_) {
					{
					State = 565; conflict_clause();
					}
				}

				}
				break;
			case CHECK_:
				{
				State = 568; Match(CHECK_);
				State = 569; Match(OPEN_PAR);
				State = 570; expr(0);
				State = 571; Match(CLOSE_PAR);
				}
				break;
			case FOREIGN_:
				{
				State = 573; Match(FOREIGN_);
				State = 574; Match(KEY_);
				State = 575; Match(OPEN_PAR);
				State = 576; column_name();
				State = 581;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 577; Match(COMMA);
					State = 578; column_name();
					}
					}
					State = 583;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 584; Match(CLOSE_PAR);
				State = 585; foreign_key_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_key_clauseContext : ParserRuleContext {
		public ITerminalNode REFERENCES_() { return GetToken(SQLiteParser.REFERENCES_, 0); }
		public Foreign_tableContext foreign_table() {
			return GetRuleContext<Foreign_tableContext>(0);
		}
		public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public ITerminalNode[] ON_() { return GetTokens(SQLiteParser.ON_); }
		public ITerminalNode ON_(int i) {
			return GetToken(SQLiteParser.ON_, i);
		}
		public ITerminalNode[] MATCH_() { return GetTokens(SQLiteParser.MATCH_); }
		public ITerminalNode MATCH_(int i) {
			return GetToken(SQLiteParser.MATCH_, i);
		}
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public ITerminalNode DEFERRABLE_() { return GetToken(SQLiteParser.DEFERRABLE_, 0); }
		public ITerminalNode[] DELETE_() { return GetTokens(SQLiteParser.DELETE_); }
		public ITerminalNode DELETE_(int i) {
			return GetToken(SQLiteParser.DELETE_, i);
		}
		public ITerminalNode[] UPDATE_() { return GetTokens(SQLiteParser.UPDATE_); }
		public ITerminalNode UPDATE_(int i) {
			return GetToken(SQLiteParser.UPDATE_, i);
		}
		public ITerminalNode[] SET_() { return GetTokens(SQLiteParser.SET_); }
		public ITerminalNode SET_(int i) {
			return GetToken(SQLiteParser.SET_, i);
		}
		public ITerminalNode[] CASCADE_() { return GetTokens(SQLiteParser.CASCADE_); }
		public ITerminalNode CASCADE_(int i) {
			return GetToken(SQLiteParser.CASCADE_, i);
		}
		public ITerminalNode[] RESTRICT_() { return GetTokens(SQLiteParser.RESTRICT_); }
		public ITerminalNode RESTRICT_(int i) {
			return GetToken(SQLiteParser.RESTRICT_, i);
		}
		public ITerminalNode[] NO_() { return GetTokens(SQLiteParser.NO_); }
		public ITerminalNode NO_(int i) {
			return GetToken(SQLiteParser.NO_, i);
		}
		public ITerminalNode[] ACTION_() { return GetTokens(SQLiteParser.ACTION_); }
		public ITerminalNode ACTION_(int i) {
			return GetToken(SQLiteParser.ACTION_, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public ITerminalNode[] NULL_() { return GetTokens(SQLiteParser.NULL_); }
		public ITerminalNode NULL_(int i) {
			return GetToken(SQLiteParser.NULL_, i);
		}
		public ITerminalNode[] DEFAULT_() { return GetTokens(SQLiteParser.DEFAULT_); }
		public ITerminalNode DEFAULT_(int i) {
			return GetToken(SQLiteParser.DEFAULT_, i);
		}
		public ITerminalNode NOT_() { return GetToken(SQLiteParser.NOT_, 0); }
		public ITerminalNode INITIALLY_() { return GetToken(SQLiteParser.INITIALLY_, 0); }
		public ITerminalNode DEFERRED_() { return GetToken(SQLiteParser.DEFERRED_, 0); }
		public ITerminalNode IMMEDIATE_() { return GetToken(SQLiteParser.IMMEDIATE_, 0); }
		public Foreign_key_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_key_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterForeign_key_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitForeign_key_clause(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_key_clauseContext foreign_key_clause() {
		Foreign_key_clauseContext _localctx = new Foreign_key_clauseContext(Context, State);
		EnterRule(_localctx, 38, RULE_foreign_key_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589; Match(REFERENCES_);
			State = 590; foreign_table();
			State = 602;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 591; Match(OPEN_PAR);
				State = 592; column_name();
				State = 597;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 593; Match(COMMA);
					State = 594; column_name();
					}
					}
					State = 599;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 600; Match(CLOSE_PAR);
				}
			}

			State = 618;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MATCH_ || _la==ON_) {
				{
				State = 616;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ON_:
					{
					State = 604; Match(ON_);
					State = 605;
					_la = TokenStream.LA(1);
					if ( !(_la==DELETE_ || _la==UPDATE_) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 612;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case SET_:
						{
						State = 606; Match(SET_);
						State = 607;
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT_ || _la==NULL_) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case CASCADE_:
						{
						State = 608; Match(CASCADE_);
						}
						break;
					case RESTRICT_:
						{
						State = 609; Match(RESTRICT_);
						}
						break;
					case NO_:
						{
						State = 610; Match(NO_);
						State = 611; Match(ACTION_);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case MATCH_:
					{
					State = 614; Match(MATCH_);
					State = 615; name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 620;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 629;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				{
				State = 622;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_) {
					{
					State = 621; Match(NOT_);
					}
				}

				State = 624; Match(DEFERRABLE_);
				State = 627;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INITIALLY_) {
					{
					State = 625; Match(INITIALLY_);
					State = 626;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFERRED_ || _la==IMMEDIATE_) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conflict_clauseContext : ParserRuleContext {
		public ITerminalNode ON_() { return GetToken(SQLiteParser.ON_, 0); }
		public ITerminalNode CONFLICT_() { return GetToken(SQLiteParser.CONFLICT_, 0); }
		public ITerminalNode ROLLBACK_() { return GetToken(SQLiteParser.ROLLBACK_, 0); }
		public ITerminalNode ABORT_() { return GetToken(SQLiteParser.ABORT_, 0); }
		public ITerminalNode FAIL_() { return GetToken(SQLiteParser.FAIL_, 0); }
		public ITerminalNode IGNORE_() { return GetToken(SQLiteParser.IGNORE_, 0); }
		public ITerminalNode REPLACE_() { return GetToken(SQLiteParser.REPLACE_, 0); }
		public Conflict_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conflict_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterConflict_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitConflict_clause(this);
		}
	}

	[RuleVersion(0)]
	public Conflict_clauseContext conflict_clause() {
		Conflict_clauseContext _localctx = new Conflict_clauseContext(Context, State);
		EnterRule(_localctx, 40, RULE_conflict_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631; Match(ON_);
			State = 632; Match(CONFLICT_);
			State = 633;
			_la = TokenStream.LA(1);
			if ( !(_la==ABORT_ || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (FAIL_ - 72)) | (1L << (IGNORE_ - 72)) | (1L << (REPLACE_ - 72)) | (1L << (ROLLBACK_ - 72)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_trigger_stmtContext : ParserRuleContext {
		public ITerminalNode CREATE_() { return GetToken(SQLiteParser.CREATE_, 0); }
		public ITerminalNode TRIGGER_() { return GetToken(SQLiteParser.TRIGGER_, 0); }
		public Trigger_nameContext trigger_name() {
			return GetRuleContext<Trigger_nameContext>(0);
		}
		public ITerminalNode ON_() { return GetToken(SQLiteParser.ON_, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode BEGIN_() { return GetToken(SQLiteParser.BEGIN_, 0); }
		public ITerminalNode END_() { return GetToken(SQLiteParser.END_, 0); }
		public ITerminalNode DELETE_() { return GetToken(SQLiteParser.DELETE_, 0); }
		public ITerminalNode INSERT_() { return GetToken(SQLiteParser.INSERT_, 0); }
		public ITerminalNode UPDATE_() { return GetToken(SQLiteParser.UPDATE_, 0); }
		public ITerminalNode IF_() { return GetToken(SQLiteParser.IF_, 0); }
		public ITerminalNode NOT_() { return GetToken(SQLiteParser.NOT_, 0); }
		public ITerminalNode EXISTS_() { return GetToken(SQLiteParser.EXISTS_, 0); }
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		public ITerminalNode BEFORE_() { return GetToken(SQLiteParser.BEFORE_, 0); }
		public ITerminalNode AFTER_() { return GetToken(SQLiteParser.AFTER_, 0); }
		public ITerminalNode INSTEAD_() { return GetToken(SQLiteParser.INSTEAD_, 0); }
		public ITerminalNode[] OF_() { return GetTokens(SQLiteParser.OF_); }
		public ITerminalNode OF_(int i) {
			return GetToken(SQLiteParser.OF_, i);
		}
		public ITerminalNode FOR_() { return GetToken(SQLiteParser.FOR_, 0); }
		public ITerminalNode EACH_() { return GetToken(SQLiteParser.EACH_, 0); }
		public ITerminalNode ROW_() { return GetToken(SQLiteParser.ROW_, 0); }
		public ITerminalNode WHEN_() { return GetToken(SQLiteParser.WHEN_, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode[] SCOL() { return GetTokens(SQLiteParser.SCOL); }
		public ITerminalNode SCOL(int i) {
			return GetToken(SQLiteParser.SCOL, i);
		}
		public ITerminalNode TEMP_() { return GetToken(SQLiteParser.TEMP_, 0); }
		public ITerminalNode TEMPORARY_() { return GetToken(SQLiteParser.TEMPORARY_, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Update_stmtContext[] update_stmt() {
			return GetRuleContexts<Update_stmtContext>();
		}
		public Update_stmtContext update_stmt(int i) {
			return GetRuleContext<Update_stmtContext>(i);
		}
		public Insert_stmtContext[] insert_stmt() {
			return GetRuleContexts<Insert_stmtContext>();
		}
		public Insert_stmtContext insert_stmt(int i) {
			return GetRuleContext<Insert_stmtContext>(i);
		}
		public Delete_stmtContext[] delete_stmt() {
			return GetRuleContexts<Delete_stmtContext>();
		}
		public Delete_stmtContext delete_stmt(int i) {
			return GetRuleContext<Delete_stmtContext>(i);
		}
		public Select_stmtContext[] select_stmt() {
			return GetRuleContexts<Select_stmtContext>();
		}
		public Select_stmtContext select_stmt(int i) {
			return GetRuleContext<Select_stmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Create_trigger_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_trigger_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterCreate_trigger_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitCreate_trigger_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_trigger_stmtContext create_trigger_stmt() {
		Create_trigger_stmtContext _localctx = new Create_trigger_stmtContext(Context, State);
		EnterRule(_localctx, 42, RULE_create_trigger_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 635; Match(CREATE_);
			State = 637;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP_ || _la==TEMPORARY_) {
				{
				State = 636;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP_ || _la==TEMPORARY_) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 639; Match(TRIGGER_);
			State = 643;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				{
				State = 640; Match(IF_);
				State = 641; Match(NOT_);
				State = 642; Match(EXISTS_);
				}
				break;
			}
			State = 648;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 645; schema_name();
				State = 646; Match(DOT);
				}
				break;
			}
			State = 650; trigger_name();
			State = 655;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEFORE_:
				{
				State = 651; Match(BEFORE_);
				}
				break;
			case AFTER_:
				{
				State = 652; Match(AFTER_);
				}
				break;
			case INSTEAD_:
				{
				State = 653; Match(INSTEAD_);
				State = 654; Match(OF_);
				}
				break;
			case DELETE_:
			case INSERT_:
			case UPDATE_:
				break;
			default:
				break;
			}
			State = 671;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DELETE_:
				{
				State = 657; Match(DELETE_);
				}
				break;
			case INSERT_:
				{
				State = 658; Match(INSERT_);
				}
				break;
			case UPDATE_:
				{
				State = 659; Match(UPDATE_);
				State = 669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OF_) {
					{
					State = 660; Match(OF_);
					State = 661; column_name();
					State = 666;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 662; Match(COMMA);
						State = 663; column_name();
						}
						}
						State = 668;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 673; Match(ON_);
			State = 674; table_name();
			State = 678;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_) {
				{
				State = 675; Match(FOR_);
				State = 676; Match(EACH_);
				State = 677; Match(ROW_);
				}
			}

			State = 682;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN_) {
				{
				State = 680; Match(WHEN_);
				State = 681; expr(0);
				}
			}

			State = 684; Match(BEGIN_);
			State = 693;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 689;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
				case 1:
					{
					State = 685; update_stmt();
					}
					break;
				case 2:
					{
					State = 686; insert_stmt();
					}
					break;
				case 3:
					{
					State = 687; delete_stmt();
					}
					break;
				case 4:
					{
					State = 688; select_stmt();
					}
					break;
				}
				State = 691; Match(SCOL);
				}
				}
				State = 695;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DELETE_ || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (INSERT_ - 88)) | (1L << (REPLACE_ - 88)) | (1L << (SELECT_ - 88)) | (1L << (UPDATE_ - 88)) | (1L << (VALUES_ - 88)) | (1L << (WITH_ - 88)))) != 0) );
			State = 697; Match(END_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_view_stmtContext : ParserRuleContext {
		public ITerminalNode CREATE_() { return GetToken(SQLiteParser.CREATE_, 0); }
		public ITerminalNode VIEW_() { return GetToken(SQLiteParser.VIEW_, 0); }
		public View_nameContext view_name() {
			return GetRuleContext<View_nameContext>(0);
		}
		public ITerminalNode AS_() { return GetToken(SQLiteParser.AS_, 0); }
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public ITerminalNode IF_() { return GetToken(SQLiteParser.IF_, 0); }
		public ITerminalNode NOT_() { return GetToken(SQLiteParser.NOT_, 0); }
		public ITerminalNode EXISTS_() { return GetToken(SQLiteParser.EXISTS_, 0); }
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public ITerminalNode TEMP_() { return GetToken(SQLiteParser.TEMP_, 0); }
		public ITerminalNode TEMPORARY_() { return GetToken(SQLiteParser.TEMPORARY_, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Create_view_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterCreate_view_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitCreate_view_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_view_stmtContext create_view_stmt() {
		Create_view_stmtContext _localctx = new Create_view_stmtContext(Context, State);
		EnterRule(_localctx, 44, RULE_create_view_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 699; Match(CREATE_);
			State = 701;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP_ || _la==TEMPORARY_) {
				{
				State = 700;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP_ || _la==TEMPORARY_) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 703; Match(VIEW_);
			State = 707;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				{
				State = 704; Match(IF_);
				State = 705; Match(NOT_);
				State = 706; Match(EXISTS_);
				}
				break;
			}
			State = 712;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				{
				State = 709; schema_name();
				State = 710; Match(DOT);
				}
				break;
			}
			State = 714; view_name();
			State = 726;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 715; Match(OPEN_PAR);
				State = 716; column_name();
				State = 721;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 717; Match(COMMA);
					State = 718; column_name();
					}
					}
					State = 723;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 724; Match(CLOSE_PAR);
				}
			}

			State = 728; Match(AS_);
			State = 729; select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_virtual_table_stmtContext : ParserRuleContext {
		public ITerminalNode CREATE_() { return GetToken(SQLiteParser.CREATE_, 0); }
		public ITerminalNode VIRTUAL_() { return GetToken(SQLiteParser.VIRTUAL_, 0); }
		public ITerminalNode TABLE_() { return GetToken(SQLiteParser.TABLE_, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode USING_() { return GetToken(SQLiteParser.USING_, 0); }
		public Module_nameContext module_name() {
			return GetRuleContext<Module_nameContext>(0);
		}
		public ITerminalNode IF_() { return GetToken(SQLiteParser.IF_, 0); }
		public ITerminalNode NOT_() { return GetToken(SQLiteParser.NOT_, 0); }
		public ITerminalNode EXISTS_() { return GetToken(SQLiteParser.EXISTS_, 0); }
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		public Module_argumentContext[] module_argument() {
			return GetRuleContexts<Module_argumentContext>();
		}
		public Module_argumentContext module_argument(int i) {
			return GetRuleContext<Module_argumentContext>(i);
		}
		public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Create_virtual_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_virtual_table_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterCreate_virtual_table_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitCreate_virtual_table_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_virtual_table_stmtContext create_virtual_table_stmt() {
		Create_virtual_table_stmtContext _localctx = new Create_virtual_table_stmtContext(Context, State);
		EnterRule(_localctx, 46, RULE_create_virtual_table_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 731; Match(CREATE_);
			State = 732; Match(VIRTUAL_);
			State = 733; Match(TABLE_);
			State = 737;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				{
				State = 734; Match(IF_);
				State = 735; Match(NOT_);
				State = 736; Match(EXISTS_);
				}
				break;
			}
			State = 742;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 739; schema_name();
				State = 740; Match(DOT);
				}
				break;
			}
			State = 744; table_name();
			State = 745; Match(USING_);
			State = 746; module_name();
			State = 758;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 747; Match(OPEN_PAR);
				State = 748; module_argument();
				State = 753;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 749; Match(COMMA);
					State = 750; module_argument();
					}
					}
					State = 755;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 756; Match(CLOSE_PAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_clauseContext : ParserRuleContext {
		public ITerminalNode WITH_() { return GetToken(SQLiteParser.WITH_, 0); }
		public Cte_table_nameContext[] cte_table_name() {
			return GetRuleContexts<Cte_table_nameContext>();
		}
		public Cte_table_nameContext cte_table_name(int i) {
			return GetRuleContext<Cte_table_nameContext>(i);
		}
		public ITerminalNode[] AS_() { return GetTokens(SQLiteParser.AS_); }
		public ITerminalNode AS_(int i) {
			return GetToken(SQLiteParser.AS_, i);
		}
		public ITerminalNode[] OPEN_PAR() { return GetTokens(SQLiteParser.OPEN_PAR); }
		public ITerminalNode OPEN_PAR(int i) {
			return GetToken(SQLiteParser.OPEN_PAR, i);
		}
		public Select_stmtContext[] select_stmt() {
			return GetRuleContexts<Select_stmtContext>();
		}
		public Select_stmtContext select_stmt(int i) {
			return GetRuleContext<Select_stmtContext>(i);
		}
		public ITerminalNode[] CLOSE_PAR() { return GetTokens(SQLiteParser.CLOSE_PAR); }
		public ITerminalNode CLOSE_PAR(int i) {
			return GetToken(SQLiteParser.CLOSE_PAR, i);
		}
		public ITerminalNode RECURSIVE_() { return GetToken(SQLiteParser.RECURSIVE_, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public With_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterWith_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitWith_clause(this);
		}
	}

	[RuleVersion(0)]
	public With_clauseContext with_clause() {
		With_clauseContext _localctx = new With_clauseContext(Context, State);
		EnterRule(_localctx, 48, RULE_with_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 760; Match(WITH_);
			State = 762;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				{
				State = 761; Match(RECURSIVE_);
				}
				break;
			}
			State = 764; cte_table_name();
			State = 765; Match(AS_);
			State = 766; Match(OPEN_PAR);
			State = 767; select_stmt();
			State = 768; Match(CLOSE_PAR);
			State = 778;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 769; Match(COMMA);
				State = 770; cte_table_name();
				State = 771; Match(AS_);
				State = 772; Match(OPEN_PAR);
				State = 773; select_stmt();
				State = 774; Match(CLOSE_PAR);
				}
				}
				State = 780;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cte_table_nameContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Cte_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cte_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterCte_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitCte_table_name(this);
		}
	}

	[RuleVersion(0)]
	public Cte_table_nameContext cte_table_name() {
		Cte_table_nameContext _localctx = new Cte_table_nameContext(Context, State);
		EnterRule(_localctx, 50, RULE_cte_table_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 781; table_name();
			State = 793;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 782; Match(OPEN_PAR);
				State = 783; column_name();
				State = 788;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 784; Match(COMMA);
					State = 785; column_name();
					}
					}
					State = 790;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 791; Match(CLOSE_PAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recursive_cteContext : ParserRuleContext {
		public Cte_table_nameContext cte_table_name() {
			return GetRuleContext<Cte_table_nameContext>(0);
		}
		public ITerminalNode AS_() { return GetToken(SQLiteParser.AS_, 0); }
		public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		public Initial_selectContext initial_select() {
			return GetRuleContext<Initial_selectContext>(0);
		}
		public ITerminalNode UNION_() { return GetToken(SQLiteParser.UNION_, 0); }
		public Recursive_selectContext recursive_select() {
			return GetRuleContext<Recursive_selectContext>(0);
		}
		public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public ITerminalNode ALL_() { return GetToken(SQLiteParser.ALL_, 0); }
		public Recursive_cteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recursive_cte; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterRecursive_cte(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitRecursive_cte(this);
		}
	}

	[RuleVersion(0)]
	public Recursive_cteContext recursive_cte() {
		Recursive_cteContext _localctx = new Recursive_cteContext(Context, State);
		EnterRule(_localctx, 52, RULE_recursive_cte);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 795; cte_table_name();
			State = 796; Match(AS_);
			State = 797; Match(OPEN_PAR);
			State = 798; initial_select();
			State = 799; Match(UNION_);
			State = 801;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL_) {
				{
				State = 800; Match(ALL_);
				}
			}

			State = 803; recursive_select();
			State = 804; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_table_expressionContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode AS_() { return GetToken(SQLiteParser.AS_, 0); }
		public ITerminalNode[] OPEN_PAR() { return GetTokens(SQLiteParser.OPEN_PAR); }
		public ITerminalNode OPEN_PAR(int i) {
			return GetToken(SQLiteParser.OPEN_PAR, i);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public ITerminalNode[] CLOSE_PAR() { return GetTokens(SQLiteParser.CLOSE_PAR); }
		public ITerminalNode CLOSE_PAR(int i) {
			return GetToken(SQLiteParser.CLOSE_PAR, i);
		}
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterCommon_table_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitCommon_table_expression(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_expressionContext common_table_expression() {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_common_table_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 806; table_name();
			State = 818;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 807; Match(OPEN_PAR);
				State = 808; column_name();
				State = 813;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 809; Match(COMMA);
					State = 810; column_name();
					}
					}
					State = 815;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 816; Match(CLOSE_PAR);
				}
			}

			State = 820; Match(AS_);
			State = 821; Match(OPEN_PAR);
			State = 822; select_stmt();
			State = 823; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_stmtContext : ParserRuleContext {
		public ITerminalNode DELETE_() { return GetToken(SQLiteParser.DELETE_, 0); }
		public ITerminalNode FROM_() { return GetToken(SQLiteParser.FROM_, 0); }
		public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public ITerminalNode WHERE_() { return GetToken(SQLiteParser.WHERE_, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Returning_clauseContext returning_clause() {
			return GetRuleContext<Returning_clauseContext>(0);
		}
		public Delete_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterDelete_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitDelete_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Delete_stmtContext delete_stmt() {
		Delete_stmtContext _localctx = new Delete_stmtContext(Context, State);
		EnterRule(_localctx, 56, RULE_delete_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 826;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_) {
				{
				State = 825; with_clause();
				}
			}

			State = 828; Match(DELETE_);
			State = 829; Match(FROM_);
			State = 830; qualified_table_name();
			State = 833;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE_) {
				{
				State = 831; Match(WHERE_);
				State = 832; expr(0);
				}
			}

			State = 836;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING_) {
				{
				State = 835; returning_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_stmt_limitedContext : ParserRuleContext {
		public ITerminalNode DELETE_() { return GetToken(SQLiteParser.DELETE_, 0); }
		public ITerminalNode FROM_() { return GetToken(SQLiteParser.FROM_, 0); }
		public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public ITerminalNode WHERE_() { return GetToken(SQLiteParser.WHERE_, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Returning_clauseContext returning_clause() {
			return GetRuleContext<Returning_clauseContext>(0);
		}
		public Limit_stmtContext limit_stmt() {
			return GetRuleContext<Limit_stmtContext>(0);
		}
		public Order_by_stmtContext order_by_stmt() {
			return GetRuleContext<Order_by_stmtContext>(0);
		}
		public Delete_stmt_limitedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_stmt_limited; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterDelete_stmt_limited(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitDelete_stmt_limited(this);
		}
	}

	[RuleVersion(0)]
	public Delete_stmt_limitedContext delete_stmt_limited() {
		Delete_stmt_limitedContext _localctx = new Delete_stmt_limitedContext(Context, State);
		EnterRule(_localctx, 58, RULE_delete_stmt_limited);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 839;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_) {
				{
				State = 838; with_clause();
				}
			}

			State = 841; Match(DELETE_);
			State = 842; Match(FROM_);
			State = 843; qualified_table_name();
			State = 846;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE_) {
				{
				State = 844; Match(WHERE_);
				State = 845; expr(0);
				}
			}

			State = 849;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING_) {
				{
				State = 848; returning_clause();
				}
			}

			State = 855;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT_ || _la==ORDER_) {
				{
				State = 852;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER_) {
					{
					State = 851; order_by_stmt();
					}
				}

				State = 854; limit_stmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Detach_stmtContext : ParserRuleContext {
		public ITerminalNode DETACH_() { return GetToken(SQLiteParser.DETACH_, 0); }
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DATABASE_() { return GetToken(SQLiteParser.DATABASE_, 0); }
		public Detach_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detach_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterDetach_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitDetach_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Detach_stmtContext detach_stmt() {
		Detach_stmtContext _localctx = new Detach_stmtContext(Context, State);
		EnterRule(_localctx, 60, RULE_detach_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 857; Match(DETACH_);
			State = 859;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				{
				State = 858; Match(DATABASE_);
				}
				break;
			}
			State = 861; schema_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_stmtContext : ParserRuleContext {
		public IToken @object;
		public ITerminalNode DROP_() { return GetToken(SQLiteParser.DROP_, 0); }
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public ITerminalNode INDEX_() { return GetToken(SQLiteParser.INDEX_, 0); }
		public ITerminalNode TABLE_() { return GetToken(SQLiteParser.TABLE_, 0); }
		public ITerminalNode TRIGGER_() { return GetToken(SQLiteParser.TRIGGER_, 0); }
		public ITerminalNode VIEW_() { return GetToken(SQLiteParser.VIEW_, 0); }
		public ITerminalNode IF_() { return GetToken(SQLiteParser.IF_, 0); }
		public ITerminalNode EXISTS_() { return GetToken(SQLiteParser.EXISTS_, 0); }
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		public Drop_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterDrop_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitDrop_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Drop_stmtContext drop_stmt() {
		Drop_stmtContext _localctx = new Drop_stmtContext(Context, State);
		EnterRule(_localctx, 62, RULE_drop_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 863; Match(DROP_);
			State = 864;
			_localctx.@object = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (INDEX_ - 84)) | (1L << (TABLE_ - 84)) | (1L << (TRIGGER_ - 84)) | (1L << (VIEW_ - 84)))) != 0)) ) {
				_localctx.@object = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 867;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				{
				State = 865; Match(IF_);
				State = 866; Match(EXISTS_);
				}
				break;
			}
			State = 872;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				{
				State = 869; schema_name();
				State = 870; Match(DOT);
				}
				break;
			}
			State = 874; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public ITerminalNode BIND_PARAMETER() { return GetToken(SQLiteParser.BIND_PARAMETER, 0); }
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode[] DOT() { return GetTokens(SQLiteParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(SQLiteParser.DOT, i);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public ITerminalNode STAR() { return GetToken(SQLiteParser.STAR, 0); }
		public Filter_clauseContext filter_clause() {
			return GetRuleContext<Filter_clauseContext>(0);
		}
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode DISTINCT_() { return GetToken(SQLiteParser.DISTINCT_, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public ITerminalNode CAST_() { return GetToken(SQLiteParser.CAST_, 0); }
		public ITerminalNode AS_() { return GetToken(SQLiteParser.AS_, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public ITerminalNode EXISTS_() { return GetToken(SQLiteParser.EXISTS_, 0); }
		public ITerminalNode NOT_() { return GetToken(SQLiteParser.NOT_, 0); }
		public ITerminalNode CASE_() { return GetToken(SQLiteParser.CASE_, 0); }
		public ITerminalNode END_() { return GetToken(SQLiteParser.END_, 0); }
		public ITerminalNode[] WHEN_() { return GetTokens(SQLiteParser.WHEN_); }
		public ITerminalNode WHEN_(int i) {
			return GetToken(SQLiteParser.WHEN_, i);
		}
		public ITerminalNode[] THEN_() { return GetTokens(SQLiteParser.THEN_); }
		public ITerminalNode THEN_(int i) {
			return GetToken(SQLiteParser.THEN_, i);
		}
		public ITerminalNode ELSE_() { return GetToken(SQLiteParser.ELSE_, 0); }
		public Raise_functionContext raise_function() {
			return GetRuleContext<Raise_functionContext>(0);
		}
		public ITerminalNode PIPE2() { return GetToken(SQLiteParser.PIPE2, 0); }
		public ITerminalNode DIV() { return GetToken(SQLiteParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(SQLiteParser.MOD, 0); }
		public ITerminalNode PLUS() { return GetToken(SQLiteParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(SQLiteParser.MINUS, 0); }
		public ITerminalNode LT2() { return GetToken(SQLiteParser.LT2, 0); }
		public ITerminalNode GT2() { return GetToken(SQLiteParser.GT2, 0); }
		public ITerminalNode AMP() { return GetToken(SQLiteParser.AMP, 0); }
		public ITerminalNode PIPE() { return GetToken(SQLiteParser.PIPE, 0); }
		public ITerminalNode LT() { return GetToken(SQLiteParser.LT, 0); }
		public ITerminalNode LT_EQ() { return GetToken(SQLiteParser.LT_EQ, 0); }
		public ITerminalNode GT() { return GetToken(SQLiteParser.GT, 0); }
		public ITerminalNode GT_EQ() { return GetToken(SQLiteParser.GT_EQ, 0); }
		public ITerminalNode ASSIGN() { return GetToken(SQLiteParser.ASSIGN, 0); }
		public ITerminalNode EQ() { return GetToken(SQLiteParser.EQ, 0); }
		public ITerminalNode NOT_EQ1() { return GetToken(SQLiteParser.NOT_EQ1, 0); }
		public ITerminalNode NOT_EQ2() { return GetToken(SQLiteParser.NOT_EQ2, 0); }
		public ITerminalNode IS_() { return GetToken(SQLiteParser.IS_, 0); }
		public ITerminalNode FROM_() { return GetToken(SQLiteParser.FROM_, 0); }
		public ITerminalNode IN_() { return GetToken(SQLiteParser.IN_, 0); }
		public ITerminalNode LIKE_() { return GetToken(SQLiteParser.LIKE_, 0); }
		public ITerminalNode GLOB_() { return GetToken(SQLiteParser.GLOB_, 0); }
		public ITerminalNode MATCH_() { return GetToken(SQLiteParser.MATCH_, 0); }
		public ITerminalNode REGEXP_() { return GetToken(SQLiteParser.REGEXP_, 0); }
		public ITerminalNode AND_() { return GetToken(SQLiteParser.AND_, 0); }
		public ITerminalNode OR_() { return GetToken(SQLiteParser.OR_, 0); }
		public ITerminalNode BETWEEN_() { return GetToken(SQLiteParser.BETWEEN_, 0); }
		public ITerminalNode COLLATE_() { return GetToken(SQLiteParser.COLLATE_, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public ITerminalNode ESCAPE_() { return GetToken(SQLiteParser.ESCAPE_, 0); }
		public ITerminalNode ISNULL_() { return GetToken(SQLiteParser.ISNULL_, 0); }
		public ITerminalNode NOTNULL_() { return GetToken(SQLiteParser.NOTNULL_, 0); }
		public ITerminalNode NULL_() { return GetToken(SQLiteParser.NULL_, 0); }
		public Table_function_nameContext table_function_name() {
			return GetRuleContext<Table_function_nameContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 964;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				{
				State = 877; literal_value();
				}
				break;
			case 2:
				{
				State = 878; Match(BIND_PARAMETER);
				}
				break;
			case 3:
				{
				State = 887;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
				case 1:
					{
					State = 882;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
					case 1:
						{
						State = 879; schema_name();
						State = 880; Match(DOT);
						}
						break;
					}
					State = 884; table_name();
					State = 885; Match(DOT);
					}
					break;
				}
				State = 889; column_name();
				}
				break;
			case 4:
				{
				State = 890; unary_operator();
				State = 891; expr(21);
				}
				break;
			case 5:
				{
				State = 893; function_name();
				State = 894; Match(OPEN_PAR);
				State = 907;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAR:
				case PLUS:
				case MINUS:
				case TILDE:
				case ABORT_:
				case ACTION_:
				case ADD_:
				case AFTER_:
				case ALL_:
				case ALTER_:
				case ANALYZE_:
				case AND_:
				case AS_:
				case ASC_:
				case ATTACH_:
				case AUTOINCREMENT_:
				case BEFORE_:
				case BEGIN_:
				case BETWEEN_:
				case BY_:
				case CASCADE_:
				case CASE_:
				case CAST_:
				case CHECK_:
				case COLLATE_:
				case COLUMN_:
				case COMMIT_:
				case CONFLICT_:
				case CONSTRAINT_:
				case CREATE_:
				case CROSS_:
				case CURRENT_DATE_:
				case CURRENT_TIME_:
				case CURRENT_TIMESTAMP_:
				case DATABASE_:
				case DEFAULT_:
				case DEFERRABLE_:
				case DEFERRED_:
				case DELETE_:
				case DESC_:
				case DETACH_:
				case DISTINCT_:
				case DROP_:
				case EACH_:
				case ELSE_:
				case END_:
				case ESCAPE_:
				case EXCEPT_:
				case EXCLUSIVE_:
				case EXISTS_:
				case EXPLAIN_:
				case FAIL_:
				case FOR_:
				case FOREIGN_:
				case FROM_:
				case FULL_:
				case GLOB_:
				case GROUP_:
				case HAVING_:
				case IF_:
				case IGNORE_:
				case IMMEDIATE_:
				case IN_:
				case INDEX_:
				case INDEXED_:
				case INITIALLY_:
				case INNER_:
				case INSERT_:
				case INSTEAD_:
				case INTERSECT_:
				case INTO_:
				case IS_:
				case ISNULL_:
				case JOIN_:
				case KEY_:
				case LEFT_:
				case LIKE_:
				case LIMIT_:
				case MATCH_:
				case NATURAL_:
				case NO_:
				case NOT_:
				case NOTNULL_:
				case NULL_:
				case OF_:
				case OFFSET_:
				case ON_:
				case OR_:
				case ORDER_:
				case OUTER_:
				case PLAN_:
				case PRAGMA_:
				case PRIMARY_:
				case QUERY_:
				case RAISE_:
				case RECURSIVE_:
				case REFERENCES_:
				case REGEXP_:
				case REINDEX_:
				case RELEASE_:
				case RENAME_:
				case REPLACE_:
				case RESTRICT_:
				case RIGHT_:
				case ROLLBACK_:
				case ROW_:
				case ROWS_:
				case SAVEPOINT_:
				case SELECT_:
				case SET_:
				case TABLE_:
				case TEMP_:
				case TEMPORARY_:
				case THEN_:
				case TO_:
				case TRANSACTION_:
				case TRIGGER_:
				case UNION_:
				case UNIQUE_:
				case UPDATE_:
				case USING_:
				case VACUUM_:
				case VALUES_:
				case VIEW_:
				case VIRTUAL_:
				case WHEN_:
				case WHERE_:
				case WITH_:
				case WITHOUT_:
				case FIRST_VALUE_:
				case OVER_:
				case PARTITION_:
				case RANGE_:
				case PRECEDING_:
				case UNBOUNDED_:
				case CURRENT_:
				case FOLLOWING_:
				case CUME_DIST_:
				case DENSE_RANK_:
				case LAG_:
				case LAST_VALUE_:
				case LEAD_:
				case NTH_VALUE_:
				case NTILE_:
				case PERCENT_RANK_:
				case RANK_:
				case ROW_NUMBER_:
				case GENERATED_:
				case ALWAYS_:
				case STORED_:
				case TRUE_:
				case FALSE_:
				case WINDOW_:
				case NULLS_:
				case FIRST_:
				case LAST_:
				case FILTER_:
				case GROUPS_:
				case EXCLUDE_:
				case IDENTIFIER:
				case NUMERIC_LITERAL:
				case BIND_PARAMETER:
				case STRING_LITERAL:
				case BLOB_LITERAL:
					{
					{
					State = 896;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
					case 1:
						{
						State = 895; Match(DISTINCT_);
						}
						break;
					}
					State = 898; expr(0);
					State = 903;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 899; Match(COMMA);
						State = 900; expr(0);
						}
						}
						State = 905;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
					break;
				case STAR:
					{
					State = 906; Match(STAR);
					}
					break;
				case CLOSE_PAR:
					break;
				default:
					break;
				}
				State = 909; Match(CLOSE_PAR);
				State = 911;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
				case 1:
					{
					State = 910; filter_clause();
					}
					break;
				}
				State = 914;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
				case 1:
					{
					State = 913; over_clause();
					}
					break;
				}
				}
				break;
			case 6:
				{
				State = 916; Match(OPEN_PAR);
				State = 917; expr(0);
				State = 922;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 918; Match(COMMA);
					State = 919; expr(0);
					}
					}
					State = 924;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 925; Match(CLOSE_PAR);
				}
				break;
			case 7:
				{
				State = 927; Match(CAST_);
				State = 928; Match(OPEN_PAR);
				State = 929; expr(0);
				State = 930; Match(AS_);
				State = 931; type_name();
				State = 932; Match(CLOSE_PAR);
				}
				break;
			case 8:
				{
				State = 938;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXISTS_ || _la==NOT_) {
					{
					State = 935;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NOT_) {
						{
						State = 934; Match(NOT_);
						}
					}

					State = 937; Match(EXISTS_);
					}
				}

				State = 940; Match(OPEN_PAR);
				State = 941; select_stmt();
				State = 942; Match(CLOSE_PAR);
				}
				break;
			case 9:
				{
				State = 944; Match(CASE_);
				State = 946;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
				case 1:
					{
					State = 945; expr(0);
					}
					break;
				}
				State = 953;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 948; Match(WHEN_);
					State = 949; expr(0);
					State = 950; Match(THEN_);
					State = 951; expr(0);
					}
					}
					State = 955;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN_ );
				State = 959;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE_) {
					{
					State = 957; Match(ELSE_);
					State = 958; expr(0);
					}
				}

				State = 961; Match(END_);
				}
				break;
			case 10:
				{
				State = 963; raise_function();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1091;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1089;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 966;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 967; Match(PIPE2);
						State = 968; expr(21);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 969;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 970;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << DIV) | (1L << MOD))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 971; expr(20);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 972;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 973;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 974; expr(19);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 975;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 976;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT2) | (1L << GT2) | (1L << AMP) | (1L << PIPE))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 977; expr(18);
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 978;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 979;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << LT_EQ) | (1L << GT) | (1L << GT_EQ))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 980; expr(17);
						}
						break;
					case 6:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 981;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1000;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
						case 1:
							{
							State = 982; Match(ASSIGN);
							}
							break;
						case 2:
							{
							State = 983; Match(EQ);
							}
							break;
						case 3:
							{
							State = 984; Match(NOT_EQ1);
							}
							break;
						case 4:
							{
							State = 985; Match(NOT_EQ2);
							}
							break;
						case 5:
							{
							State = 986; Match(IS_);
							}
							break;
						case 6:
							{
							State = 987; Match(IS_);
							State = 988; Match(NOT_);
							}
							break;
						case 7:
							{
							State = 989; Match(IS_);
							State = 991;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==NOT_) {
								{
								State = 990; Match(NOT_);
								}
							}

							State = 993; Match(DISTINCT_);
							State = 994; Match(FROM_);
							}
							break;
						case 8:
							{
							State = 995; Match(IN_);
							}
							break;
						case 9:
							{
							State = 996; Match(LIKE_);
							}
							break;
						case 10:
							{
							State = 997; Match(GLOB_);
							}
							break;
						case 11:
							{
							State = 998; Match(MATCH_);
							}
							break;
						case 12:
							{
							State = 999; Match(REGEXP_);
							}
							break;
						}
						State = 1002; expr(16);
						}
						break;
					case 7:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1003;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1004; Match(AND_);
						State = 1005; expr(15);
						}
						break;
					case 8:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1006;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1007; Match(OR_);
						State = 1008; expr(14);
						}
						break;
					case 9:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1009;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1010; Match(IS_);
						State = 1012;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
						case 1:
							{
							State = 1011; Match(NOT_);
							}
							break;
						}
						State = 1014; expr(7);
						}
						break;
					case 10:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1015;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1017;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT_) {
							{
							State = 1016; Match(NOT_);
							}
						}

						State = 1019; Match(BETWEEN_);
						State = 1020; expr(0);
						State = 1021; Match(AND_);
						State = 1022; expr(6);
						}
						break;
					case 11:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1024;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1025; Match(COLLATE_);
						State = 1026; collation_name();
						}
						break;
					case 12:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1027;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 1029;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT_) {
							{
							State = 1028; Match(NOT_);
							}
						}

						State = 1031;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (GLOB_ - 77)) | (1L << (LIKE_ - 77)) | (1L << (MATCH_ - 77)) | (1L << (REGEXP_ - 77)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1032; expr(0);
						State = 1035;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
						case 1:
							{
							State = 1033; Match(ESCAPE_);
							State = 1034; expr(0);
							}
							break;
						}
						}
						break;
					case 13:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1037;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1042;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case ISNULL_:
							{
							State = 1038; Match(ISNULL_);
							}
							break;
						case NOTNULL_:
							{
							State = 1039; Match(NOTNULL_);
							}
							break;
						case NOT_:
							{
							State = 1040; Match(NOT_);
							State = 1041; Match(NULL_);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 14:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1044;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1046;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT_) {
							{
							State = 1045; Match(NOT_);
							}
						}

						State = 1048; Match(IN_);
						State = 1087;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
						case 1:
							{
							State = 1049; Match(OPEN_PAR);
							State = 1059;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
							case 1:
								{
								State = 1050; select_stmt();
								}
								break;
							case 2:
								{
								State = 1051; expr(0);
								State = 1056;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								while (_la==COMMA) {
									{
									{
									State = 1052; Match(COMMA);
									State = 1053; expr(0);
									}
									}
									State = 1058;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
								}
								}
								break;
							}
							State = 1061; Match(CLOSE_PAR);
							}
							break;
						case 2:
							{
							State = 1065;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
							case 1:
								{
								State = 1062; schema_name();
								State = 1063; Match(DOT);
								}
								break;
							}
							State = 1067; table_name();
							}
							break;
						case 3:
							{
							State = 1071;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
							case 1:
								{
								State = 1068; schema_name();
								State = 1069; Match(DOT);
								}
								break;
							}
							State = 1073; table_function_name();
							State = 1074; Match(OPEN_PAR);
							State = 1083;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPEN_PAR) | (1L << PLUS) | (1L << MINUS) | (1L << TILDE) | (1L << ABORT_) | (1L << ACTION_) | (1L << ADD_) | (1L << AFTER_) | (1L << ALL_) | (1L << ALTER_) | (1L << ANALYZE_) | (1L << AND_) | (1L << AS_) | (1L << ASC_) | (1L << ATTACH_) | (1L << AUTOINCREMENT_) | (1L << BEFORE_) | (1L << BEGIN_) | (1L << BETWEEN_) | (1L << BY_) | (1L << CASCADE_) | (1L << CASE_) | (1L << CAST_) | (1L << CHECK_) | (1L << COLLATE_) | (1L << COLUMN_) | (1L << COMMIT_) | (1L << CONFLICT_) | (1L << CONSTRAINT_) | (1L << CREATE_) | (1L << CROSS_) | (1L << CURRENT_DATE_) | (1L << CURRENT_TIME_) | (1L << CURRENT_TIMESTAMP_) | (1L << DATABASE_) | (1L << DEFAULT_) | (1L << DEFERRABLE_) | (1L << DEFERRED_) | (1L << DELETE_) | (1L << DESC_) | (1L << DETACH_) | (1L << DISTINCT_) | (1L << DROP_))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EACH_ - 64)) | (1L << (ELSE_ - 64)) | (1L << (END_ - 64)) | (1L << (ESCAPE_ - 64)) | (1L << (EXCEPT_ - 64)) | (1L << (EXCLUSIVE_ - 64)) | (1L << (EXISTS_ - 64)) | (1L << (EXPLAIN_ - 64)) | (1L << (FAIL_ - 64)) | (1L << (FOR_ - 64)) | (1L << (FOREIGN_ - 64)) | (1L << (FROM_ - 64)) | (1L << (FULL_ - 64)) | (1L << (GLOB_ - 64)) | (1L << (GROUP_ - 64)) | (1L << (HAVING_ - 64)) | (1L << (IF_ - 64)) | (1L << (IGNORE_ - 64)) | (1L << (IMMEDIATE_ - 64)) | (1L << (IN_ - 64)) | (1L << (INDEX_ - 64)) | (1L << (INDEXED_ - 64)) | (1L << (INITIALLY_ - 64)) | (1L << (INNER_ - 64)) | (1L << (INSERT_ - 64)) | (1L << (INSTEAD_ - 64)) | (1L << (INTERSECT_ - 64)) | (1L << (INTO_ - 64)) | (1L << (IS_ - 64)) | (1L << (ISNULL_ - 64)) | (1L << (JOIN_ - 64)) | (1L << (KEY_ - 64)) | (1L << (LEFT_ - 64)) | (1L << (LIKE_ - 64)) | (1L << (LIMIT_ - 64)) | (1L << (MATCH_ - 64)) | (1L << (NATURAL_ - 64)) | (1L << (NO_ - 64)) | (1L << (NOT_ - 64)) | (1L << (NOTNULL_ - 64)) | (1L << (NULL_ - 64)) | (1L << (OF_ - 64)) | (1L << (OFFSET_ - 64)) | (1L << (ON_ - 64)) | (1L << (OR_ - 64)) | (1L << (ORDER_ - 64)) | (1L << (OUTER_ - 64)) | (1L << (PLAN_ - 64)) | (1L << (PRAGMA_ - 64)) | (1L << (PRIMARY_ - 64)) | (1L << (QUERY_ - 64)) | (1L << (RAISE_ - 64)) | (1L << (RECURSIVE_ - 64)) | (1L << (REFERENCES_ - 64)) | (1L << (REGEXP_ - 64)) | (1L << (REINDEX_ - 64)) | (1L << (RELEASE_ - 64)) | (1L << (RENAME_ - 64)) | (1L << (REPLACE_ - 64)) | (1L << (RESTRICT_ - 64)) | (1L << (RIGHT_ - 64)) | (1L << (ROLLBACK_ - 64)) | (1L << (ROW_ - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ROWS_ - 128)) | (1L << (SAVEPOINT_ - 128)) | (1L << (SELECT_ - 128)) | (1L << (SET_ - 128)) | (1L << (TABLE_ - 128)) | (1L << (TEMP_ - 128)) | (1L << (TEMPORARY_ - 128)) | (1L << (THEN_ - 128)) | (1L << (TO_ - 128)) | (1L << (TRANSACTION_ - 128)) | (1L << (TRIGGER_ - 128)) | (1L << (UNION_ - 128)) | (1L << (UNIQUE_ - 128)) | (1L << (UPDATE_ - 128)) | (1L << (USING_ - 128)) | (1L << (VACUUM_ - 128)) | (1L << (VALUES_ - 128)) | (1L << (VIEW_ - 128)) | (1L << (VIRTUAL_ - 128)) | (1L << (WHEN_ - 128)) | (1L << (WHERE_ - 128)) | (1L << (WITH_ - 128)) | (1L << (WITHOUT_ - 128)) | (1L << (FIRST_VALUE_ - 128)) | (1L << (OVER_ - 128)) | (1L << (PARTITION_ - 128)) | (1L << (RANGE_ - 128)) | (1L << (PRECEDING_ - 128)) | (1L << (UNBOUNDED_ - 128)) | (1L << (CURRENT_ - 128)) | (1L << (FOLLOWING_ - 128)) | (1L << (CUME_DIST_ - 128)) | (1L << (DENSE_RANK_ - 128)) | (1L << (LAG_ - 128)) | (1L << (LAST_VALUE_ - 128)) | (1L << (LEAD_ - 128)) | (1L << (NTH_VALUE_ - 128)) | (1L << (NTILE_ - 128)) | (1L << (PERCENT_RANK_ - 128)) | (1L << (RANK_ - 128)) | (1L << (ROW_NUMBER_ - 128)) | (1L << (GENERATED_ - 128)) | (1L << (ALWAYS_ - 128)) | (1L << (STORED_ - 128)) | (1L << (TRUE_ - 128)) | (1L << (FALSE_ - 128)) | (1L << (WINDOW_ - 128)) | (1L << (NULLS_ - 128)) | (1L << (FIRST_ - 128)) | (1L << (LAST_ - 128)) | (1L << (FILTER_ - 128)) | (1L << (GROUPS_ - 128)) | (1L << (EXCLUDE_ - 128)) | (1L << (IDENTIFIER - 128)) | (1L << (NUMERIC_LITERAL - 128)) | (1L << (BIND_PARAMETER - 128)) | (1L << (STRING_LITERAL - 128)) | (1L << (BLOB_LITERAL - 128)))) != 0)) {
								{
								State = 1075; expr(0);
								State = 1080;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								while (_la==COMMA) {
									{
									{
									State = 1076; Match(COMMA);
									State = 1077; expr(0);
									}
									}
									State = 1082;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
								}
								}
							}

							State = 1085; Match(CLOSE_PAR);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 1093;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Raise_functionContext : ParserRuleContext {
		public ITerminalNode RAISE_() { return GetToken(SQLiteParser.RAISE_, 0); }
		public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public ITerminalNode IGNORE_() { return GetToken(SQLiteParser.IGNORE_, 0); }
		public ITerminalNode COMMA() { return GetToken(SQLiteParser.COMMA, 0); }
		public Error_messageContext error_message() {
			return GetRuleContext<Error_messageContext>(0);
		}
		public ITerminalNode ROLLBACK_() { return GetToken(SQLiteParser.ROLLBACK_, 0); }
		public ITerminalNode ABORT_() { return GetToken(SQLiteParser.ABORT_, 0); }
		public ITerminalNode FAIL_() { return GetToken(SQLiteParser.FAIL_, 0); }
		public Raise_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raise_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterRaise_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitRaise_function(this);
		}
	}

	[RuleVersion(0)]
	public Raise_functionContext raise_function() {
		Raise_functionContext _localctx = new Raise_functionContext(Context, State);
		EnterRule(_localctx, 66, RULE_raise_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1094; Match(RAISE_);
			State = 1095; Match(OPEN_PAR);
			State = 1100;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IGNORE_:
				{
				State = 1096; Match(IGNORE_);
				}
				break;
			case ABORT_:
			case FAIL_:
			case ROLLBACK_:
				{
				State = 1097;
				_la = TokenStream.LA(1);
				if ( !(_la==ABORT_ || _la==FAIL_ || _la==ROLLBACK_) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1098; Match(COMMA);
				State = 1099; error_message();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1102; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_valueContext : ParserRuleContext {
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(SQLiteParser.NUMERIC_LITERAL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		public ITerminalNode BLOB_LITERAL() { return GetToken(SQLiteParser.BLOB_LITERAL, 0); }
		public ITerminalNode NULL_() { return GetToken(SQLiteParser.NULL_, 0); }
		public ITerminalNode TRUE_() { return GetToken(SQLiteParser.TRUE_, 0); }
		public ITerminalNode FALSE_() { return GetToken(SQLiteParser.FALSE_, 0); }
		public ITerminalNode CURRENT_TIME_() { return GetToken(SQLiteParser.CURRENT_TIME_, 0); }
		public ITerminalNode CURRENT_DATE_() { return GetToken(SQLiteParser.CURRENT_DATE_, 0); }
		public ITerminalNode CURRENT_TIMESTAMP_() { return GetToken(SQLiteParser.CURRENT_TIMESTAMP_, 0); }
		public Literal_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterLiteral_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitLiteral_value(this);
		}
	}

	[RuleVersion(0)]
	public Literal_valueContext literal_value() {
		Literal_valueContext _localctx = new Literal_valueContext(Context, State);
		EnterRule(_localctx, 68, RULE_literal_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1104;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & ((1L << (CURRENT_DATE_ - 52)) | (1L << (CURRENT_TIME_ - 52)) | (1L << (CURRENT_TIMESTAMP_ - 52)) | (1L << (NULL_ - 52)))) != 0) || ((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & ((1L << (TRUE_ - 172)) | (1L << (FALSE_ - 172)) | (1L << (NUMERIC_LITERAL - 172)) | (1L << (STRING_LITERAL - 172)) | (1L << (BLOB_LITERAL - 172)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_rowContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Value_rowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_row; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterValue_row(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitValue_row(this);
		}
	}

	[RuleVersion(0)]
	public Value_rowContext value_row() {
		Value_rowContext _localctx = new Value_rowContext(Context, State);
		EnterRule(_localctx, 70, RULE_value_row);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1106; Match(OPEN_PAR);
			State = 1107; expr(0);
			State = 1112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1108; Match(COMMA);
				State = 1109; expr(0);
				}
				}
				State = 1114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1115; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Values_clauseContext : ParserRuleContext {
		public ITerminalNode VALUES_() { return GetToken(SQLiteParser.VALUES_, 0); }
		public Value_rowContext[] value_row() {
			return GetRuleContexts<Value_rowContext>();
		}
		public Value_rowContext value_row(int i) {
			return GetRuleContext<Value_rowContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterValues_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitValues_clause(this);
		}
	}

	[RuleVersion(0)]
	public Values_clauseContext values_clause() {
		Values_clauseContext _localctx = new Values_clauseContext(Context, State);
		EnterRule(_localctx, 72, RULE_values_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1117; Match(VALUES_);
			State = 1118; value_row();
			State = 1123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1119; Match(COMMA);
				State = 1120; value_row();
				}
				}
				State = 1125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_stmtContext : ParserRuleContext {
		public ITerminalNode INTO_() { return GetToken(SQLiteParser.INTO_, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode INSERT_() { return GetToken(SQLiteParser.INSERT_, 0); }
		public ITerminalNode REPLACE_() { return GetToken(SQLiteParser.REPLACE_, 0); }
		public ITerminalNode OR_() { return GetToken(SQLiteParser.OR_, 0); }
		public ITerminalNode DEFAULT_() { return GetToken(SQLiteParser.DEFAULT_, 0); }
		public ITerminalNode VALUES_() { return GetToken(SQLiteParser.VALUES_, 0); }
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public ITerminalNode ROLLBACK_() { return GetToken(SQLiteParser.ROLLBACK_, 0); }
		public ITerminalNode ABORT_() { return GetToken(SQLiteParser.ABORT_, 0); }
		public ITerminalNode FAIL_() { return GetToken(SQLiteParser.FAIL_, 0); }
		public ITerminalNode IGNORE_() { return GetToken(SQLiteParser.IGNORE_, 0); }
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		public ITerminalNode AS_() { return GetToken(SQLiteParser.AS_, 0); }
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public Returning_clauseContext returning_clause() {
			return GetRuleContext<Returning_clauseContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Values_clauseContext values_clause() {
			return GetRuleContext<Values_clauseContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Upsert_clauseContext upsert_clause() {
			return GetRuleContext<Upsert_clauseContext>(0);
		}
		public Insert_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterInsert_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitInsert_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Insert_stmtContext insert_stmt() {
		Insert_stmtContext _localctx = new Insert_stmtContext(Context, State);
		EnterRule(_localctx, 74, RULE_insert_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_) {
				{
				State = 1126; with_clause();
				}
			}

			State = 1134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				{
				State = 1129; Match(INSERT_);
				}
				break;
			case 2:
				{
				State = 1130; Match(REPLACE_);
				}
				break;
			case 3:
				{
				State = 1131; Match(INSERT_);
				State = 1132; Match(OR_);
				State = 1133;
				_la = TokenStream.LA(1);
				if ( !(_la==ABORT_ || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (FAIL_ - 72)) | (1L << (IGNORE_ - 72)) | (1L << (REPLACE_ - 72)) | (1L << (ROLLBACK_ - 72)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1136; Match(INTO_);
			State = 1140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
			case 1:
				{
				State = 1137; schema_name();
				State = 1138; Match(DOT);
				}
				break;
			}
			State = 1142; table_name();
			State = 1145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS_) {
				{
				State = 1143; Match(AS_);
				State = 1144; table_alias();
				}
			}

			State = 1158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 1147; Match(OPEN_PAR);
				State = 1148; column_name();
				State = 1153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1149; Match(COMMA);
					State = 1150; column_name();
					}
					}
					State = 1155;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1156; Match(CLOSE_PAR);
				}
			}

			State = 1169;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT_:
			case VALUES_:
			case WITH_:
				{
				{
				State = 1162;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
				case 1:
					{
					State = 1160; values_clause();
					}
					break;
				case 2:
					{
					State = 1161; select_stmt();
					}
					break;
				}
				State = 1165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_) {
					{
					State = 1164; upsert_clause();
					}
				}

				}
				}
				break;
			case DEFAULT_:
				{
				State = 1167; Match(DEFAULT_);
				State = 1168; Match(VALUES_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING_) {
				{
				State = 1171; returning_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Returning_clauseContext : ParserRuleContext {
		public ITerminalNode RETURNING_() { return GetToken(SQLiteParser.RETURNING_, 0); }
		public Result_columnContext[] result_column() {
			return GetRuleContexts<Result_columnContext>();
		}
		public Result_columnContext result_column(int i) {
			return GetRuleContext<Result_columnContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Returning_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returning_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterReturning_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitReturning_clause(this);
		}
	}

	[RuleVersion(0)]
	public Returning_clauseContext returning_clause() {
		Returning_clauseContext _localctx = new Returning_clauseContext(Context, State);
		EnterRule(_localctx, 76, RULE_returning_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1174; Match(RETURNING_);
			State = 1175; result_column();
			State = 1180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1176; Match(COMMA);
				State = 1177; result_column();
				}
				}
				State = 1182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Upsert_clauseContext : ParserRuleContext {
		public ITerminalNode ON_() { return GetToken(SQLiteParser.ON_, 0); }
		public ITerminalNode CONFLICT_() { return GetToken(SQLiteParser.CONFLICT_, 0); }
		public ITerminalNode DO_() { return GetToken(SQLiteParser.DO_, 0); }
		public ITerminalNode NOTHING_() { return GetToken(SQLiteParser.NOTHING_, 0); }
		public ITerminalNode UPDATE_() { return GetToken(SQLiteParser.UPDATE_, 0); }
		public ITerminalNode SET_() { return GetToken(SQLiteParser.SET_, 0); }
		public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		public Indexed_columnContext[] indexed_column() {
			return GetRuleContexts<Indexed_columnContext>();
		}
		public Indexed_columnContext indexed_column(int i) {
			return GetRuleContext<Indexed_columnContext>(i);
		}
		public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public ITerminalNode[] ASSIGN() { return GetTokens(SQLiteParser.ASSIGN); }
		public ITerminalNode ASSIGN(int i) {
			return GetToken(SQLiteParser.ASSIGN, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public ITerminalNode[] WHERE_() { return GetTokens(SQLiteParser.WHERE_); }
		public ITerminalNode WHERE_(int i) {
			return GetToken(SQLiteParser.WHERE_, i);
		}
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Column_name_listContext[] column_name_list() {
			return GetRuleContexts<Column_name_listContext>();
		}
		public Column_name_listContext column_name_list(int i) {
			return GetRuleContext<Column_name_listContext>(i);
		}
		public Upsert_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upsert_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterUpsert_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitUpsert_clause(this);
		}
	}

	[RuleVersion(0)]
	public Upsert_clauseContext upsert_clause() {
		Upsert_clauseContext _localctx = new Upsert_clauseContext(Context, State);
		EnterRule(_localctx, 78, RULE_upsert_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1183; Match(ON_);
			State = 1184; Match(CONFLICT_);
			State = 1199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 1185; Match(OPEN_PAR);
				State = 1186; indexed_column();
				State = 1191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1187; Match(COMMA);
					State = 1188; indexed_column();
					}
					}
					State = 1193;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1194; Match(CLOSE_PAR);
				State = 1197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE_) {
					{
					State = 1195; Match(WHERE_);
					State = 1196; expr(0);
					}
				}

				}
			}

			State = 1201; Match(DO_);
			State = 1228;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOTHING_:
				{
				State = 1202; Match(NOTHING_);
				}
				break;
			case UPDATE_:
				{
				State = 1203; Match(UPDATE_);
				State = 1204; Match(SET_);
				{
				State = 1207;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
				case 1:
					{
					State = 1205; column_name();
					}
					break;
				case 2:
					{
					State = 1206; column_name_list();
					}
					break;
				}
				State = 1209; Match(ASSIGN);
				State = 1210; expr(0);
				State = 1221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1211; Match(COMMA);
					State = 1214;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
					case 1:
						{
						State = 1212; column_name();
						}
						break;
					case 2:
						{
						State = 1213; column_name_list();
						}
						break;
					}
					State = 1216; Match(ASSIGN);
					State = 1217; expr(0);
					}
					}
					State = 1223;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE_) {
					{
					State = 1224; Match(WHERE_);
					State = 1225; expr(0);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_stmtContext : ParserRuleContext {
		public ITerminalNode PRAGMA_() { return GetToken(SQLiteParser.PRAGMA_, 0); }
		public Pragma_nameContext pragma_name() {
			return GetRuleContext<Pragma_nameContext>(0);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		public ITerminalNode ASSIGN() { return GetToken(SQLiteParser.ASSIGN, 0); }
		public Pragma_valueContext pragma_value() {
			return GetRuleContext<Pragma_valueContext>(0);
		}
		public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public Pragma_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterPragma_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitPragma_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_stmtContext pragma_stmt() {
		Pragma_stmtContext _localctx = new Pragma_stmtContext(Context, State);
		EnterRule(_localctx, 80, RULE_pragma_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1230; Match(PRAGMA_);
			State = 1234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				{
				State = 1231; schema_name();
				State = 1232; Match(DOT);
				}
				break;
			}
			State = 1236; pragma_name();
			State = 1243;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
				{
				State = 1237; Match(ASSIGN);
				State = 1238; pragma_value();
				}
				break;
			case OPEN_PAR:
				{
				State = 1239; Match(OPEN_PAR);
				State = 1240; pragma_value();
				State = 1241; Match(CLOSE_PAR);
				}
				break;
			case Eof:
			case SCOL:
			case ALTER_:
			case ANALYZE_:
			case ATTACH_:
			case BEGIN_:
			case COMMIT_:
			case CREATE_:
			case DELETE_:
			case DETACH_:
			case DROP_:
			case END_:
			case EXPLAIN_:
			case INSERT_:
			case PRAGMA_:
			case REINDEX_:
			case RELEASE_:
			case REPLACE_:
			case ROLLBACK_:
			case SAVEPOINT_:
			case SELECT_:
			case UPDATE_:
			case VACUUM_:
			case VALUES_:
			case WITH_:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_valueContext : ParserRuleContext {
		public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		public Pragma_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterPragma_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitPragma_value(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_valueContext pragma_value() {
		Pragma_valueContext _localctx = new Pragma_valueContext(Context, State);
		EnterRule(_localctx, 82, RULE_pragma_value);
		try {
			State = 1248;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1245; signed_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1246; name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1247; Match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reindex_stmtContext : ParserRuleContext {
		public ITerminalNode REINDEX_() { return GetToken(SQLiteParser.REINDEX_, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		public Reindex_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reindex_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterReindex_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitReindex_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Reindex_stmtContext reindex_stmt() {
		Reindex_stmtContext _localctx = new Reindex_stmtContext(Context, State);
		EnterRule(_localctx, 84, RULE_reindex_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1250; Match(REINDEX_);
			State = 1261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
			case 1:
				{
				State = 1251; collation_name();
				}
				break;
			case 2:
				{
				State = 1255;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,164,Context) ) {
				case 1:
					{
					State = 1252; schema_name();
					State = 1253; Match(DOT);
					}
					break;
				}
				State = 1259;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
				case 1:
					{
					State = 1257; table_name();
					}
					break;
				case 2:
					{
					State = 1258; index_name();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_stmtContext : ParserRuleContext {
		public Select_coreContext[] select_core() {
			return GetRuleContexts<Select_coreContext>();
		}
		public Select_coreContext select_core(int i) {
			return GetRuleContext<Select_coreContext>(i);
		}
		public Common_table_stmtContext common_table_stmt() {
			return GetRuleContext<Common_table_stmtContext>(0);
		}
		public Compound_operatorContext[] compound_operator() {
			return GetRuleContexts<Compound_operatorContext>();
		}
		public Compound_operatorContext compound_operator(int i) {
			return GetRuleContext<Compound_operatorContext>(i);
		}
		public Order_by_stmtContext order_by_stmt() {
			return GetRuleContext<Order_by_stmtContext>(0);
		}
		public Limit_stmtContext limit_stmt() {
			return GetRuleContext<Limit_stmtContext>(0);
		}
		public Select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterSelect_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitSelect_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Select_stmtContext select_stmt() {
		Select_stmtContext _localctx = new Select_stmtContext(Context, State);
		EnterRule(_localctx, 86, RULE_select_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_) {
				{
				State = 1263; common_table_stmt();
				}
			}

			State = 1266; select_core();
			State = 1272;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,168,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1267; compound_operator();
					State = 1268; select_core();
					}
					} 
				}
				State = 1274;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,168,Context);
			}
			State = 1276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER_) {
				{
				State = 1275; order_by_stmt();
				}
			}

			State = 1279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT_) {
				{
				State = 1278; limit_stmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_clauseContext : ParserRuleContext {
		public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public Join_operatorContext[] join_operator() {
			return GetRuleContexts<Join_operatorContext>();
		}
		public Join_operatorContext join_operator(int i) {
			return GetRuleContext<Join_operatorContext>(i);
		}
		public Join_constraintContext[] join_constraint() {
			return GetRuleContexts<Join_constraintContext>();
		}
		public Join_constraintContext join_constraint(int i) {
			return GetRuleContext<Join_constraintContext>(i);
		}
		public Join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterJoin_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitJoin_clause(this);
		}
	}

	[RuleVersion(0)]
	public Join_clauseContext join_clause() {
		Join_clauseContext _localctx = new Join_clauseContext(Context, State);
		EnterRule(_localctx, 88, RULE_join_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1281; table_or_subquery();
			State = 1289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA || _la==CROSS_ || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FULL_ - 76)) | (1L << (INNER_ - 76)) | (1L << (JOIN_ - 76)) | (1L << (LEFT_ - 76)) | (1L << (NATURAL_ - 76)) | (1L << (RIGHT_ - 76)))) != 0)) {
				{
				{
				State = 1282; join_operator();
				State = 1283; table_or_subquery();
				State = 1285;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
				case 1:
					{
					State = 1284; join_constraint();
					}
					break;
				}
				}
				}
				State = 1291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_coreContext : ParserRuleContext {
		public ExprContext whereExpr;
		public ExprContext _expr;
		public IList<ExprContext> _groupByExpr = new List<ExprContext>();
		public ExprContext havingExpr;
		public ITerminalNode SELECT_() { return GetToken(SQLiteParser.SELECT_, 0); }
		public Result_columnContext[] result_column() {
			return GetRuleContexts<Result_columnContext>();
		}
		public Result_columnContext result_column(int i) {
			return GetRuleContext<Result_columnContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public ITerminalNode FROM_() { return GetToken(SQLiteParser.FROM_, 0); }
		public ITerminalNode WHERE_() { return GetToken(SQLiteParser.WHERE_, 0); }
		public ITerminalNode GROUP_() { return GetToken(SQLiteParser.GROUP_, 0); }
		public ITerminalNode BY_() { return GetToken(SQLiteParser.BY_, 0); }
		public ITerminalNode WINDOW_() { return GetToken(SQLiteParser.WINDOW_, 0); }
		public Window_nameContext[] window_name() {
			return GetRuleContexts<Window_nameContext>();
		}
		public Window_nameContext window_name(int i) {
			return GetRuleContext<Window_nameContext>(i);
		}
		public ITerminalNode[] AS_() { return GetTokens(SQLiteParser.AS_); }
		public ITerminalNode AS_(int i) {
			return GetToken(SQLiteParser.AS_, i);
		}
		public Window_defnContext[] window_defn() {
			return GetRuleContexts<Window_defnContext>();
		}
		public Window_defnContext window_defn(int i) {
			return GetRuleContext<Window_defnContext>(i);
		}
		public ITerminalNode DISTINCT_() { return GetToken(SQLiteParser.DISTINCT_, 0); }
		public ITerminalNode ALL_() { return GetToken(SQLiteParser.ALL_, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		public ITerminalNode HAVING_() { return GetToken(SQLiteParser.HAVING_, 0); }
		public Values_clauseContext values_clause() {
			return GetRuleContext<Values_clauseContext>(0);
		}
		public Select_coreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_core; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterSelect_core(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitSelect_core(this);
		}
	}

	[RuleVersion(0)]
	public Select_coreContext select_core() {
		Select_coreContext _localctx = new Select_coreContext(Context, State);
		EnterRule(_localctx, 90, RULE_select_core);
		int _la;
		try {
			State = 1355;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT_:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1292; Match(SELECT_);
				State = 1294;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
				case 1:
					{
					State = 1293;
					_la = TokenStream.LA(1);
					if ( !(_la==ALL_ || _la==DISTINCT_) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 1296; result_column();
				State = 1301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1297; Match(COMMA);
					State = 1298; result_column();
					}
					}
					State = 1303;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1316;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_) {
					{
					State = 1304; Match(FROM_);
					State = 1314;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,176,Context) ) {
					case 1:
						{
						State = 1305; table_or_subquery();
						State = 1310;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==COMMA) {
							{
							{
							State = 1306; Match(COMMA);
							State = 1307; table_or_subquery();
							}
							}
							State = 1312;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					case 2:
						{
						State = 1313; join_clause();
						}
						break;
					}
					}
				}

				State = 1320;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE_) {
					{
					State = 1318; Match(WHERE_);
					State = 1319; _localctx.whereExpr = expr(0);
					}
				}

				State = 1336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GROUP_) {
					{
					State = 1322; Match(GROUP_);
					State = 1323; Match(BY_);
					State = 1324; _localctx._expr = expr(0);
					_localctx._groupByExpr.Add(_localctx._expr);
					State = 1329;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1325; Match(COMMA);
						State = 1326; _localctx._expr = expr(0);
						_localctx._groupByExpr.Add(_localctx._expr);
						}
						}
						State = 1331;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1334;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==HAVING_) {
						{
						State = 1332; Match(HAVING_);
						State = 1333; _localctx.havingExpr = expr(0);
						}
					}

					}
				}

				State = 1352;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WINDOW_) {
					{
					State = 1338; Match(WINDOW_);
					State = 1339; window_name();
					State = 1340; Match(AS_);
					State = 1341; window_defn();
					State = 1349;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1342; Match(COMMA);
						State = 1343; window_name();
						State = 1344; Match(AS_);
						State = 1345; window_defn();
						}
						}
						State = 1351;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				}
				}
				break;
			case VALUES_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1354; values_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Factored_select_stmtContext : ParserRuleContext {
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Factored_select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factored_select_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterFactored_select_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitFactored_select_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Factored_select_stmtContext factored_select_stmt() {
		Factored_select_stmtContext _localctx = new Factored_select_stmtContext(Context, State);
		EnterRule(_localctx, 92, RULE_factored_select_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1357; select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_select_stmtContext : ParserRuleContext {
		public Select_coreContext select_core() {
			return GetRuleContext<Select_coreContext>(0);
		}
		public Common_table_stmtContext common_table_stmt() {
			return GetRuleContext<Common_table_stmtContext>(0);
		}
		public Order_by_stmtContext order_by_stmt() {
			return GetRuleContext<Order_by_stmtContext>(0);
		}
		public Limit_stmtContext limit_stmt() {
			return GetRuleContext<Limit_stmtContext>(0);
		}
		public Simple_select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_select_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterSimple_select_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitSimple_select_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Simple_select_stmtContext simple_select_stmt() {
		Simple_select_stmtContext _localctx = new Simple_select_stmtContext(Context, State);
		EnterRule(_localctx, 94, RULE_simple_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_) {
				{
				State = 1359; common_table_stmt();
				}
			}

			State = 1362; select_core();
			State = 1364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER_) {
				{
				State = 1363; order_by_stmt();
				}
			}

			State = 1367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT_) {
				{
				State = 1366; limit_stmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_select_stmtContext : ParserRuleContext {
		public Select_coreContext[] select_core() {
			return GetRuleContexts<Select_coreContext>();
		}
		public Select_coreContext select_core(int i) {
			return GetRuleContext<Select_coreContext>(i);
		}
		public Common_table_stmtContext common_table_stmt() {
			return GetRuleContext<Common_table_stmtContext>(0);
		}
		public Order_by_stmtContext order_by_stmt() {
			return GetRuleContext<Order_by_stmtContext>(0);
		}
		public Limit_stmtContext limit_stmt() {
			return GetRuleContext<Limit_stmtContext>(0);
		}
		public ITerminalNode[] UNION_() { return GetTokens(SQLiteParser.UNION_); }
		public ITerminalNode UNION_(int i) {
			return GetToken(SQLiteParser.UNION_, i);
		}
		public ITerminalNode[] INTERSECT_() { return GetTokens(SQLiteParser.INTERSECT_); }
		public ITerminalNode INTERSECT_(int i) {
			return GetToken(SQLiteParser.INTERSECT_, i);
		}
		public ITerminalNode[] EXCEPT_() { return GetTokens(SQLiteParser.EXCEPT_); }
		public ITerminalNode EXCEPT_(int i) {
			return GetToken(SQLiteParser.EXCEPT_, i);
		}
		public ITerminalNode[] ALL_() { return GetTokens(SQLiteParser.ALL_); }
		public ITerminalNode ALL_(int i) {
			return GetToken(SQLiteParser.ALL_, i);
		}
		public Compound_select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_select_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterCompound_select_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitCompound_select_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Compound_select_stmtContext compound_select_stmt() {
		Compound_select_stmtContext _localctx = new Compound_select_stmtContext(Context, State);
		EnterRule(_localctx, 96, RULE_compound_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_) {
				{
				State = 1369; common_table_stmt();
				}
			}

			State = 1372; select_core();
			State = 1382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1379;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case UNION_:
					{
					State = 1373; Match(UNION_);
					State = 1375;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALL_) {
						{
						State = 1374; Match(ALL_);
						}
					}

					}
					break;
				case INTERSECT_:
					{
					State = 1377; Match(INTERSECT_);
					}
					break;
				case EXCEPT_:
					{
					State = 1378; Match(EXCEPT_);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1381; select_core();
				}
				}
				State = 1384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==EXCEPT_ || _la==INTERSECT_ || _la==UNION_ );
			State = 1387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER_) {
				{
				State = 1386; order_by_stmt();
				}
			}

			State = 1390;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT_) {
				{
				State = 1389; limit_stmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_or_subqueryContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public ITerminalNode INDEXED_() { return GetToken(SQLiteParser.INDEXED_, 0); }
		public ITerminalNode BY_() { return GetToken(SQLiteParser.BY_, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode NOT_() { return GetToken(SQLiteParser.NOT_, 0); }
		public ITerminalNode AS_() { return GetToken(SQLiteParser.AS_, 0); }
		public Table_function_nameContext table_function_name() {
			return GetRuleContext<Table_function_nameContext>(0);
		}
		public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Table_or_subqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_or_subquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterTable_or_subquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitTable_or_subquery(this);
		}
	}

	[RuleVersion(0)]
	public Table_or_subqueryContext table_or_subquery() {
		Table_or_subqueryContext _localctx = new Table_or_subqueryContext(Context, State);
		EnterRule(_localctx, 98, RULE_table_or_subquery);
		int _la;
		try {
			State = 1456;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1395;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
				case 1:
					{
					State = 1392; schema_name();
					State = 1393; Match(DOT);
					}
					break;
				}
				State = 1397; table_name();
				State = 1402;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
				case 1:
					{
					State = 1399;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
					case 1:
						{
						State = 1398; Match(AS_);
						}
						break;
					}
					State = 1401; table_alias();
					}
					break;
				}
				State = 1409;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INDEXED_:
					{
					State = 1404; Match(INDEXED_);
					State = 1405; Match(BY_);
					State = 1406; index_name();
					}
					break;
				case NOT_:
					{
					State = 1407; Match(NOT_);
					State = 1408; Match(INDEXED_);
					}
					break;
				case Eof:
				case SCOL:
				case CLOSE_PAR:
				case COMMA:
				case ALTER_:
				case ANALYZE_:
				case ATTACH_:
				case BEGIN_:
				case COMMIT_:
				case CREATE_:
				case CROSS_:
				case DELETE_:
				case DETACH_:
				case DROP_:
				case END_:
				case EXCEPT_:
				case EXPLAIN_:
				case FULL_:
				case GROUP_:
				case INNER_:
				case INSERT_:
				case INTERSECT_:
				case JOIN_:
				case LEFT_:
				case LIMIT_:
				case NATURAL_:
				case ON_:
				case ORDER_:
				case PRAGMA_:
				case REINDEX_:
				case RELEASE_:
				case REPLACE_:
				case RETURNING_:
				case RIGHT_:
				case ROLLBACK_:
				case SAVEPOINT_:
				case SELECT_:
				case UNION_:
				case UPDATE_:
				case USING_:
				case VACUUM_:
				case VALUES_:
				case WHERE_:
				case WITH_:
				case WINDOW_:
					break;
				default:
					break;
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1414;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
				case 1:
					{
					State = 1411; schema_name();
					State = 1412; Match(DOT);
					}
					break;
				}
				State = 1416; table_function_name();
				State = 1417; Match(OPEN_PAR);
				State = 1418; expr(0);
				State = 1423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1419; Match(COMMA);
					State = 1420; expr(0);
					}
					}
					State = 1425;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1426; Match(CLOSE_PAR);
				State = 1431;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
				case 1:
					{
					State = 1428;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,200,Context) ) {
					case 1:
						{
						State = 1427; Match(AS_);
						}
						break;
					}
					State = 1430; table_alias();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1433; Match(OPEN_PAR);
				State = 1443;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,203,Context) ) {
				case 1:
					{
					State = 1434; table_or_subquery();
					State = 1439;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1435; Match(COMMA);
						State = 1436; table_or_subquery();
						}
						}
						State = 1441;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				case 2:
					{
					State = 1442; join_clause();
					}
					break;
				}
				State = 1445; Match(CLOSE_PAR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1447; Match(OPEN_PAR);
				State = 1448; select_stmt();
				State = 1449; Match(CLOSE_PAR);
				State = 1454;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
				case 1:
					{
					State = 1451;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,204,Context) ) {
					case 1:
						{
						State = 1450; Match(AS_);
						}
						break;
					}
					State = 1453; table_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Result_columnContext : ParserRuleContext {
		public ITerminalNode STAR() { return GetToken(SQLiteParser.STAR, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ITerminalNode AS_() { return GetToken(SQLiteParser.AS_, 0); }
		public Result_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result_column; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterResult_column(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitResult_column(this);
		}
	}

	[RuleVersion(0)]
	public Result_columnContext result_column() {
		Result_columnContext _localctx = new Result_columnContext(Context, State);
		EnterRule(_localctx, 100, RULE_result_column);
		int _la;
		try {
			State = 1470;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,209,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1458; Match(STAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1459; table_name();
				State = 1460; Match(DOT);
				State = 1461; Match(STAR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1463; expr(0);
				State = 1468;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS_ || _la==IDENTIFIER || _la==STRING_LITERAL) {
					{
					State = 1465;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS_) {
						{
						State = 1464; Match(AS_);
						}
					}

					State = 1467; column_alias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_operatorContext : ParserRuleContext {
		public ITerminalNode COMMA() { return GetToken(SQLiteParser.COMMA, 0); }
		public ITerminalNode JOIN_() { return GetToken(SQLiteParser.JOIN_, 0); }
		public ITerminalNode NATURAL_() { return GetToken(SQLiteParser.NATURAL_, 0); }
		public ITerminalNode INNER_() { return GetToken(SQLiteParser.INNER_, 0); }
		public ITerminalNode CROSS_() { return GetToken(SQLiteParser.CROSS_, 0); }
		public ITerminalNode LEFT_() { return GetToken(SQLiteParser.LEFT_, 0); }
		public ITerminalNode RIGHT_() { return GetToken(SQLiteParser.RIGHT_, 0); }
		public ITerminalNode FULL_() { return GetToken(SQLiteParser.FULL_, 0); }
		public ITerminalNode OUTER_() { return GetToken(SQLiteParser.OUTER_, 0); }
		public Join_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterJoin_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitJoin_operator(this);
		}
	}

	[RuleVersion(0)]
	public Join_operatorContext join_operator() {
		Join_operatorContext _localctx = new Join_operatorContext(Context, State);
		EnterRule(_localctx, 102, RULE_join_operator);
		int _la;
		try {
			State = 1485;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1472; Match(COMMA);
				}
				break;
			case CROSS_:
			case FULL_:
			case INNER_:
			case JOIN_:
			case LEFT_:
			case NATURAL_:
			case RIGHT_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1474;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NATURAL_) {
					{
					State = 1473; Match(NATURAL_);
					}
				}

				State = 1482;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FULL_:
				case LEFT_:
				case RIGHT_:
					{
					State = 1476;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FULL_ - 76)) | (1L << (LEFT_ - 76)) | (1L << (RIGHT_ - 76)))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1478;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OUTER_) {
						{
						State = 1477; Match(OUTER_);
						}
					}

					}
					break;
				case INNER_:
					{
					State = 1480; Match(INNER_);
					}
					break;
				case CROSS_:
					{
					State = 1481; Match(CROSS_);
					}
					break;
				case JOIN_:
					break;
				default:
					break;
				}
				State = 1484; Match(JOIN_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_constraintContext : ParserRuleContext {
		public ITerminalNode ON_() { return GetToken(SQLiteParser.ON_, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode USING_() { return GetToken(SQLiteParser.USING_, 0); }
		public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Join_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterJoin_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitJoin_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Join_constraintContext join_constraint() {
		Join_constraintContext _localctx = new Join_constraintContext(Context, State);
		EnterRule(_localctx, 104, RULE_join_constraint);
		int _la;
		try {
			State = 1501;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ON_:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1487; Match(ON_);
				State = 1488; expr(0);
				}
				break;
			case USING_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1489; Match(USING_);
				State = 1490; Match(OPEN_PAR);
				State = 1491; column_name();
				State = 1496;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1492; Match(COMMA);
					State = 1493; column_name();
					}
					}
					State = 1498;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1499; Match(CLOSE_PAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_operatorContext : ParserRuleContext {
		public ITerminalNode UNION_() { return GetToken(SQLiteParser.UNION_, 0); }
		public ITerminalNode ALL_() { return GetToken(SQLiteParser.ALL_, 0); }
		public ITerminalNode INTERSECT_() { return GetToken(SQLiteParser.INTERSECT_, 0); }
		public ITerminalNode EXCEPT_() { return GetToken(SQLiteParser.EXCEPT_, 0); }
		public Compound_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterCompound_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitCompound_operator(this);
		}
	}

	[RuleVersion(0)]
	public Compound_operatorContext compound_operator() {
		Compound_operatorContext _localctx = new Compound_operatorContext(Context, State);
		EnterRule(_localctx, 106, RULE_compound_operator);
		int _la;
		try {
			State = 1509;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNION_:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1503; Match(UNION_);
				State = 1505;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL_) {
					{
					State = 1504; Match(ALL_);
					}
				}

				}
				break;
			case INTERSECT_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1507; Match(INTERSECT_);
				}
				break;
			case EXCEPT_:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1508; Match(EXCEPT_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_stmtContext : ParserRuleContext {
		public ITerminalNode UPDATE_() { return GetToken(SQLiteParser.UPDATE_, 0); }
		public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		public ITerminalNode SET_() { return GetToken(SQLiteParser.SET_, 0); }
		public ITerminalNode[] ASSIGN() { return GetTokens(SQLiteParser.ASSIGN); }
		public ITerminalNode ASSIGN(int i) {
			return GetToken(SQLiteParser.ASSIGN, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Column_name_listContext[] column_name_list() {
			return GetRuleContexts<Column_name_listContext>();
		}
		public Column_name_listContext column_name_list(int i) {
			return GetRuleContext<Column_name_listContext>(i);
		}
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public ITerminalNode OR_() { return GetToken(SQLiteParser.OR_, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public ITerminalNode FROM_() { return GetToken(SQLiteParser.FROM_, 0); }
		public ITerminalNode WHERE_() { return GetToken(SQLiteParser.WHERE_, 0); }
		public Returning_clauseContext returning_clause() {
			return GetRuleContext<Returning_clauseContext>(0);
		}
		public ITerminalNode ROLLBACK_() { return GetToken(SQLiteParser.ROLLBACK_, 0); }
		public ITerminalNode ABORT_() { return GetToken(SQLiteParser.ABORT_, 0); }
		public ITerminalNode REPLACE_() { return GetToken(SQLiteParser.REPLACE_, 0); }
		public ITerminalNode FAIL_() { return GetToken(SQLiteParser.FAIL_, 0); }
		public ITerminalNode IGNORE_() { return GetToken(SQLiteParser.IGNORE_, 0); }
		public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		public Update_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterUpdate_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitUpdate_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Update_stmtContext update_stmt() {
		Update_stmtContext _localctx = new Update_stmtContext(Context, State);
		EnterRule(_localctx, 108, RULE_update_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1512;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_) {
				{
				State = 1511; with_clause();
				}
			}

			State = 1514; Match(UPDATE_);
			State = 1517;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,219,Context) ) {
			case 1:
				{
				State = 1515; Match(OR_);
				State = 1516;
				_la = TokenStream.LA(1);
				if ( !(_la==ABORT_ || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (FAIL_ - 72)) | (1L << (IGNORE_ - 72)) | (1L << (REPLACE_ - 72)) | (1L << (ROLLBACK_ - 72)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1519; qualified_table_name();
			State = 1520; Match(SET_);
			State = 1523;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,220,Context) ) {
			case 1:
				{
				State = 1521; column_name();
				}
				break;
			case 2:
				{
				State = 1522; column_name_list();
				}
				break;
			}
			State = 1525; Match(ASSIGN);
			State = 1526; expr(0);
			State = 1537;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1527; Match(COMMA);
				State = 1530;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,221,Context) ) {
				case 1:
					{
					State = 1528; column_name();
					}
					break;
				case 2:
					{
					State = 1529; column_name_list();
					}
					break;
				}
				State = 1532; Match(ASSIGN);
				State = 1533; expr(0);
				}
				}
				State = 1539;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1552;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM_) {
				{
				State = 1540; Match(FROM_);
				State = 1550;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,224,Context) ) {
				case 1:
					{
					State = 1541; table_or_subquery();
					State = 1546;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1542; Match(COMMA);
						State = 1543; table_or_subquery();
						}
						}
						State = 1548;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				case 2:
					{
					State = 1549; join_clause();
					}
					break;
				}
				}
			}

			State = 1556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE_) {
				{
				State = 1554; Match(WHERE_);
				State = 1555; expr(0);
				}
			}

			State = 1559;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING_) {
				{
				State = 1558; returning_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_listContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterColumn_name_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitColumn_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_listContext column_name_list() {
		Column_name_listContext _localctx = new Column_name_listContext(Context, State);
		EnterRule(_localctx, 110, RULE_column_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1561; Match(OPEN_PAR);
			State = 1562; column_name();
			State = 1567;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1563; Match(COMMA);
				State = 1564; column_name();
				}
				}
				State = 1569;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1570; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_stmt_limitedContext : ParserRuleContext {
		public ITerminalNode UPDATE_() { return GetToken(SQLiteParser.UPDATE_, 0); }
		public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		public ITerminalNode SET_() { return GetToken(SQLiteParser.SET_, 0); }
		public ITerminalNode[] ASSIGN() { return GetTokens(SQLiteParser.ASSIGN); }
		public ITerminalNode ASSIGN(int i) {
			return GetToken(SQLiteParser.ASSIGN, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Column_name_listContext[] column_name_list() {
			return GetRuleContexts<Column_name_listContext>();
		}
		public Column_name_listContext column_name_list(int i) {
			return GetRuleContext<Column_name_listContext>(i);
		}
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public ITerminalNode OR_() { return GetToken(SQLiteParser.OR_, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public ITerminalNode WHERE_() { return GetToken(SQLiteParser.WHERE_, 0); }
		public Returning_clauseContext returning_clause() {
			return GetRuleContext<Returning_clauseContext>(0);
		}
		public Limit_stmtContext limit_stmt() {
			return GetRuleContext<Limit_stmtContext>(0);
		}
		public ITerminalNode ROLLBACK_() { return GetToken(SQLiteParser.ROLLBACK_, 0); }
		public ITerminalNode ABORT_() { return GetToken(SQLiteParser.ABORT_, 0); }
		public ITerminalNode REPLACE_() { return GetToken(SQLiteParser.REPLACE_, 0); }
		public ITerminalNode FAIL_() { return GetToken(SQLiteParser.FAIL_, 0); }
		public ITerminalNode IGNORE_() { return GetToken(SQLiteParser.IGNORE_, 0); }
		public Order_by_stmtContext order_by_stmt() {
			return GetRuleContext<Order_by_stmtContext>(0);
		}
		public Update_stmt_limitedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_stmt_limited; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterUpdate_stmt_limited(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitUpdate_stmt_limited(this);
		}
	}

	[RuleVersion(0)]
	public Update_stmt_limitedContext update_stmt_limited() {
		Update_stmt_limitedContext _localctx = new Update_stmt_limitedContext(Context, State);
		EnterRule(_localctx, 112, RULE_update_stmt_limited);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1573;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_) {
				{
				State = 1572; with_clause();
				}
			}

			State = 1575; Match(UPDATE_);
			State = 1578;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,230,Context) ) {
			case 1:
				{
				State = 1576; Match(OR_);
				State = 1577;
				_la = TokenStream.LA(1);
				if ( !(_la==ABORT_ || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (FAIL_ - 72)) | (1L << (IGNORE_ - 72)) | (1L << (REPLACE_ - 72)) | (1L << (ROLLBACK_ - 72)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1580; qualified_table_name();
			State = 1581; Match(SET_);
			State = 1584;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,231,Context) ) {
			case 1:
				{
				State = 1582; column_name();
				}
				break;
			case 2:
				{
				State = 1583; column_name_list();
				}
				break;
			}
			State = 1586; Match(ASSIGN);
			State = 1587; expr(0);
			State = 1598;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1588; Match(COMMA);
				State = 1591;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
				case 1:
					{
					State = 1589; column_name();
					}
					break;
				case 2:
					{
					State = 1590; column_name_list();
					}
					break;
				}
				State = 1593; Match(ASSIGN);
				State = 1594; expr(0);
				}
				}
				State = 1600;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1603;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE_) {
				{
				State = 1601; Match(WHERE_);
				State = 1602; expr(0);
				}
			}

			State = 1606;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING_) {
				{
				State = 1605; returning_clause();
				}
			}

			State = 1612;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT_ || _la==ORDER_) {
				{
				State = 1609;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER_) {
					{
					State = 1608; order_by_stmt();
					}
				}

				State = 1611; limit_stmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_table_nameContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		public ITerminalNode AS_() { return GetToken(SQLiteParser.AS_, 0); }
		public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public ITerminalNode INDEXED_() { return GetToken(SQLiteParser.INDEXED_, 0); }
		public ITerminalNode BY_() { return GetToken(SQLiteParser.BY_, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode NOT_() { return GetToken(SQLiteParser.NOT_, 0); }
		public Qualified_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterQualified_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitQualified_table_name(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_table_nameContext qualified_table_name() {
		Qualified_table_nameContext _localctx = new Qualified_table_nameContext(Context, State);
		EnterRule(_localctx, 114, RULE_qualified_table_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1617;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,238,Context) ) {
			case 1:
				{
				State = 1614; schema_name();
				State = 1615; Match(DOT);
				}
				break;
			}
			State = 1619; table_name();
			State = 1622;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS_) {
				{
				State = 1620; Match(AS_);
				State = 1621; alias();
				}
			}

			State = 1629;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDEXED_:
				{
				State = 1624; Match(INDEXED_);
				State = 1625; Match(BY_);
				State = 1626; index_name();
				}
				break;
			case NOT_:
				{
				State = 1627; Match(NOT_);
				State = 1628; Match(INDEXED_);
				}
				break;
			case Eof:
			case SCOL:
			case ALTER_:
			case ANALYZE_:
			case ATTACH_:
			case BEGIN_:
			case COMMIT_:
			case CREATE_:
			case DELETE_:
			case DETACH_:
			case DROP_:
			case END_:
			case EXPLAIN_:
			case INSERT_:
			case LIMIT_:
			case ORDER_:
			case PRAGMA_:
			case REINDEX_:
			case RELEASE_:
			case REPLACE_:
			case RETURNING_:
			case ROLLBACK_:
			case SAVEPOINT_:
			case SELECT_:
			case SET_:
			case UPDATE_:
			case VACUUM_:
			case VALUES_:
			case WHERE_:
			case WITH_:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vacuum_stmtContext : ParserRuleContext {
		public ITerminalNode VACUUM_() { return GetToken(SQLiteParser.VACUUM_, 0); }
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode INTO_() { return GetToken(SQLiteParser.INTO_, 0); }
		public FilenameContext filename() {
			return GetRuleContext<FilenameContext>(0);
		}
		public Vacuum_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vacuum_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterVacuum_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitVacuum_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Vacuum_stmtContext vacuum_stmt() {
		Vacuum_stmtContext _localctx = new Vacuum_stmtContext(Context, State);
		EnterRule(_localctx, 116, RULE_vacuum_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1631; Match(VACUUM_);
			State = 1633;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,241,Context) ) {
			case 1:
				{
				State = 1632; schema_name();
				}
				break;
			}
			State = 1637;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO_) {
				{
				State = 1635; Match(INTO_);
				State = 1636; filename();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filter_clauseContext : ParserRuleContext {
		public ITerminalNode FILTER_() { return GetToken(SQLiteParser.FILTER_, 0); }
		public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		public ITerminalNode WHERE_() { return GetToken(SQLiteParser.WHERE_, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public Filter_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterFilter_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitFilter_clause(this);
		}
	}

	[RuleVersion(0)]
	public Filter_clauseContext filter_clause() {
		Filter_clauseContext _localctx = new Filter_clauseContext(Context, State);
		EnterRule(_localctx, 118, RULE_filter_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1639; Match(FILTER_);
			State = 1640; Match(OPEN_PAR);
			State = 1641; Match(WHERE_);
			State = 1642; expr(0);
			State = 1643; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_defnContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public ITerminalNode ORDER_() { return GetToken(SQLiteParser.ORDER_, 0); }
		public ITerminalNode[] BY_() { return GetTokens(SQLiteParser.BY_); }
		public ITerminalNode BY_(int i) {
			return GetToken(SQLiteParser.BY_, i);
		}
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public Base_window_nameContext base_window_name() {
			return GetRuleContext<Base_window_nameContext>(0);
		}
		public ITerminalNode PARTITION_() { return GetToken(SQLiteParser.PARTITION_, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Frame_specContext frame_spec() {
			return GetRuleContext<Frame_specContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Window_defnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_defn; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterWindow_defn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitWindow_defn(this);
		}
	}

	[RuleVersion(0)]
	public Window_defnContext window_defn() {
		Window_defnContext _localctx = new Window_defnContext(Context, State);
		EnterRule(_localctx, 120, RULE_window_defn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1645; Match(OPEN_PAR);
			State = 1647;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,243,Context) ) {
			case 1:
				{
				State = 1646; base_window_name();
				}
				break;
			}
			State = 1659;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION_) {
				{
				State = 1649; Match(PARTITION_);
				State = 1650; Match(BY_);
				State = 1651; expr(0);
				State = 1656;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1652; Match(COMMA);
					State = 1653; expr(0);
					}
					}
					State = 1658;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			{
			State = 1661; Match(ORDER_);
			State = 1662; Match(BY_);
			State = 1663; ordering_term();
			State = 1668;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1664; Match(COMMA);
				State = 1665; ordering_term();
				}
				}
				State = 1670;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 1672;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ROWS_ - 128)) | (1L << (RANGE_ - 128)) | (1L << (GROUPS_ - 128)))) != 0)) {
				{
				State = 1671; frame_spec();
				}
			}

			State = 1674; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clauseContext : ParserRuleContext {
		public ITerminalNode OVER_() { return GetToken(SQLiteParser.OVER_, 0); }
		public Window_nameContext window_name() {
			return GetRuleContext<Window_nameContext>(0);
		}
		public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public Base_window_nameContext base_window_name() {
			return GetRuleContext<Base_window_nameContext>(0);
		}
		public ITerminalNode PARTITION_() { return GetToken(SQLiteParser.PARTITION_, 0); }
		public ITerminalNode[] BY_() { return GetTokens(SQLiteParser.BY_); }
		public ITerminalNode BY_(int i) {
			return GetToken(SQLiteParser.BY_, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode ORDER_() { return GetToken(SQLiteParser.ORDER_, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public Frame_specContext frame_spec() {
			return GetRuleContext<Frame_specContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterOver_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitOver_clause(this);
		}
	}

	[RuleVersion(0)]
	public Over_clauseContext over_clause() {
		Over_clauseContext _localctx = new Over_clauseContext(Context, State);
		EnterRule(_localctx, 122, RULE_over_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1676; Match(OVER_);
			State = 1710;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,254,Context) ) {
			case 1:
				{
				State = 1677; window_name();
				}
				break;
			case 2:
				{
				State = 1678; Match(OPEN_PAR);
				State = 1680;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,248,Context) ) {
				case 1:
					{
					State = 1679; base_window_name();
					}
					break;
				}
				State = 1692;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION_) {
					{
					State = 1682; Match(PARTITION_);
					State = 1683; Match(BY_);
					State = 1684; expr(0);
					State = 1689;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1685; Match(COMMA);
						State = 1686; expr(0);
						}
						}
						State = 1691;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1704;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER_) {
					{
					State = 1694; Match(ORDER_);
					State = 1695; Match(BY_);
					State = 1696; ordering_term();
					State = 1701;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1697; Match(COMMA);
						State = 1698; ordering_term();
						}
						}
						State = 1703;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1707;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ROWS_ - 128)) | (1L << (RANGE_ - 128)) | (1L << (GROUPS_ - 128)))) != 0)) {
					{
					State = 1706; frame_spec();
					}
				}

				State = 1709; Match(CLOSE_PAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_specContext : ParserRuleContext {
		public Frame_clauseContext frame_clause() {
			return GetRuleContext<Frame_clauseContext>(0);
		}
		public ITerminalNode EXCLUDE_() { return GetToken(SQLiteParser.EXCLUDE_, 0); }
		public ITerminalNode NO_() { return GetToken(SQLiteParser.NO_, 0); }
		public ITerminalNode OTHERS_() { return GetToken(SQLiteParser.OTHERS_, 0); }
		public ITerminalNode CURRENT_() { return GetToken(SQLiteParser.CURRENT_, 0); }
		public ITerminalNode ROW_() { return GetToken(SQLiteParser.ROW_, 0); }
		public ITerminalNode GROUP_() { return GetToken(SQLiteParser.GROUP_, 0); }
		public ITerminalNode TIES_() { return GetToken(SQLiteParser.TIES_, 0); }
		public Frame_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterFrame_spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitFrame_spec(this);
		}
	}

	[RuleVersion(0)]
	public Frame_specContext frame_spec() {
		Frame_specContext _localctx = new Frame_specContext(Context, State);
		EnterRule(_localctx, 124, RULE_frame_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1712; frame_clause();
			State = 1722;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXCLUDE_) {
				{
				State = 1713; Match(EXCLUDE_);
				State = 1720;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NO_:
					{
					State = 1714; Match(NO_);
					State = 1715; Match(OTHERS_);
					}
					break;
				case CURRENT_:
					{
					State = 1716; Match(CURRENT_);
					State = 1717; Match(ROW_);
					}
					break;
				case GROUP_:
					{
					State = 1718; Match(GROUP_);
					}
					break;
				case TIES_:
					{
					State = 1719; Match(TIES_);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_clauseContext : ParserRuleContext {
		public ITerminalNode RANGE_() { return GetToken(SQLiteParser.RANGE_, 0); }
		public ITerminalNode ROWS_() { return GetToken(SQLiteParser.ROWS_, 0); }
		public ITerminalNode GROUPS_() { return GetToken(SQLiteParser.GROUPS_, 0); }
		public Frame_singleContext frame_single() {
			return GetRuleContext<Frame_singleContext>(0);
		}
		public ITerminalNode BETWEEN_() { return GetToken(SQLiteParser.BETWEEN_, 0); }
		public Frame_leftContext frame_left() {
			return GetRuleContext<Frame_leftContext>(0);
		}
		public ITerminalNode AND_() { return GetToken(SQLiteParser.AND_, 0); }
		public Frame_rightContext frame_right() {
			return GetRuleContext<Frame_rightContext>(0);
		}
		public Frame_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterFrame_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitFrame_clause(this);
		}
	}

	[RuleVersion(0)]
	public Frame_clauseContext frame_clause() {
		Frame_clauseContext _localctx = new Frame_clauseContext(Context, State);
		EnterRule(_localctx, 126, RULE_frame_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1724;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ROWS_ - 128)) | (1L << (RANGE_ - 128)) | (1L << (GROUPS_ - 128)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1731;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,257,Context) ) {
			case 1:
				{
				State = 1725; frame_single();
				}
				break;
			case 2:
				{
				State = 1726; Match(BETWEEN_);
				State = 1727; frame_left();
				State = 1728; Match(AND_);
				State = 1729; frame_right();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_function_invocationContext : ParserRuleContext {
		public Simple_funcContext simple_func() {
			return GetRuleContext<Simple_funcContext>(0);
		}
		public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode STAR() { return GetToken(SQLiteParser.STAR, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Simple_function_invocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_function_invocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterSimple_function_invocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitSimple_function_invocation(this);
		}
	}

	[RuleVersion(0)]
	public Simple_function_invocationContext simple_function_invocation() {
		Simple_function_invocationContext _localctx = new Simple_function_invocationContext(Context, State);
		EnterRule(_localctx, 128, RULE_simple_function_invocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1733; simple_func();
			State = 1734; Match(OPEN_PAR);
			State = 1744;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAR:
			case PLUS:
			case MINUS:
			case TILDE:
			case ABORT_:
			case ACTION_:
			case ADD_:
			case AFTER_:
			case ALL_:
			case ALTER_:
			case ANALYZE_:
			case AND_:
			case AS_:
			case ASC_:
			case ATTACH_:
			case AUTOINCREMENT_:
			case BEFORE_:
			case BEGIN_:
			case BETWEEN_:
			case BY_:
			case CASCADE_:
			case CASE_:
			case CAST_:
			case CHECK_:
			case COLLATE_:
			case COLUMN_:
			case COMMIT_:
			case CONFLICT_:
			case CONSTRAINT_:
			case CREATE_:
			case CROSS_:
			case CURRENT_DATE_:
			case CURRENT_TIME_:
			case CURRENT_TIMESTAMP_:
			case DATABASE_:
			case DEFAULT_:
			case DEFERRABLE_:
			case DEFERRED_:
			case DELETE_:
			case DESC_:
			case DETACH_:
			case DISTINCT_:
			case DROP_:
			case EACH_:
			case ELSE_:
			case END_:
			case ESCAPE_:
			case EXCEPT_:
			case EXCLUSIVE_:
			case EXISTS_:
			case EXPLAIN_:
			case FAIL_:
			case FOR_:
			case FOREIGN_:
			case FROM_:
			case FULL_:
			case GLOB_:
			case GROUP_:
			case HAVING_:
			case IF_:
			case IGNORE_:
			case IMMEDIATE_:
			case IN_:
			case INDEX_:
			case INDEXED_:
			case INITIALLY_:
			case INNER_:
			case INSERT_:
			case INSTEAD_:
			case INTERSECT_:
			case INTO_:
			case IS_:
			case ISNULL_:
			case JOIN_:
			case KEY_:
			case LEFT_:
			case LIKE_:
			case LIMIT_:
			case MATCH_:
			case NATURAL_:
			case NO_:
			case NOT_:
			case NOTNULL_:
			case NULL_:
			case OF_:
			case OFFSET_:
			case ON_:
			case OR_:
			case ORDER_:
			case OUTER_:
			case PLAN_:
			case PRAGMA_:
			case PRIMARY_:
			case QUERY_:
			case RAISE_:
			case RECURSIVE_:
			case REFERENCES_:
			case REGEXP_:
			case REINDEX_:
			case RELEASE_:
			case RENAME_:
			case REPLACE_:
			case RESTRICT_:
			case RIGHT_:
			case ROLLBACK_:
			case ROW_:
			case ROWS_:
			case SAVEPOINT_:
			case SELECT_:
			case SET_:
			case TABLE_:
			case TEMP_:
			case TEMPORARY_:
			case THEN_:
			case TO_:
			case TRANSACTION_:
			case TRIGGER_:
			case UNION_:
			case UNIQUE_:
			case UPDATE_:
			case USING_:
			case VACUUM_:
			case VALUES_:
			case VIEW_:
			case VIRTUAL_:
			case WHEN_:
			case WHERE_:
			case WITH_:
			case WITHOUT_:
			case FIRST_VALUE_:
			case OVER_:
			case PARTITION_:
			case RANGE_:
			case PRECEDING_:
			case UNBOUNDED_:
			case CURRENT_:
			case FOLLOWING_:
			case CUME_DIST_:
			case DENSE_RANK_:
			case LAG_:
			case LAST_VALUE_:
			case LEAD_:
			case NTH_VALUE_:
			case NTILE_:
			case PERCENT_RANK_:
			case RANK_:
			case ROW_NUMBER_:
			case GENERATED_:
			case ALWAYS_:
			case STORED_:
			case TRUE_:
			case FALSE_:
			case WINDOW_:
			case NULLS_:
			case FIRST_:
			case LAST_:
			case FILTER_:
			case GROUPS_:
			case EXCLUDE_:
			case IDENTIFIER:
			case NUMERIC_LITERAL:
			case BIND_PARAMETER:
			case STRING_LITERAL:
			case BLOB_LITERAL:
				{
				State = 1735; expr(0);
				State = 1740;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1736; Match(COMMA);
					State = 1737; expr(0);
					}
					}
					State = 1742;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case STAR:
				{
				State = 1743; Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1746; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_function_invocationContext : ParserRuleContext {
		public Aggregate_funcContext aggregate_func() {
			return GetRuleContext<Aggregate_funcContext>(0);
		}
		public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode STAR() { return GetToken(SQLiteParser.STAR, 0); }
		public Filter_clauseContext filter_clause() {
			return GetRuleContext<Filter_clauseContext>(0);
		}
		public ITerminalNode DISTINCT_() { return GetToken(SQLiteParser.DISTINCT_, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Aggregate_function_invocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_function_invocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterAggregate_function_invocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitAggregate_function_invocation(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_function_invocationContext aggregate_function_invocation() {
		Aggregate_function_invocationContext _localctx = new Aggregate_function_invocationContext(Context, State);
		EnterRule(_localctx, 130, RULE_aggregate_function_invocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1748; aggregate_func();
			State = 1749; Match(OPEN_PAR);
			State = 1762;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAR:
			case PLUS:
			case MINUS:
			case TILDE:
			case ABORT_:
			case ACTION_:
			case ADD_:
			case AFTER_:
			case ALL_:
			case ALTER_:
			case ANALYZE_:
			case AND_:
			case AS_:
			case ASC_:
			case ATTACH_:
			case AUTOINCREMENT_:
			case BEFORE_:
			case BEGIN_:
			case BETWEEN_:
			case BY_:
			case CASCADE_:
			case CASE_:
			case CAST_:
			case CHECK_:
			case COLLATE_:
			case COLUMN_:
			case COMMIT_:
			case CONFLICT_:
			case CONSTRAINT_:
			case CREATE_:
			case CROSS_:
			case CURRENT_DATE_:
			case CURRENT_TIME_:
			case CURRENT_TIMESTAMP_:
			case DATABASE_:
			case DEFAULT_:
			case DEFERRABLE_:
			case DEFERRED_:
			case DELETE_:
			case DESC_:
			case DETACH_:
			case DISTINCT_:
			case DROP_:
			case EACH_:
			case ELSE_:
			case END_:
			case ESCAPE_:
			case EXCEPT_:
			case EXCLUSIVE_:
			case EXISTS_:
			case EXPLAIN_:
			case FAIL_:
			case FOR_:
			case FOREIGN_:
			case FROM_:
			case FULL_:
			case GLOB_:
			case GROUP_:
			case HAVING_:
			case IF_:
			case IGNORE_:
			case IMMEDIATE_:
			case IN_:
			case INDEX_:
			case INDEXED_:
			case INITIALLY_:
			case INNER_:
			case INSERT_:
			case INSTEAD_:
			case INTERSECT_:
			case INTO_:
			case IS_:
			case ISNULL_:
			case JOIN_:
			case KEY_:
			case LEFT_:
			case LIKE_:
			case LIMIT_:
			case MATCH_:
			case NATURAL_:
			case NO_:
			case NOT_:
			case NOTNULL_:
			case NULL_:
			case OF_:
			case OFFSET_:
			case ON_:
			case OR_:
			case ORDER_:
			case OUTER_:
			case PLAN_:
			case PRAGMA_:
			case PRIMARY_:
			case QUERY_:
			case RAISE_:
			case RECURSIVE_:
			case REFERENCES_:
			case REGEXP_:
			case REINDEX_:
			case RELEASE_:
			case RENAME_:
			case REPLACE_:
			case RESTRICT_:
			case RIGHT_:
			case ROLLBACK_:
			case ROW_:
			case ROWS_:
			case SAVEPOINT_:
			case SELECT_:
			case SET_:
			case TABLE_:
			case TEMP_:
			case TEMPORARY_:
			case THEN_:
			case TO_:
			case TRANSACTION_:
			case TRIGGER_:
			case UNION_:
			case UNIQUE_:
			case UPDATE_:
			case USING_:
			case VACUUM_:
			case VALUES_:
			case VIEW_:
			case VIRTUAL_:
			case WHEN_:
			case WHERE_:
			case WITH_:
			case WITHOUT_:
			case FIRST_VALUE_:
			case OVER_:
			case PARTITION_:
			case RANGE_:
			case PRECEDING_:
			case UNBOUNDED_:
			case CURRENT_:
			case FOLLOWING_:
			case CUME_DIST_:
			case DENSE_RANK_:
			case LAG_:
			case LAST_VALUE_:
			case LEAD_:
			case NTH_VALUE_:
			case NTILE_:
			case PERCENT_RANK_:
			case RANK_:
			case ROW_NUMBER_:
			case GENERATED_:
			case ALWAYS_:
			case STORED_:
			case TRUE_:
			case FALSE_:
			case WINDOW_:
			case NULLS_:
			case FIRST_:
			case LAST_:
			case FILTER_:
			case GROUPS_:
			case EXCLUDE_:
			case IDENTIFIER:
			case NUMERIC_LITERAL:
			case BIND_PARAMETER:
			case STRING_LITERAL:
			case BLOB_LITERAL:
				{
				State = 1751;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,260,Context) ) {
				case 1:
					{
					State = 1750; Match(DISTINCT_);
					}
					break;
				}
				State = 1753; expr(0);
				State = 1758;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1754; Match(COMMA);
					State = 1755; expr(0);
					}
					}
					State = 1760;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case STAR:
				{
				State = 1761; Match(STAR);
				}
				break;
			case CLOSE_PAR:
				break;
			default:
				break;
			}
			State = 1764; Match(CLOSE_PAR);
			State = 1766;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FILTER_) {
				{
				State = 1765; filter_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_function_invocationContext : ParserRuleContext {
		public Window_functionContext window_function() {
			return GetRuleContext<Window_functionContext>(0);
		}
		public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public ITerminalNode OVER_() { return GetToken(SQLiteParser.OVER_, 0); }
		public Window_defnContext window_defn() {
			return GetRuleContext<Window_defnContext>(0);
		}
		public Window_nameContext window_name() {
			return GetRuleContext<Window_nameContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode STAR() { return GetToken(SQLiteParser.STAR, 0); }
		public Filter_clauseContext filter_clause() {
			return GetRuleContext<Filter_clauseContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Window_function_invocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_function_invocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterWindow_function_invocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitWindow_function_invocation(this);
		}
	}

	[RuleVersion(0)]
	public Window_function_invocationContext window_function_invocation() {
		Window_function_invocationContext _localctx = new Window_function_invocationContext(Context, State);
		EnterRule(_localctx, 132, RULE_window_function_invocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1768; window_function();
			State = 1769; Match(OPEN_PAR);
			State = 1779;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAR:
			case PLUS:
			case MINUS:
			case TILDE:
			case ABORT_:
			case ACTION_:
			case ADD_:
			case AFTER_:
			case ALL_:
			case ALTER_:
			case ANALYZE_:
			case AND_:
			case AS_:
			case ASC_:
			case ATTACH_:
			case AUTOINCREMENT_:
			case BEFORE_:
			case BEGIN_:
			case BETWEEN_:
			case BY_:
			case CASCADE_:
			case CASE_:
			case CAST_:
			case CHECK_:
			case COLLATE_:
			case COLUMN_:
			case COMMIT_:
			case CONFLICT_:
			case CONSTRAINT_:
			case CREATE_:
			case CROSS_:
			case CURRENT_DATE_:
			case CURRENT_TIME_:
			case CURRENT_TIMESTAMP_:
			case DATABASE_:
			case DEFAULT_:
			case DEFERRABLE_:
			case DEFERRED_:
			case DELETE_:
			case DESC_:
			case DETACH_:
			case DISTINCT_:
			case DROP_:
			case EACH_:
			case ELSE_:
			case END_:
			case ESCAPE_:
			case EXCEPT_:
			case EXCLUSIVE_:
			case EXISTS_:
			case EXPLAIN_:
			case FAIL_:
			case FOR_:
			case FOREIGN_:
			case FROM_:
			case FULL_:
			case GLOB_:
			case GROUP_:
			case HAVING_:
			case IF_:
			case IGNORE_:
			case IMMEDIATE_:
			case IN_:
			case INDEX_:
			case INDEXED_:
			case INITIALLY_:
			case INNER_:
			case INSERT_:
			case INSTEAD_:
			case INTERSECT_:
			case INTO_:
			case IS_:
			case ISNULL_:
			case JOIN_:
			case KEY_:
			case LEFT_:
			case LIKE_:
			case LIMIT_:
			case MATCH_:
			case NATURAL_:
			case NO_:
			case NOT_:
			case NOTNULL_:
			case NULL_:
			case OF_:
			case OFFSET_:
			case ON_:
			case OR_:
			case ORDER_:
			case OUTER_:
			case PLAN_:
			case PRAGMA_:
			case PRIMARY_:
			case QUERY_:
			case RAISE_:
			case RECURSIVE_:
			case REFERENCES_:
			case REGEXP_:
			case REINDEX_:
			case RELEASE_:
			case RENAME_:
			case REPLACE_:
			case RESTRICT_:
			case RIGHT_:
			case ROLLBACK_:
			case ROW_:
			case ROWS_:
			case SAVEPOINT_:
			case SELECT_:
			case SET_:
			case TABLE_:
			case TEMP_:
			case TEMPORARY_:
			case THEN_:
			case TO_:
			case TRANSACTION_:
			case TRIGGER_:
			case UNION_:
			case UNIQUE_:
			case UPDATE_:
			case USING_:
			case VACUUM_:
			case VALUES_:
			case VIEW_:
			case VIRTUAL_:
			case WHEN_:
			case WHERE_:
			case WITH_:
			case WITHOUT_:
			case FIRST_VALUE_:
			case OVER_:
			case PARTITION_:
			case RANGE_:
			case PRECEDING_:
			case UNBOUNDED_:
			case CURRENT_:
			case FOLLOWING_:
			case CUME_DIST_:
			case DENSE_RANK_:
			case LAG_:
			case LAST_VALUE_:
			case LEAD_:
			case NTH_VALUE_:
			case NTILE_:
			case PERCENT_RANK_:
			case RANK_:
			case ROW_NUMBER_:
			case GENERATED_:
			case ALWAYS_:
			case STORED_:
			case TRUE_:
			case FALSE_:
			case WINDOW_:
			case NULLS_:
			case FIRST_:
			case LAST_:
			case FILTER_:
			case GROUPS_:
			case EXCLUDE_:
			case IDENTIFIER:
			case NUMERIC_LITERAL:
			case BIND_PARAMETER:
			case STRING_LITERAL:
			case BLOB_LITERAL:
				{
				State = 1770; expr(0);
				State = 1775;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1771; Match(COMMA);
					State = 1772; expr(0);
					}
					}
					State = 1777;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case STAR:
				{
				State = 1778; Match(STAR);
				}
				break;
			case CLOSE_PAR:
				break;
			default:
				break;
			}
			State = 1781; Match(CLOSE_PAR);
			State = 1783;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FILTER_) {
				{
				State = 1782; filter_clause();
				}
			}

			State = 1785; Match(OVER_);
			State = 1788;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,267,Context) ) {
			case 1:
				{
				State = 1786; window_defn();
				}
				break;
			case 2:
				{
				State = 1787; window_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_table_stmtContext : ParserRuleContext {
		public ITerminalNode WITH_() { return GetToken(SQLiteParser.WITH_, 0); }
		public Common_table_expressionContext[] common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		public ITerminalNode RECURSIVE_() { return GetToken(SQLiteParser.RECURSIVE_, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Common_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterCommon_table_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitCommon_table_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_stmtContext common_table_stmt() {
		Common_table_stmtContext _localctx = new Common_table_stmtContext(Context, State);
		EnterRule(_localctx, 134, RULE_common_table_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1790; Match(WITH_);
			State = 1792;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,268,Context) ) {
			case 1:
				{
				State = 1791; Match(RECURSIVE_);
				}
				break;
			}
			State = 1794; common_table_expression();
			State = 1799;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1795; Match(COMMA);
				State = 1796; common_table_expression();
				}
				}
				State = 1801;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_stmtContext : ParserRuleContext {
		public ITerminalNode ORDER_() { return GetToken(SQLiteParser.ORDER_, 0); }
		public ITerminalNode BY_() { return GetToken(SQLiteParser.BY_, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Order_by_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_stmtContext order_by_stmt() {
		Order_by_stmtContext _localctx = new Order_by_stmtContext(Context, State);
		EnterRule(_localctx, 136, RULE_order_by_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1802; Match(ORDER_);
			State = 1803; Match(BY_);
			State = 1804; ordering_term();
			State = 1809;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1805; Match(COMMA);
				State = 1806; ordering_term();
				}
				}
				State = 1811;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Limit_stmtContext : ParserRuleContext {
		public ITerminalNode LIMIT_() { return GetToken(SQLiteParser.LIMIT_, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode OFFSET_() { return GetToken(SQLiteParser.OFFSET_, 0); }
		public ITerminalNode COMMA() { return GetToken(SQLiteParser.COMMA, 0); }
		public Limit_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterLimit_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitLimit_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Limit_stmtContext limit_stmt() {
		Limit_stmtContext _localctx = new Limit_stmtContext(Context, State);
		EnterRule(_localctx, 138, RULE_limit_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1812; Match(LIMIT_);
			State = 1813; expr(0);
			State = 1816;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA || _la==OFFSET_) {
				{
				State = 1814;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMA || _la==OFFSET_) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1815; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ordering_termContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode COLLATE_() { return GetToken(SQLiteParser.COLLATE_, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public Asc_descContext asc_desc() {
			return GetRuleContext<Asc_descContext>(0);
		}
		public ITerminalNode NULLS_() { return GetToken(SQLiteParser.NULLS_, 0); }
		public ITerminalNode FIRST_() { return GetToken(SQLiteParser.FIRST_, 0); }
		public ITerminalNode LAST_() { return GetToken(SQLiteParser.LAST_, 0); }
		public Ordering_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterOrdering_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitOrdering_term(this);
		}
	}

	[RuleVersion(0)]
	public Ordering_termContext ordering_term() {
		Ordering_termContext _localctx = new Ordering_termContext(Context, State);
		EnterRule(_localctx, 140, RULE_ordering_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1818; expr(0);
			State = 1821;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLLATE_) {
				{
				State = 1819; Match(COLLATE_);
				State = 1820; collation_name();
				}
			}

			State = 1824;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC_ || _la==DESC_) {
				{
				State = 1823; asc_desc();
				}
			}

			State = 1828;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NULLS_) {
				{
				State = 1826; Match(NULLS_);
				State = 1827;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_ || _la==LAST_) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asc_descContext : ParserRuleContext {
		public ITerminalNode ASC_() { return GetToken(SQLiteParser.ASC_, 0); }
		public ITerminalNode DESC_() { return GetToken(SQLiteParser.DESC_, 0); }
		public Asc_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asc_desc; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterAsc_desc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitAsc_desc(this);
		}
	}

	[RuleVersion(0)]
	public Asc_descContext asc_desc() {
		Asc_descContext _localctx = new Asc_descContext(Context, State);
		EnterRule(_localctx, 142, RULE_asc_desc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1830;
			_la = TokenStream.LA(1);
			if ( !(_la==ASC_ || _la==DESC_) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_leftContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PRECEDING_() { return GetToken(SQLiteParser.PRECEDING_, 0); }
		public ITerminalNode FOLLOWING_() { return GetToken(SQLiteParser.FOLLOWING_, 0); }
		public ITerminalNode CURRENT_() { return GetToken(SQLiteParser.CURRENT_, 0); }
		public ITerminalNode ROW_() { return GetToken(SQLiteParser.ROW_, 0); }
		public ITerminalNode UNBOUNDED_() { return GetToken(SQLiteParser.UNBOUNDED_, 0); }
		public Frame_leftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_left; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterFrame_left(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitFrame_left(this);
		}
	}

	[RuleVersion(0)]
	public Frame_leftContext frame_left() {
		Frame_leftContext _localctx = new Frame_leftContext(Context, State);
		EnterRule(_localctx, 144, RULE_frame_left);
		try {
			State = 1842;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,275,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1832; expr(0);
				State = 1833; Match(PRECEDING_);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1835; expr(0);
				State = 1836; Match(FOLLOWING_);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1838; Match(CURRENT_);
				State = 1839; Match(ROW_);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1840; Match(UNBOUNDED_);
				State = 1841; Match(PRECEDING_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_rightContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PRECEDING_() { return GetToken(SQLiteParser.PRECEDING_, 0); }
		public ITerminalNode FOLLOWING_() { return GetToken(SQLiteParser.FOLLOWING_, 0); }
		public ITerminalNode CURRENT_() { return GetToken(SQLiteParser.CURRENT_, 0); }
		public ITerminalNode ROW_() { return GetToken(SQLiteParser.ROW_, 0); }
		public ITerminalNode UNBOUNDED_() { return GetToken(SQLiteParser.UNBOUNDED_, 0); }
		public Frame_rightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_right; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterFrame_right(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitFrame_right(this);
		}
	}

	[RuleVersion(0)]
	public Frame_rightContext frame_right() {
		Frame_rightContext _localctx = new Frame_rightContext(Context, State);
		EnterRule(_localctx, 146, RULE_frame_right);
		try {
			State = 1854;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1844; expr(0);
				State = 1845; Match(PRECEDING_);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1847; expr(0);
				State = 1848; Match(FOLLOWING_);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1850; Match(CURRENT_);
				State = 1851; Match(ROW_);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1852; Match(UNBOUNDED_);
				State = 1853; Match(FOLLOWING_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_singleContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PRECEDING_() { return GetToken(SQLiteParser.PRECEDING_, 0); }
		public ITerminalNode UNBOUNDED_() { return GetToken(SQLiteParser.UNBOUNDED_, 0); }
		public ITerminalNode CURRENT_() { return GetToken(SQLiteParser.CURRENT_, 0); }
		public ITerminalNode ROW_() { return GetToken(SQLiteParser.ROW_, 0); }
		public Frame_singleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_single; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterFrame_single(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitFrame_single(this);
		}
	}

	[RuleVersion(0)]
	public Frame_singleContext frame_single() {
		Frame_singleContext _localctx = new Frame_singleContext(Context, State);
		EnterRule(_localctx, 148, RULE_frame_single);
		try {
			State = 1863;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,277,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1856; expr(0);
				State = 1857; Match(PRECEDING_);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1859; Match(UNBOUNDED_);
				State = 1860; Match(PRECEDING_);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1861; Match(CURRENT_);
				State = 1862; Match(ROW_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_functionContext : ParserRuleContext {
		public ITerminalNode[] OPEN_PAR() { return GetTokens(SQLiteParser.OPEN_PAR); }
		public ITerminalNode OPEN_PAR(int i) {
			return GetToken(SQLiteParser.OPEN_PAR, i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode[] CLOSE_PAR() { return GetTokens(SQLiteParser.CLOSE_PAR); }
		public ITerminalNode CLOSE_PAR(int i) {
			return GetToken(SQLiteParser.CLOSE_PAR, i);
		}
		public ITerminalNode OVER_() { return GetToken(SQLiteParser.OVER_, 0); }
		public Order_by_expr_asc_descContext order_by_expr_asc_desc() {
			return GetRuleContext<Order_by_expr_asc_descContext>(0);
		}
		public ITerminalNode FIRST_VALUE_() { return GetToken(SQLiteParser.FIRST_VALUE_, 0); }
		public ITerminalNode LAST_VALUE_() { return GetToken(SQLiteParser.LAST_VALUE_, 0); }
		public Partition_byContext partition_by() {
			return GetRuleContext<Partition_byContext>(0);
		}
		public Frame_clauseContext frame_clause() {
			return GetRuleContext<Frame_clauseContext>(0);
		}
		public ITerminalNode CUME_DIST_() { return GetToken(SQLiteParser.CUME_DIST_, 0); }
		public ITerminalNode PERCENT_RANK_() { return GetToken(SQLiteParser.PERCENT_RANK_, 0); }
		public Order_by_exprContext order_by_expr() {
			return GetRuleContext<Order_by_exprContext>(0);
		}
		public ITerminalNode DENSE_RANK_() { return GetToken(SQLiteParser.DENSE_RANK_, 0); }
		public ITerminalNode RANK_() { return GetToken(SQLiteParser.RANK_, 0); }
		public ITerminalNode ROW_NUMBER_() { return GetToken(SQLiteParser.ROW_NUMBER_, 0); }
		public ITerminalNode LAG_() { return GetToken(SQLiteParser.LAG_, 0); }
		public ITerminalNode LEAD_() { return GetToken(SQLiteParser.LEAD_, 0); }
		public OffsetContext offset() {
			return GetRuleContext<OffsetContext>(0);
		}
		public Default_valueContext default_value() {
			return GetRuleContext<Default_valueContext>(0);
		}
		public ITerminalNode NTH_VALUE_() { return GetToken(SQLiteParser.NTH_VALUE_, 0); }
		public ITerminalNode COMMA() { return GetToken(SQLiteParser.COMMA, 0); }
		public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		public ITerminalNode NTILE_() { return GetToken(SQLiteParser.NTILE_, 0); }
		public Window_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterWindow_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitWindow_function(this);
		}
	}

	[RuleVersion(0)]
	public Window_functionContext window_function() {
		Window_functionContext _localctx = new Window_functionContext(Context, State);
		EnterRule(_localctx, 150, RULE_window_function);
		int _la;
		try {
			State = 1950;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FIRST_VALUE_:
			case LAST_VALUE_:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1865;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_VALUE_ || _la==LAST_VALUE_) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1866; Match(OPEN_PAR);
				State = 1867; expr(0);
				State = 1868; Match(CLOSE_PAR);
				State = 1869; Match(OVER_);
				State = 1870; Match(OPEN_PAR);
				State = 1872;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION_) {
					{
					State = 1871; partition_by();
					}
				}

				State = 1874; order_by_expr_asc_desc();
				State = 1876;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ROWS_ - 128)) | (1L << (RANGE_ - 128)) | (1L << (GROUPS_ - 128)))) != 0)) {
					{
					State = 1875; frame_clause();
					}
				}

				State = 1878; Match(CLOSE_PAR);
				}
				break;
			case CUME_DIST_:
			case PERCENT_RANK_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1880;
				_la = TokenStream.LA(1);
				if ( !(_la==CUME_DIST_ || _la==PERCENT_RANK_) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1881; Match(OPEN_PAR);
				State = 1882; Match(CLOSE_PAR);
				State = 1883; Match(OVER_);
				State = 1884; Match(OPEN_PAR);
				State = 1886;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION_) {
					{
					State = 1885; partition_by();
					}
				}

				State = 1889;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER_) {
					{
					State = 1888; order_by_expr();
					}
				}

				State = 1891; Match(CLOSE_PAR);
				}
				break;
			case DENSE_RANK_:
			case RANK_:
			case ROW_NUMBER_:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1892;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (DENSE_RANK_ - 160)) | (1L << (RANK_ - 160)) | (1L << (ROW_NUMBER_ - 160)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1893; Match(OPEN_PAR);
				State = 1894; Match(CLOSE_PAR);
				State = 1895; Match(OVER_);
				State = 1896; Match(OPEN_PAR);
				State = 1898;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION_) {
					{
					State = 1897; partition_by();
					}
				}

				State = 1900; order_by_expr_asc_desc();
				State = 1901; Match(CLOSE_PAR);
				}
				break;
			case LAG_:
			case LEAD_:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1903;
				_la = TokenStream.LA(1);
				if ( !(_la==LAG_ || _la==LEAD_) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1904; Match(OPEN_PAR);
				State = 1905; expr(0);
				State = 1907;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,283,Context) ) {
				case 1:
					{
					State = 1906; offset();
					}
					break;
				}
				State = 1910;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1909; default_value();
					}
				}

				State = 1912; Match(CLOSE_PAR);
				State = 1913; Match(OVER_);
				State = 1914; Match(OPEN_PAR);
				State = 1916;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION_) {
					{
					State = 1915; partition_by();
					}
				}

				State = 1918; order_by_expr_asc_desc();
				State = 1919; Match(CLOSE_PAR);
				}
				break;
			case NTH_VALUE_:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1921; Match(NTH_VALUE_);
				State = 1922; Match(OPEN_PAR);
				State = 1923; expr(0);
				State = 1924; Match(COMMA);
				State = 1925; signed_number();
				State = 1926; Match(CLOSE_PAR);
				State = 1927; Match(OVER_);
				State = 1928; Match(OPEN_PAR);
				State = 1930;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION_) {
					{
					State = 1929; partition_by();
					}
				}

				State = 1932; order_by_expr_asc_desc();
				State = 1934;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ROWS_ - 128)) | (1L << (RANGE_ - 128)) | (1L << (GROUPS_ - 128)))) != 0)) {
					{
					State = 1933; frame_clause();
					}
				}

				State = 1936; Match(CLOSE_PAR);
				}
				break;
			case NTILE_:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1938; Match(NTILE_);
				State = 1939; Match(OPEN_PAR);
				State = 1940; expr(0);
				State = 1941; Match(CLOSE_PAR);
				State = 1942; Match(OVER_);
				State = 1943; Match(OPEN_PAR);
				State = 1945;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION_) {
					{
					State = 1944; partition_by();
					}
				}

				State = 1947; order_by_expr_asc_desc();
				State = 1948; Match(CLOSE_PAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OffsetContext : ParserRuleContext {
		public ITerminalNode COMMA() { return GetToken(SQLiteParser.COMMA, 0); }
		public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		public OffsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_offset; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterOffset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitOffset(this);
		}
	}

	[RuleVersion(0)]
	public OffsetContext offset() {
		OffsetContext _localctx = new OffsetContext(Context, State);
		EnterRule(_localctx, 152, RULE_offset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1952; Match(COMMA);
			State = 1953; signed_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_valueContext : ParserRuleContext {
		public ITerminalNode COMMA() { return GetToken(SQLiteParser.COMMA, 0); }
		public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		public Default_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterDefault_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitDefault_value(this);
		}
	}

	[RuleVersion(0)]
	public Default_valueContext default_value() {
		Default_valueContext _localctx = new Default_valueContext(Context, State);
		EnterRule(_localctx, 154, RULE_default_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1955; Match(COMMA);
			State = 1956; signed_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_byContext : ParserRuleContext {
		public ITerminalNode PARTITION_() { return GetToken(SQLiteParser.PARTITION_, 0); }
		public ITerminalNode BY_() { return GetToken(SQLiteParser.BY_, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Partition_byContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_by; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterPartition_by(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitPartition_by(this);
		}
	}

	[RuleVersion(0)]
	public Partition_byContext partition_by() {
		Partition_byContext _localctx = new Partition_byContext(Context, State);
		EnterRule(_localctx, 156, RULE_partition_by);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1958; Match(PARTITION_);
			State = 1959; Match(BY_);
			State = 1961;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1960; expr(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1963;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,290,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_exprContext : ParserRuleContext {
		public ITerminalNode ORDER_() { return GetToken(SQLiteParser.ORDER_, 0); }
		public ITerminalNode BY_() { return GetToken(SQLiteParser.BY_, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Order_by_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_expr(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_exprContext order_by_expr() {
		Order_by_exprContext _localctx = new Order_by_exprContext(Context, State);
		EnterRule(_localctx, 158, RULE_order_by_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1965; Match(ORDER_);
			State = 1966; Match(BY_);
			State = 1968;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1967; expr(0);
				}
				}
				State = 1970;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPEN_PAR) | (1L << PLUS) | (1L << MINUS) | (1L << TILDE) | (1L << ABORT_) | (1L << ACTION_) | (1L << ADD_) | (1L << AFTER_) | (1L << ALL_) | (1L << ALTER_) | (1L << ANALYZE_) | (1L << AND_) | (1L << AS_) | (1L << ASC_) | (1L << ATTACH_) | (1L << AUTOINCREMENT_) | (1L << BEFORE_) | (1L << BEGIN_) | (1L << BETWEEN_) | (1L << BY_) | (1L << CASCADE_) | (1L << CASE_) | (1L << CAST_) | (1L << CHECK_) | (1L << COLLATE_) | (1L << COLUMN_) | (1L << COMMIT_) | (1L << CONFLICT_) | (1L << CONSTRAINT_) | (1L << CREATE_) | (1L << CROSS_) | (1L << CURRENT_DATE_) | (1L << CURRENT_TIME_) | (1L << CURRENT_TIMESTAMP_) | (1L << DATABASE_) | (1L << DEFAULT_) | (1L << DEFERRABLE_) | (1L << DEFERRED_) | (1L << DELETE_) | (1L << DESC_) | (1L << DETACH_) | (1L << DISTINCT_) | (1L << DROP_))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EACH_ - 64)) | (1L << (ELSE_ - 64)) | (1L << (END_ - 64)) | (1L << (ESCAPE_ - 64)) | (1L << (EXCEPT_ - 64)) | (1L << (EXCLUSIVE_ - 64)) | (1L << (EXISTS_ - 64)) | (1L << (EXPLAIN_ - 64)) | (1L << (FAIL_ - 64)) | (1L << (FOR_ - 64)) | (1L << (FOREIGN_ - 64)) | (1L << (FROM_ - 64)) | (1L << (FULL_ - 64)) | (1L << (GLOB_ - 64)) | (1L << (GROUP_ - 64)) | (1L << (HAVING_ - 64)) | (1L << (IF_ - 64)) | (1L << (IGNORE_ - 64)) | (1L << (IMMEDIATE_ - 64)) | (1L << (IN_ - 64)) | (1L << (INDEX_ - 64)) | (1L << (INDEXED_ - 64)) | (1L << (INITIALLY_ - 64)) | (1L << (INNER_ - 64)) | (1L << (INSERT_ - 64)) | (1L << (INSTEAD_ - 64)) | (1L << (INTERSECT_ - 64)) | (1L << (INTO_ - 64)) | (1L << (IS_ - 64)) | (1L << (ISNULL_ - 64)) | (1L << (JOIN_ - 64)) | (1L << (KEY_ - 64)) | (1L << (LEFT_ - 64)) | (1L << (LIKE_ - 64)) | (1L << (LIMIT_ - 64)) | (1L << (MATCH_ - 64)) | (1L << (NATURAL_ - 64)) | (1L << (NO_ - 64)) | (1L << (NOT_ - 64)) | (1L << (NOTNULL_ - 64)) | (1L << (NULL_ - 64)) | (1L << (OF_ - 64)) | (1L << (OFFSET_ - 64)) | (1L << (ON_ - 64)) | (1L << (OR_ - 64)) | (1L << (ORDER_ - 64)) | (1L << (OUTER_ - 64)) | (1L << (PLAN_ - 64)) | (1L << (PRAGMA_ - 64)) | (1L << (PRIMARY_ - 64)) | (1L << (QUERY_ - 64)) | (1L << (RAISE_ - 64)) | (1L << (RECURSIVE_ - 64)) | (1L << (REFERENCES_ - 64)) | (1L << (REGEXP_ - 64)) | (1L << (REINDEX_ - 64)) | (1L << (RELEASE_ - 64)) | (1L << (RENAME_ - 64)) | (1L << (REPLACE_ - 64)) | (1L << (RESTRICT_ - 64)) | (1L << (RIGHT_ - 64)) | (1L << (ROLLBACK_ - 64)) | (1L << (ROW_ - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ROWS_ - 128)) | (1L << (SAVEPOINT_ - 128)) | (1L << (SELECT_ - 128)) | (1L << (SET_ - 128)) | (1L << (TABLE_ - 128)) | (1L << (TEMP_ - 128)) | (1L << (TEMPORARY_ - 128)) | (1L << (THEN_ - 128)) | (1L << (TO_ - 128)) | (1L << (TRANSACTION_ - 128)) | (1L << (TRIGGER_ - 128)) | (1L << (UNION_ - 128)) | (1L << (UNIQUE_ - 128)) | (1L << (UPDATE_ - 128)) | (1L << (USING_ - 128)) | (1L << (VACUUM_ - 128)) | (1L << (VALUES_ - 128)) | (1L << (VIEW_ - 128)) | (1L << (VIRTUAL_ - 128)) | (1L << (WHEN_ - 128)) | (1L << (WHERE_ - 128)) | (1L << (WITH_ - 128)) | (1L << (WITHOUT_ - 128)) | (1L << (FIRST_VALUE_ - 128)) | (1L << (OVER_ - 128)) | (1L << (PARTITION_ - 128)) | (1L << (RANGE_ - 128)) | (1L << (PRECEDING_ - 128)) | (1L << (UNBOUNDED_ - 128)) | (1L << (CURRENT_ - 128)) | (1L << (FOLLOWING_ - 128)) | (1L << (CUME_DIST_ - 128)) | (1L << (DENSE_RANK_ - 128)) | (1L << (LAG_ - 128)) | (1L << (LAST_VALUE_ - 128)) | (1L << (LEAD_ - 128)) | (1L << (NTH_VALUE_ - 128)) | (1L << (NTILE_ - 128)) | (1L << (PERCENT_RANK_ - 128)) | (1L << (RANK_ - 128)) | (1L << (ROW_NUMBER_ - 128)) | (1L << (GENERATED_ - 128)) | (1L << (ALWAYS_ - 128)) | (1L << (STORED_ - 128)) | (1L << (TRUE_ - 128)) | (1L << (FALSE_ - 128)) | (1L << (WINDOW_ - 128)) | (1L << (NULLS_ - 128)) | (1L << (FIRST_ - 128)) | (1L << (LAST_ - 128)) | (1L << (FILTER_ - 128)) | (1L << (GROUPS_ - 128)) | (1L << (EXCLUDE_ - 128)) | (1L << (IDENTIFIER - 128)) | (1L << (NUMERIC_LITERAL - 128)) | (1L << (BIND_PARAMETER - 128)) | (1L << (STRING_LITERAL - 128)) | (1L << (BLOB_LITERAL - 128)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_expr_asc_descContext : ParserRuleContext {
		public ITerminalNode ORDER_() { return GetToken(SQLiteParser.ORDER_, 0); }
		public ITerminalNode BY_() { return GetToken(SQLiteParser.BY_, 0); }
		public Expr_asc_descContext expr_asc_desc() {
			return GetRuleContext<Expr_asc_descContext>(0);
		}
		public Order_by_expr_asc_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_expr_asc_desc; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_expr_asc_desc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_expr_asc_desc(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_expr_asc_descContext order_by_expr_asc_desc() {
		Order_by_expr_asc_descContext _localctx = new Order_by_expr_asc_descContext(Context, State);
		EnterRule(_localctx, 160, RULE_order_by_expr_asc_desc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1972; Match(ORDER_);
			State = 1973; Match(BY_);
			State = 1974; expr_asc_desc();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_asc_descContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Asc_descContext[] asc_desc() {
			return GetRuleContexts<Asc_descContext>();
		}
		public Asc_descContext asc_desc(int i) {
			return GetRuleContext<Asc_descContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Expr_asc_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_asc_desc; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterExpr_asc_desc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitExpr_asc_desc(this);
		}
	}

	[RuleVersion(0)]
	public Expr_asc_descContext expr_asc_desc() {
		Expr_asc_descContext _localctx = new Expr_asc_descContext(Context, State);
		EnterRule(_localctx, 162, RULE_expr_asc_desc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1976; expr(0);
			State = 1978;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC_ || _la==DESC_) {
				{
				State = 1977; asc_desc();
				}
			}

			State = 1987;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1980; Match(COMMA);
				State = 1981; expr(0);
				State = 1983;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC_ || _la==DESC_) {
					{
					State = 1982; asc_desc();
					}
				}

				}
				}
				State = 1989;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initial_selectContext : ParserRuleContext {
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Initial_selectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initial_select; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterInitial_select(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitInitial_select(this);
		}
	}

	[RuleVersion(0)]
	public Initial_selectContext initial_select() {
		Initial_selectContext _localctx = new Initial_selectContext(Context, State);
		EnterRule(_localctx, 164, RULE_initial_select);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1990; select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recursive_selectContext : ParserRuleContext {
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Recursive_selectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recursive_select; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterRecursive_select(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitRecursive_select(this);
		}
	}

	[RuleVersion(0)]
	public Recursive_selectContext recursive_select() {
		Recursive_selectContext _localctx = new Recursive_selectContext(Context, State);
		EnterRule(_localctx, 166, RULE_recursive_select);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1992; select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		public ITerminalNode MINUS() { return GetToken(SQLiteParser.MINUS, 0); }
		public ITerminalNode PLUS() { return GetToken(SQLiteParser.PLUS, 0); }
		public ITerminalNode TILDE() { return GetToken(SQLiteParser.TILDE, 0); }
		public ITerminalNode NOT_() { return GetToken(SQLiteParser.NOT_, 0); }
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterUnary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitUnary_operator(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(Context, State);
		EnterRule(_localctx, 168, RULE_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1994;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << TILDE))) != 0) || _la==NOT_) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Error_messageContext : ParserRuleContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		public Error_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error_message; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterError_message(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitError_message(this);
		}
	}

	[RuleVersion(0)]
	public Error_messageContext error_message() {
		Error_messageContext _localctx = new Error_messageContext(Context, State);
		EnterRule(_localctx, 170, RULE_error_message);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1996; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_argumentContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Column_defContext column_def() {
			return GetRuleContext<Column_defContext>(0);
		}
		public Module_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterModule_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitModule_argument(this);
		}
	}

	[RuleVersion(0)]
	public Module_argumentContext module_argument() {
		Module_argumentContext _localctx = new Module_argumentContext(Context, State);
		EnterRule(_localctx, 172, RULE_module_argument);
		try {
			State = 2000;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,295,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1998; expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1999; column_def();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SQLiteParser.IDENTIFIER, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterColumn_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitColumn_alias(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(Context, State);
		EnterRule(_localctx, 174, RULE_column_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2002;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==STRING_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode ABORT_() { return GetToken(SQLiteParser.ABORT_, 0); }
		public ITerminalNode ACTION_() { return GetToken(SQLiteParser.ACTION_, 0); }
		public ITerminalNode ADD_() { return GetToken(SQLiteParser.ADD_, 0); }
		public ITerminalNode AFTER_() { return GetToken(SQLiteParser.AFTER_, 0); }
		public ITerminalNode ALL_() { return GetToken(SQLiteParser.ALL_, 0); }
		public ITerminalNode ALTER_() { return GetToken(SQLiteParser.ALTER_, 0); }
		public ITerminalNode ANALYZE_() { return GetToken(SQLiteParser.ANALYZE_, 0); }
		public ITerminalNode AND_() { return GetToken(SQLiteParser.AND_, 0); }
		public ITerminalNode AS_() { return GetToken(SQLiteParser.AS_, 0); }
		public ITerminalNode ASC_() { return GetToken(SQLiteParser.ASC_, 0); }
		public ITerminalNode ATTACH_() { return GetToken(SQLiteParser.ATTACH_, 0); }
		public ITerminalNode AUTOINCREMENT_() { return GetToken(SQLiteParser.AUTOINCREMENT_, 0); }
		public ITerminalNode BEFORE_() { return GetToken(SQLiteParser.BEFORE_, 0); }
		public ITerminalNode BEGIN_() { return GetToken(SQLiteParser.BEGIN_, 0); }
		public ITerminalNode BETWEEN_() { return GetToken(SQLiteParser.BETWEEN_, 0); }
		public ITerminalNode BY_() { return GetToken(SQLiteParser.BY_, 0); }
		public ITerminalNode CASCADE_() { return GetToken(SQLiteParser.CASCADE_, 0); }
		public ITerminalNode CASE_() { return GetToken(SQLiteParser.CASE_, 0); }
		public ITerminalNode CAST_() { return GetToken(SQLiteParser.CAST_, 0); }
		public ITerminalNode CHECK_() { return GetToken(SQLiteParser.CHECK_, 0); }
		public ITerminalNode COLLATE_() { return GetToken(SQLiteParser.COLLATE_, 0); }
		public ITerminalNode COLUMN_() { return GetToken(SQLiteParser.COLUMN_, 0); }
		public ITerminalNode COMMIT_() { return GetToken(SQLiteParser.COMMIT_, 0); }
		public ITerminalNode CONFLICT_() { return GetToken(SQLiteParser.CONFLICT_, 0); }
		public ITerminalNode CONSTRAINT_() { return GetToken(SQLiteParser.CONSTRAINT_, 0); }
		public ITerminalNode CREATE_() { return GetToken(SQLiteParser.CREATE_, 0); }
		public ITerminalNode CROSS_() { return GetToken(SQLiteParser.CROSS_, 0); }
		public ITerminalNode CURRENT_DATE_() { return GetToken(SQLiteParser.CURRENT_DATE_, 0); }
		public ITerminalNode CURRENT_TIME_() { return GetToken(SQLiteParser.CURRENT_TIME_, 0); }
		public ITerminalNode CURRENT_TIMESTAMP_() { return GetToken(SQLiteParser.CURRENT_TIMESTAMP_, 0); }
		public ITerminalNode DATABASE_() { return GetToken(SQLiteParser.DATABASE_, 0); }
		public ITerminalNode DEFAULT_() { return GetToken(SQLiteParser.DEFAULT_, 0); }
		public ITerminalNode DEFERRABLE_() { return GetToken(SQLiteParser.DEFERRABLE_, 0); }
		public ITerminalNode DEFERRED_() { return GetToken(SQLiteParser.DEFERRED_, 0); }
		public ITerminalNode DELETE_() { return GetToken(SQLiteParser.DELETE_, 0); }
		public ITerminalNode DESC_() { return GetToken(SQLiteParser.DESC_, 0); }
		public ITerminalNode DETACH_() { return GetToken(SQLiteParser.DETACH_, 0); }
		public ITerminalNode DISTINCT_() { return GetToken(SQLiteParser.DISTINCT_, 0); }
		public ITerminalNode DROP_() { return GetToken(SQLiteParser.DROP_, 0); }
		public ITerminalNode EACH_() { return GetToken(SQLiteParser.EACH_, 0); }
		public ITerminalNode ELSE_() { return GetToken(SQLiteParser.ELSE_, 0); }
		public ITerminalNode END_() { return GetToken(SQLiteParser.END_, 0); }
		public ITerminalNode ESCAPE_() { return GetToken(SQLiteParser.ESCAPE_, 0); }
		public ITerminalNode EXCEPT_() { return GetToken(SQLiteParser.EXCEPT_, 0); }
		public ITerminalNode EXCLUSIVE_() { return GetToken(SQLiteParser.EXCLUSIVE_, 0); }
		public ITerminalNode EXISTS_() { return GetToken(SQLiteParser.EXISTS_, 0); }
		public ITerminalNode EXPLAIN_() { return GetToken(SQLiteParser.EXPLAIN_, 0); }
		public ITerminalNode FAIL_() { return GetToken(SQLiteParser.FAIL_, 0); }
		public ITerminalNode FOR_() { return GetToken(SQLiteParser.FOR_, 0); }
		public ITerminalNode FOREIGN_() { return GetToken(SQLiteParser.FOREIGN_, 0); }
		public ITerminalNode FROM_() { return GetToken(SQLiteParser.FROM_, 0); }
		public ITerminalNode FULL_() { return GetToken(SQLiteParser.FULL_, 0); }
		public ITerminalNode GLOB_() { return GetToken(SQLiteParser.GLOB_, 0); }
		public ITerminalNode GROUP_() { return GetToken(SQLiteParser.GROUP_, 0); }
		public ITerminalNode HAVING_() { return GetToken(SQLiteParser.HAVING_, 0); }
		public ITerminalNode IF_() { return GetToken(SQLiteParser.IF_, 0); }
		public ITerminalNode IGNORE_() { return GetToken(SQLiteParser.IGNORE_, 0); }
		public ITerminalNode IMMEDIATE_() { return GetToken(SQLiteParser.IMMEDIATE_, 0); }
		public ITerminalNode IN_() { return GetToken(SQLiteParser.IN_, 0); }
		public ITerminalNode INDEX_() { return GetToken(SQLiteParser.INDEX_, 0); }
		public ITerminalNode INDEXED_() { return GetToken(SQLiteParser.INDEXED_, 0); }
		public ITerminalNode INITIALLY_() { return GetToken(SQLiteParser.INITIALLY_, 0); }
		public ITerminalNode INNER_() { return GetToken(SQLiteParser.INNER_, 0); }
		public ITerminalNode INSERT_() { return GetToken(SQLiteParser.INSERT_, 0); }
		public ITerminalNode INSTEAD_() { return GetToken(SQLiteParser.INSTEAD_, 0); }
		public ITerminalNode INTERSECT_() { return GetToken(SQLiteParser.INTERSECT_, 0); }
		public ITerminalNode INTO_() { return GetToken(SQLiteParser.INTO_, 0); }
		public ITerminalNode IS_() { return GetToken(SQLiteParser.IS_, 0); }
		public ITerminalNode ISNULL_() { return GetToken(SQLiteParser.ISNULL_, 0); }
		public ITerminalNode JOIN_() { return GetToken(SQLiteParser.JOIN_, 0); }
		public ITerminalNode KEY_() { return GetToken(SQLiteParser.KEY_, 0); }
		public ITerminalNode LEFT_() { return GetToken(SQLiteParser.LEFT_, 0); }
		public ITerminalNode LIKE_() { return GetToken(SQLiteParser.LIKE_, 0); }
		public ITerminalNode LIMIT_() { return GetToken(SQLiteParser.LIMIT_, 0); }
		public ITerminalNode MATCH_() { return GetToken(SQLiteParser.MATCH_, 0); }
		public ITerminalNode NATURAL_() { return GetToken(SQLiteParser.NATURAL_, 0); }
		public ITerminalNode NO_() { return GetToken(SQLiteParser.NO_, 0); }
		public ITerminalNode NOT_() { return GetToken(SQLiteParser.NOT_, 0); }
		public ITerminalNode NOTNULL_() { return GetToken(SQLiteParser.NOTNULL_, 0); }
		public ITerminalNode NULL_() { return GetToken(SQLiteParser.NULL_, 0); }
		public ITerminalNode OF_() { return GetToken(SQLiteParser.OF_, 0); }
		public ITerminalNode OFFSET_() { return GetToken(SQLiteParser.OFFSET_, 0); }
		public ITerminalNode ON_() { return GetToken(SQLiteParser.ON_, 0); }
		public ITerminalNode OR_() { return GetToken(SQLiteParser.OR_, 0); }
		public ITerminalNode ORDER_() { return GetToken(SQLiteParser.ORDER_, 0); }
		public ITerminalNode OUTER_() { return GetToken(SQLiteParser.OUTER_, 0); }
		public ITerminalNode PLAN_() { return GetToken(SQLiteParser.PLAN_, 0); }
		public ITerminalNode PRAGMA_() { return GetToken(SQLiteParser.PRAGMA_, 0); }
		public ITerminalNode PRIMARY_() { return GetToken(SQLiteParser.PRIMARY_, 0); }
		public ITerminalNode QUERY_() { return GetToken(SQLiteParser.QUERY_, 0); }
		public ITerminalNode RAISE_() { return GetToken(SQLiteParser.RAISE_, 0); }
		public ITerminalNode RECURSIVE_() { return GetToken(SQLiteParser.RECURSIVE_, 0); }
		public ITerminalNode REFERENCES_() { return GetToken(SQLiteParser.REFERENCES_, 0); }
		public ITerminalNode REGEXP_() { return GetToken(SQLiteParser.REGEXP_, 0); }
		public ITerminalNode REINDEX_() { return GetToken(SQLiteParser.REINDEX_, 0); }
		public ITerminalNode RELEASE_() { return GetToken(SQLiteParser.RELEASE_, 0); }
		public ITerminalNode RENAME_() { return GetToken(SQLiteParser.RENAME_, 0); }
		public ITerminalNode REPLACE_() { return GetToken(SQLiteParser.REPLACE_, 0); }
		public ITerminalNode RESTRICT_() { return GetToken(SQLiteParser.RESTRICT_, 0); }
		public ITerminalNode RIGHT_() { return GetToken(SQLiteParser.RIGHT_, 0); }
		public ITerminalNode ROLLBACK_() { return GetToken(SQLiteParser.ROLLBACK_, 0); }
		public ITerminalNode ROW_() { return GetToken(SQLiteParser.ROW_, 0); }
		public ITerminalNode ROWS_() { return GetToken(SQLiteParser.ROWS_, 0); }
		public ITerminalNode SAVEPOINT_() { return GetToken(SQLiteParser.SAVEPOINT_, 0); }
		public ITerminalNode SELECT_() { return GetToken(SQLiteParser.SELECT_, 0); }
		public ITerminalNode SET_() { return GetToken(SQLiteParser.SET_, 0); }
		public ITerminalNode TABLE_() { return GetToken(SQLiteParser.TABLE_, 0); }
		public ITerminalNode TEMP_() { return GetToken(SQLiteParser.TEMP_, 0); }
		public ITerminalNode TEMPORARY_() { return GetToken(SQLiteParser.TEMPORARY_, 0); }
		public ITerminalNode THEN_() { return GetToken(SQLiteParser.THEN_, 0); }
		public ITerminalNode TO_() { return GetToken(SQLiteParser.TO_, 0); }
		public ITerminalNode TRANSACTION_() { return GetToken(SQLiteParser.TRANSACTION_, 0); }
		public ITerminalNode TRIGGER_() { return GetToken(SQLiteParser.TRIGGER_, 0); }
		public ITerminalNode UNION_() { return GetToken(SQLiteParser.UNION_, 0); }
		public ITerminalNode UNIQUE_() { return GetToken(SQLiteParser.UNIQUE_, 0); }
		public ITerminalNode UPDATE_() { return GetToken(SQLiteParser.UPDATE_, 0); }
		public ITerminalNode USING_() { return GetToken(SQLiteParser.USING_, 0); }
		public ITerminalNode VACUUM_() { return GetToken(SQLiteParser.VACUUM_, 0); }
		public ITerminalNode VALUES_() { return GetToken(SQLiteParser.VALUES_, 0); }
		public ITerminalNode VIEW_() { return GetToken(SQLiteParser.VIEW_, 0); }
		public ITerminalNode VIRTUAL_() { return GetToken(SQLiteParser.VIRTUAL_, 0); }
		public ITerminalNode WHEN_() { return GetToken(SQLiteParser.WHEN_, 0); }
		public ITerminalNode WHERE_() { return GetToken(SQLiteParser.WHERE_, 0); }
		public ITerminalNode WITH_() { return GetToken(SQLiteParser.WITH_, 0); }
		public ITerminalNode WITHOUT_() { return GetToken(SQLiteParser.WITHOUT_, 0); }
		public ITerminalNode FIRST_VALUE_() { return GetToken(SQLiteParser.FIRST_VALUE_, 0); }
		public ITerminalNode OVER_() { return GetToken(SQLiteParser.OVER_, 0); }
		public ITerminalNode PARTITION_() { return GetToken(SQLiteParser.PARTITION_, 0); }
		public ITerminalNode RANGE_() { return GetToken(SQLiteParser.RANGE_, 0); }
		public ITerminalNode PRECEDING_() { return GetToken(SQLiteParser.PRECEDING_, 0); }
		public ITerminalNode UNBOUNDED_() { return GetToken(SQLiteParser.UNBOUNDED_, 0); }
		public ITerminalNode CURRENT_() { return GetToken(SQLiteParser.CURRENT_, 0); }
		public ITerminalNode FOLLOWING_() { return GetToken(SQLiteParser.FOLLOWING_, 0); }
		public ITerminalNode CUME_DIST_() { return GetToken(SQLiteParser.CUME_DIST_, 0); }
		public ITerminalNode DENSE_RANK_() { return GetToken(SQLiteParser.DENSE_RANK_, 0); }
		public ITerminalNode LAG_() { return GetToken(SQLiteParser.LAG_, 0); }
		public ITerminalNode LAST_VALUE_() { return GetToken(SQLiteParser.LAST_VALUE_, 0); }
		public ITerminalNode LEAD_() { return GetToken(SQLiteParser.LEAD_, 0); }
		public ITerminalNode NTH_VALUE_() { return GetToken(SQLiteParser.NTH_VALUE_, 0); }
		public ITerminalNode NTILE_() { return GetToken(SQLiteParser.NTILE_, 0); }
		public ITerminalNode PERCENT_RANK_() { return GetToken(SQLiteParser.PERCENT_RANK_, 0); }
		public ITerminalNode RANK_() { return GetToken(SQLiteParser.RANK_, 0); }
		public ITerminalNode ROW_NUMBER_() { return GetToken(SQLiteParser.ROW_NUMBER_, 0); }
		public ITerminalNode GENERATED_() { return GetToken(SQLiteParser.GENERATED_, 0); }
		public ITerminalNode ALWAYS_() { return GetToken(SQLiteParser.ALWAYS_, 0); }
		public ITerminalNode STORED_() { return GetToken(SQLiteParser.STORED_, 0); }
		public ITerminalNode TRUE_() { return GetToken(SQLiteParser.TRUE_, 0); }
		public ITerminalNode FALSE_() { return GetToken(SQLiteParser.FALSE_, 0); }
		public ITerminalNode WINDOW_() { return GetToken(SQLiteParser.WINDOW_, 0); }
		public ITerminalNode NULLS_() { return GetToken(SQLiteParser.NULLS_, 0); }
		public ITerminalNode FIRST_() { return GetToken(SQLiteParser.FIRST_, 0); }
		public ITerminalNode LAST_() { return GetToken(SQLiteParser.LAST_, 0); }
		public ITerminalNode FILTER_() { return GetToken(SQLiteParser.FILTER_, 0); }
		public ITerminalNode GROUPS_() { return GetToken(SQLiteParser.GROUPS_, 0); }
		public ITerminalNode EXCLUDE_() { return GetToken(SQLiteParser.EXCLUDE_, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 176, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2004;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT_) | (1L << ACTION_) | (1L << ADD_) | (1L << AFTER_) | (1L << ALL_) | (1L << ALTER_) | (1L << ANALYZE_) | (1L << AND_) | (1L << AS_) | (1L << ASC_) | (1L << ATTACH_) | (1L << AUTOINCREMENT_) | (1L << BEFORE_) | (1L << BEGIN_) | (1L << BETWEEN_) | (1L << BY_) | (1L << CASCADE_) | (1L << CASE_) | (1L << CAST_) | (1L << CHECK_) | (1L << COLLATE_) | (1L << COLUMN_) | (1L << COMMIT_) | (1L << CONFLICT_) | (1L << CONSTRAINT_) | (1L << CREATE_) | (1L << CROSS_) | (1L << CURRENT_DATE_) | (1L << CURRENT_TIME_) | (1L << CURRENT_TIMESTAMP_) | (1L << DATABASE_) | (1L << DEFAULT_) | (1L << DEFERRABLE_) | (1L << DEFERRED_) | (1L << DELETE_) | (1L << DESC_) | (1L << DETACH_) | (1L << DISTINCT_) | (1L << DROP_))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EACH_ - 64)) | (1L << (ELSE_ - 64)) | (1L << (END_ - 64)) | (1L << (ESCAPE_ - 64)) | (1L << (EXCEPT_ - 64)) | (1L << (EXCLUSIVE_ - 64)) | (1L << (EXISTS_ - 64)) | (1L << (EXPLAIN_ - 64)) | (1L << (FAIL_ - 64)) | (1L << (FOR_ - 64)) | (1L << (FOREIGN_ - 64)) | (1L << (FROM_ - 64)) | (1L << (FULL_ - 64)) | (1L << (GLOB_ - 64)) | (1L << (GROUP_ - 64)) | (1L << (HAVING_ - 64)) | (1L << (IF_ - 64)) | (1L << (IGNORE_ - 64)) | (1L << (IMMEDIATE_ - 64)) | (1L << (IN_ - 64)) | (1L << (INDEX_ - 64)) | (1L << (INDEXED_ - 64)) | (1L << (INITIALLY_ - 64)) | (1L << (INNER_ - 64)) | (1L << (INSERT_ - 64)) | (1L << (INSTEAD_ - 64)) | (1L << (INTERSECT_ - 64)) | (1L << (INTO_ - 64)) | (1L << (IS_ - 64)) | (1L << (ISNULL_ - 64)) | (1L << (JOIN_ - 64)) | (1L << (KEY_ - 64)) | (1L << (LEFT_ - 64)) | (1L << (LIKE_ - 64)) | (1L << (LIMIT_ - 64)) | (1L << (MATCH_ - 64)) | (1L << (NATURAL_ - 64)) | (1L << (NO_ - 64)) | (1L << (NOT_ - 64)) | (1L << (NOTNULL_ - 64)) | (1L << (NULL_ - 64)) | (1L << (OF_ - 64)) | (1L << (OFFSET_ - 64)) | (1L << (ON_ - 64)) | (1L << (OR_ - 64)) | (1L << (ORDER_ - 64)) | (1L << (OUTER_ - 64)) | (1L << (PLAN_ - 64)) | (1L << (PRAGMA_ - 64)) | (1L << (PRIMARY_ - 64)) | (1L << (QUERY_ - 64)) | (1L << (RAISE_ - 64)) | (1L << (RECURSIVE_ - 64)) | (1L << (REFERENCES_ - 64)) | (1L << (REGEXP_ - 64)) | (1L << (REINDEX_ - 64)) | (1L << (RELEASE_ - 64)) | (1L << (RENAME_ - 64)) | (1L << (REPLACE_ - 64)) | (1L << (RESTRICT_ - 64)) | (1L << (RIGHT_ - 64)) | (1L << (ROLLBACK_ - 64)) | (1L << (ROW_ - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ROWS_ - 128)) | (1L << (SAVEPOINT_ - 128)) | (1L << (SELECT_ - 128)) | (1L << (SET_ - 128)) | (1L << (TABLE_ - 128)) | (1L << (TEMP_ - 128)) | (1L << (TEMPORARY_ - 128)) | (1L << (THEN_ - 128)) | (1L << (TO_ - 128)) | (1L << (TRANSACTION_ - 128)) | (1L << (TRIGGER_ - 128)) | (1L << (UNION_ - 128)) | (1L << (UNIQUE_ - 128)) | (1L << (UPDATE_ - 128)) | (1L << (USING_ - 128)) | (1L << (VACUUM_ - 128)) | (1L << (VALUES_ - 128)) | (1L << (VIEW_ - 128)) | (1L << (VIRTUAL_ - 128)) | (1L << (WHEN_ - 128)) | (1L << (WHERE_ - 128)) | (1L << (WITH_ - 128)) | (1L << (WITHOUT_ - 128)) | (1L << (FIRST_VALUE_ - 128)) | (1L << (OVER_ - 128)) | (1L << (PARTITION_ - 128)) | (1L << (RANGE_ - 128)) | (1L << (PRECEDING_ - 128)) | (1L << (UNBOUNDED_ - 128)) | (1L << (CURRENT_ - 128)) | (1L << (FOLLOWING_ - 128)) | (1L << (CUME_DIST_ - 128)) | (1L << (DENSE_RANK_ - 128)) | (1L << (LAG_ - 128)) | (1L << (LAST_VALUE_ - 128)) | (1L << (LEAD_ - 128)) | (1L << (NTH_VALUE_ - 128)) | (1L << (NTILE_ - 128)) | (1L << (PERCENT_RANK_ - 128)) | (1L << (RANK_ - 128)) | (1L << (ROW_NUMBER_ - 128)) | (1L << (GENERATED_ - 128)) | (1L << (ALWAYS_ - 128)) | (1L << (STORED_ - 128)) | (1L << (TRUE_ - 128)) | (1L << (FALSE_ - 128)) | (1L << (WINDOW_ - 128)) | (1L << (NULLS_ - 128)) | (1L << (FIRST_ - 128)) | (1L << (LAST_ - 128)) | (1L << (FILTER_ - 128)) | (1L << (GROUPS_ - 128)) | (1L << (EXCLUDE_ - 128)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 178, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2006; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 180, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2008; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Schema_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Schema_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterSchema_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitSchema_name(this);
		}
	}

	[RuleVersion(0)]
	public Schema_nameContext schema_name() {
		Schema_nameContext _localctx = new Schema_nameContext(Context, State);
		EnterRule(_localctx, 182, RULE_schema_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2010; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterTable_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitTable_name(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(Context, State);
		EnterRule(_localctx, 184, RULE_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2012; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_or_index_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_or_index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_or_index_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterTable_or_index_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitTable_or_index_name(this);
		}
	}

	[RuleVersion(0)]
	public Table_or_index_nameContext table_or_index_name() {
		Table_or_index_nameContext _localctx = new Table_or_index_nameContext(Context, State);
		EnterRule(_localctx, 186, RULE_table_or_index_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2014; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterColumn_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitColumn_name(this);
		}
	}

	[RuleVersion(0)]
	public Column_nameContext column_name() {
		Column_nameContext _localctx = new Column_nameContext(Context, State);
		EnterRule(_localctx, 188, RULE_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2016; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collation_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Collation_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collation_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterCollation_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitCollation_name(this);
		}
	}

	[RuleVersion(0)]
	public Collation_nameContext collation_name() {
		Collation_nameContext _localctx = new Collation_nameContext(Context, State);
		EnterRule(_localctx, 190, RULE_collation_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2018; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_tableContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Foreign_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterForeign_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitForeign_table(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_tableContext foreign_table() {
		Foreign_tableContext _localctx = new Foreign_tableContext(Context, State);
		EnterRule(_localctx, 192, RULE_foreign_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2020; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterIndex_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitIndex_name(this);
		}
	}

	[RuleVersion(0)]
	public Index_nameContext index_name() {
		Index_nameContext _localctx = new Index_nameContext(Context, State);
		EnterRule(_localctx, 194, RULE_index_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2022; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trigger_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Trigger_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterTrigger_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitTrigger_name(this);
		}
	}

	[RuleVersion(0)]
	public Trigger_nameContext trigger_name() {
		Trigger_nameContext _localctx = new Trigger_nameContext(Context, State);
		EnterRule(_localctx, 196, RULE_trigger_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2024; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public View_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterView_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitView_name(this);
		}
	}

	[RuleVersion(0)]
	public View_nameContext view_name() {
		View_nameContext _localctx = new View_nameContext(Context, State);
		EnterRule(_localctx, 198, RULE_view_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2026; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Module_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterModule_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitModule_name(this);
		}
	}

	[RuleVersion(0)]
	public Module_nameContext module_name() {
		Module_nameContext _localctx = new Module_nameContext(Context, State);
		EnterRule(_localctx, 200, RULE_module_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2028; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Pragma_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterPragma_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitPragma_name(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_nameContext pragma_name() {
		Pragma_nameContext _localctx = new Pragma_nameContext(Context, State);
		EnterRule(_localctx, 202, RULE_pragma_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2030; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Savepoint_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepoint_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterSavepoint_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitSavepoint_name(this);
		}
	}

	[RuleVersion(0)]
	public Savepoint_nameContext savepoint_name() {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(Context, State);
		EnterRule(_localctx, 204, RULE_savepoint_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2032; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterTable_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitTable_alias(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(Context, State);
		EnterRule(_localctx, 206, RULE_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2034; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Transaction_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterTransaction_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitTransaction_name(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_nameContext transaction_name() {
		Transaction_nameContext _localctx = new Transaction_nameContext(Context, State);
		EnterRule(_localctx, 208, RULE_transaction_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2036; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Window_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterWindow_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitWindow_name(this);
		}
	}

	[RuleVersion(0)]
	public Window_nameContext window_name() {
		Window_nameContext _localctx = new Window_nameContext(Context, State);
		EnterRule(_localctx, 210, RULE_window_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2038; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 212, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2040; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilenameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public FilenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filename; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterFilename(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitFilename(this);
		}
	}

	[RuleVersion(0)]
	public FilenameContext filename() {
		FilenameContext _localctx = new FilenameContext(Context, State);
		EnterRule(_localctx, 214, RULE_filename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2042; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_window_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Base_window_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_window_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterBase_window_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitBase_window_name(this);
		}
	}

	[RuleVersion(0)]
	public Base_window_nameContext base_window_name() {
		Base_window_nameContext _localctx = new Base_window_nameContext(Context, State);
		EnterRule(_localctx, 216, RULE_base_window_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2044; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_funcContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Simple_funcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_func; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterSimple_func(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitSimple_func(this);
		}
	}

	[RuleVersion(0)]
	public Simple_funcContext simple_func() {
		Simple_funcContext _localctx = new Simple_funcContext(Context, State);
		EnterRule(_localctx, 218, RULE_simple_func);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2046; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_funcContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Aggregate_funcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_func; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterAggregate_func(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitAggregate_func(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_funcContext aggregate_func() {
		Aggregate_funcContext _localctx = new Aggregate_funcContext(Context, State);
		EnterRule(_localctx, 220, RULE_aggregate_func);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2048; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_function_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterTable_function_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitTable_function_name(this);
		}
	}

	[RuleVersion(0)]
	public Table_function_nameContext table_function_name() {
		Table_function_nameContext _localctx = new Table_function_nameContext(Context, State);
		EnterRule(_localctx, 222, RULE_table_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2050; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SQLiteParser.IDENTIFIER, 0); }
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public Any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterAny_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitAny_name(this);
		}
	}

	[RuleVersion(0)]
	public Any_nameContext any_name() {
		Any_nameContext _localctx = new Any_nameContext(Context, State);
		EnterRule(_localctx, 224, RULE_any_name);
		try {
			State = 2059;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2052; Match(IDENTIFIER);
				}
				break;
			case ABORT_:
			case ACTION_:
			case ADD_:
			case AFTER_:
			case ALL_:
			case ALTER_:
			case ANALYZE_:
			case AND_:
			case AS_:
			case ASC_:
			case ATTACH_:
			case AUTOINCREMENT_:
			case BEFORE_:
			case BEGIN_:
			case BETWEEN_:
			case BY_:
			case CASCADE_:
			case CASE_:
			case CAST_:
			case CHECK_:
			case COLLATE_:
			case COLUMN_:
			case COMMIT_:
			case CONFLICT_:
			case CONSTRAINT_:
			case CREATE_:
			case CROSS_:
			case CURRENT_DATE_:
			case CURRENT_TIME_:
			case CURRENT_TIMESTAMP_:
			case DATABASE_:
			case DEFAULT_:
			case DEFERRABLE_:
			case DEFERRED_:
			case DELETE_:
			case DESC_:
			case DETACH_:
			case DISTINCT_:
			case DROP_:
			case EACH_:
			case ELSE_:
			case END_:
			case ESCAPE_:
			case EXCEPT_:
			case EXCLUSIVE_:
			case EXISTS_:
			case EXPLAIN_:
			case FAIL_:
			case FOR_:
			case FOREIGN_:
			case FROM_:
			case FULL_:
			case GLOB_:
			case GROUP_:
			case HAVING_:
			case IF_:
			case IGNORE_:
			case IMMEDIATE_:
			case IN_:
			case INDEX_:
			case INDEXED_:
			case INITIALLY_:
			case INNER_:
			case INSERT_:
			case INSTEAD_:
			case INTERSECT_:
			case INTO_:
			case IS_:
			case ISNULL_:
			case JOIN_:
			case KEY_:
			case LEFT_:
			case LIKE_:
			case LIMIT_:
			case MATCH_:
			case NATURAL_:
			case NO_:
			case NOT_:
			case NOTNULL_:
			case NULL_:
			case OF_:
			case OFFSET_:
			case ON_:
			case OR_:
			case ORDER_:
			case OUTER_:
			case PLAN_:
			case PRAGMA_:
			case PRIMARY_:
			case QUERY_:
			case RAISE_:
			case RECURSIVE_:
			case REFERENCES_:
			case REGEXP_:
			case REINDEX_:
			case RELEASE_:
			case RENAME_:
			case REPLACE_:
			case RESTRICT_:
			case RIGHT_:
			case ROLLBACK_:
			case ROW_:
			case ROWS_:
			case SAVEPOINT_:
			case SELECT_:
			case SET_:
			case TABLE_:
			case TEMP_:
			case TEMPORARY_:
			case THEN_:
			case TO_:
			case TRANSACTION_:
			case TRIGGER_:
			case UNION_:
			case UNIQUE_:
			case UPDATE_:
			case USING_:
			case VACUUM_:
			case VALUES_:
			case VIEW_:
			case VIRTUAL_:
			case WHEN_:
			case WHERE_:
			case WITH_:
			case WITHOUT_:
			case FIRST_VALUE_:
			case OVER_:
			case PARTITION_:
			case RANGE_:
			case PRECEDING_:
			case UNBOUNDED_:
			case CURRENT_:
			case FOLLOWING_:
			case CUME_DIST_:
			case DENSE_RANK_:
			case LAG_:
			case LAST_VALUE_:
			case LEAD_:
			case NTH_VALUE_:
			case NTILE_:
			case PERCENT_RANK_:
			case RANK_:
			case ROW_NUMBER_:
			case GENERATED_:
			case ALWAYS_:
			case STORED_:
			case TRUE_:
			case FALSE_:
			case WINDOW_:
			case NULLS_:
			case FIRST_:
			case LAST_:
			case FILTER_:
			case GROUPS_:
			case EXCLUDE_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2053; keyword();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2054; Match(STRING_LITERAL);
				}
				break;
			case OPEN_PAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2055; Match(OPEN_PAR);
				State = 2056; any_name();
				State = 2057; Match(CLOSE_PAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 32: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 20);
		case 1: return Precpred(Context, 19);
		case 2: return Precpred(Context, 18);
		case 3: return Precpred(Context, 17);
		case 4: return Precpred(Context, 16);
		case 5: return Precpred(Context, 15);
		case 6: return Precpred(Context, 14);
		case 7: return Precpred(Context, 13);
		case 8: return Precpred(Context, 6);
		case 9: return Precpred(Context, 5);
		case 10: return Precpred(Context, 9);
		case 11: return Precpred(Context, 8);
		case 12: return Precpred(Context, 7);
		case 13: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xC3', '\x810', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x3', '\x2', '\a', 
		'\x2', '\xE6', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xE9', '\v', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\a', '\x3', '\xEE', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', '\xF1', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x6', '\x3', '\xF5', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '\xF6', 
		'\x3', '\x3', '\a', '\x3', '\xFA', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'\xFD', '\v', '\x3', '\x3', '\x3', '\a', '\x3', '\x100', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', '\x103', '\v', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '\x108', '\n', '\x4', '\x5', '\x4', 
		'\x10A', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\x124', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x12B', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x132', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x138', '\n', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '\x13C', '\n', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x141', '\n', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x144', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x14B', '\n', 
		'\x6', '\x3', '\x6', '\x5', '\x6', '\x14E', '\n', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '\x152', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x15A', 
		'\n', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x15E', '\n', '\b', 
		'\x5', '\b', '\x160', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\x164', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x168', '\n', 
		'\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x16C', '\n', '\n', '\x3', 
		'\n', '\x5', '\n', '\x16F', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x176', '\n', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x17C', '\n', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\x182', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\x187', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\x190', '\n', '\r', 
		'\f', '\r', '\xE', '\r', '\x193', '\v', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x5', '\r', '\x198', '\n', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\x19C', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\x1A0', '\n', '\xE', '\x3', '\xE', '\x5', '\xE', '\x1A3', '\n', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x1A7', '\n', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\x1AD', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x1B2', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x1B9', '\n', '\xF', '\f', '\xF', 
		'\xE', '\xF', '\x1BC', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', 
		'\xF', '\x1C0', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x1C3', '\v', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x1C8', 
		'\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x1CC', '\n', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x1D0', '\n', '\x10', 
		'\x3', '\x10', '\a', '\x10', '\x1D3', '\n', '\x10', '\f', '\x10', '\xE', 
		'\x10', '\x1D6', '\v', '\x10', '\x3', '\x11', '\x6', '\x11', '\x1D9', 
		'\n', '\x11', '\r', '\x11', '\xE', '\x11', '\x1DA', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x1E7', 
		'\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x1EB', '\n', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x1F0', 
		'\n', '\x12', '\x3', '\x12', '\x5', '\x12', '\x1F3', '\n', '\x12', '\x3', 
		'\x12', '\x5', '\x12', '\x1F6', '\n', '\x12', '\x3', '\x12', '\x5', '\x12', 
		'\x1F9', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x1FD', 
		'\n', '\x12', '\x3', '\x12', '\x5', '\x12', '\x200', '\n', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x5', '\x12', '\x20E', '\n', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', 
		'\x215', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x5', '\x12', '\x21C', '\n', '\x12', '\x5', '\x12', 
		'\x21E', '\n', '\x12', '\x3', '\x13', '\x5', '\x13', '\x221', '\n', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\x227', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\x22C', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\a', '\x14', '\x232', '\n', '\x14', '\f', '\x14', '\xE', 
		'\x14', '\x235', '\v', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\x239', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\x246', '\n', '\x14', 
		'\f', '\x14', '\xE', '\x14', '\x249', '\v', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x5', '\x14', '\x24E', '\n', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\a', '\x15', '\x256', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\x259', 
		'\v', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x25D', '\n', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x267', 
		'\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\x26B', '\n', 
		'\x15', '\f', '\x15', '\xE', '\x15', '\x26E', '\v', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\x271', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\x276', '\n', '\x15', '\x5', '\x15', '\x278', 
		'\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x280', '\n', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x286', 
		'\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\x28B', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\x292', '\n', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\a', '\x17', '\x29B', '\n', '\x17', '\f', '\x17', '\xE', 
		'\x17', '\x29E', '\v', '\x17', '\x5', '\x17', '\x2A0', '\n', '\x17', '\x5', 
		'\x17', '\x2A2', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x2A9', '\n', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\x2AD', '\n', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\x2B4', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x6', '\x17', '\x2B8', 
		'\n', '\x17', '\r', '\x17', '\xE', '\x17', '\x2B9', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x2C0', '\n', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', 
		'\x2C6', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\x2CB', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\a', '\x18', '\x2D2', '\n', '\x18', '\f', 
		'\x18', '\xE', '\x18', '\x2D5', '\v', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\x2D9', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x5', '\x19', '\x2E4', '\n', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x2E9', '\n', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\a', '\x19', '\x2F2', '\n', '\x19', '\f', '\x19', 
		'\xE', '\x19', '\x2F5', '\v', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', 
		'\x19', '\x2F9', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', 
		'\x2FD', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x30B', 
		'\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x30E', '\v', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a', 
		'\x1B', '\x315', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x318', '\v', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x31C', '\n', '\x1B', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x5', '\x1C', '\x324', '\n', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\a', '\x1D', '\x32E', '\n', '\x1D', '\f', '\x1D', 
		'\xE', '\x1D', '\x331', '\v', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', 
		'\x1D', '\x335', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x5', '\x1E', '\x33D', '\n', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x5', '\x1E', '\x344', '\n', '\x1E', '\x3', '\x1E', '\x5', '\x1E', 
		'\x347', '\n', '\x1E', '\x3', '\x1F', '\x5', '\x1F', '\x34A', '\n', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x5', '\x1F', '\x351', '\n', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x354', 
		'\n', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x357', '\n', '\x1F', '\x3', 
		'\x1F', '\x5', '\x1F', '\x35A', '\n', '\x1F', '\x3', ' ', '\x3', ' ', 
		'\x5', ' ', '\x35E', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x5', '!', '\x366', '\n', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x5', '!', '\x36B', '\n', '!', '\x3', '!', '\x3', 
		'!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x5', '\"', '\x375', '\n', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x5', '\"', '\x37A', '\n', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', 
		'\"', '\x383', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\a', 
		'\"', '\x388', '\n', '\"', '\f', '\"', '\xE', '\"', '\x38B', '\v', '\"', 
		'\x3', '\"', '\x5', '\"', '\x38E', '\n', '\"', '\x3', '\"', '\x3', '\"', 
		'\x5', '\"', '\x392', '\n', '\"', '\x3', '\"', '\x5', '\"', '\x395', '\n', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\a', '\"', 
		'\x39B', '\n', '\"', '\f', '\"', '\xE', '\"', '\x39E', '\v', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x3AA', 
		'\n', '\"', '\x3', '\"', '\x5', '\"', '\x3AD', '\n', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', 
		'\"', '\x3B5', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x6', '\"', '\x3BC', '\n', '\"', '\r', '\"', '\xE', 
		'\"', '\x3BD', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x3C2', '\n', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x3C7', '\n', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x3E2', '\n', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x5', '\"', '\x3EB', '\n', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x3F7', '\n', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x3FC', '\n', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', 
		'\x408', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x5', '\"', '\x40E', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x5', '\"', '\x415', '\n', '\"', '\x3', '\"', 
		'\x3', '\"', '\x5', '\"', '\x419', '\n', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\a', '\"', '\x421', 
		'\n', '\"', '\f', '\"', '\xE', '\"', '\x424', '\v', '\"', '\x5', '\"', 
		'\x426', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x5', '\"', '\x42C', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x5', '\"', '\x432', '\n', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\a', '\"', '\x439', '\n', '\"', 
		'\f', '\"', '\xE', '\"', '\x43C', '\v', '\"', '\x5', '\"', '\x43E', '\n', 
		'\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x442', '\n', '\"', '\a', 
		'\"', '\x444', '\n', '\"', '\f', '\"', '\xE', '\"', '\x447', '\v', '\"', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x5', '#', '\x44F', '\n', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', 
		'$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\a', '%', '\x459', 
		'\n', '%', '\f', '%', '\xE', '%', '\x45C', '\v', '%', '\x3', '%', '\x3', 
		'%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\a', '&', '\x464', 
		'\n', '&', '\f', '&', '\xE', '&', '\x467', '\v', '&', '\x3', '\'', '\x5', 
		'\'', '\x46A', '\n', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x5', '\'', '\x471', '\n', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x5', '\'', '\x477', '\n', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x5', '\'', '\x47C', '\n', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\a', '\'', '\x482', '\n', 
		'\'', '\f', '\'', '\xE', '\'', '\x485', '\v', '\'', '\x3', '\'', '\x3', 
		'\'', '\x5', '\'', '\x489', '\n', '\'', '\x3', '\'', '\x3', '\'', '\x5', 
		'\'', '\x48D', '\n', '\'', '\x3', '\'', '\x5', '\'', '\x490', '\n', '\'', 
		'\x3', '\'', '\x3', '\'', '\x5', '\'', '\x494', '\n', '\'', '\x3', '\'', 
		'\x5', '\'', '\x497', '\n', '\'', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\a', '(', '\x49D', '\n', '(', '\f', '(', '\xE', '(', '\x4A0', 
		'\v', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\a', ')', '\x4A8', '\n', ')', '\f', ')', '\xE', ')', '\x4AB', 
		'\v', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x5', ')', '\x4B0', '\n', 
		')', '\x5', ')', '\x4B2', '\n', ')', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\x3', ')', '\x5', ')', '\x4BA', '\n', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x5', ')', '\x4C1', 
		'\n', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\a', ')', '\x4C6', '\n', 
		')', '\f', ')', '\xE', ')', '\x4C9', '\v', ')', '\x3', ')', '\x3', ')', 
		'\x5', ')', '\x4CD', '\n', ')', '\x5', ')', '\x4CF', '\n', ')', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x4D5', '\n', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x5', '*', '\x4DE', '\n', '*', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x5', '+', '\x4E3', '\n', '+', '\x3', ',', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\x5', ',', '\x4EA', '\n', ',', '\x3', ',', '\x3', 
		',', '\x5', ',', '\x4EE', '\n', ',', '\x5', ',', '\x4F0', '\n', ',', '\x3', 
		'-', '\x5', '-', '\x4F3', '\n', '-', '\x3', '-', '\x3', '-', '\x3', '-', 
		'\x3', '-', '\a', '-', '\x4F9', '\n', '-', '\f', '-', '\xE', '-', '\x4FC', 
		'\v', '-', '\x3', '-', '\x5', '-', '\x4FF', '\n', '-', '\x3', '-', '\x5', 
		'-', '\x502', '\n', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x5', '.', '\x508', '\n', '.', '\a', '.', '\x50A', '\n', '.', '\f', '.', 
		'\xE', '.', '\x50D', '\v', '.', '\x3', '/', '\x3', '/', '\x5', '/', '\x511', 
		'\n', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\a', '/', '\x516', '\n', 
		'/', '\f', '/', '\xE', '/', '\x519', '\v', '/', '\x3', '/', '\x3', '/', 
		'\x3', '/', '\x3', '/', '\a', '/', '\x51F', '\n', '/', '\f', '/', '\xE', 
		'/', '\x522', '\v', '/', '\x3', '/', '\x5', '/', '\x525', '\n', '/', '\x5', 
		'/', '\x527', '\n', '/', '\x3', '/', '\x3', '/', '\x5', '/', '\x52B', 
		'\n', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', 
		'\a', '/', '\x532', '\n', '/', '\f', '/', '\xE', '/', '\x535', '\v', '/', 
		'\x3', '/', '\x3', '/', '\x5', '/', '\x539', '\n', '/', '\x5', '/', '\x53B', 
		'\n', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', 
		'\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\a', '/', '\x546', '\n', 
		'/', '\f', '/', '\xE', '/', '\x549', '\v', '/', '\x5', '/', '\x54B', '\n', 
		'/', '\x3', '/', '\x5', '/', '\x54E', '\n', '/', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x31', '\x5', '\x31', '\x553', '\n', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x5', '\x31', '\x557', '\n', '\x31', '\x3', '\x31', '\x5', 
		'\x31', '\x55A', '\n', '\x31', '\x3', '\x32', '\x5', '\x32', '\x55D', 
		'\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', 
		'\x562', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x566', 
		'\n', '\x32', '\x3', '\x32', '\x6', '\x32', '\x569', '\n', '\x32', '\r', 
		'\x32', '\xE', '\x32', '\x56A', '\x3', '\x32', '\x5', '\x32', '\x56E', 
		'\n', '\x32', '\x3', '\x32', '\x5', '\x32', '\x571', '\n', '\x32', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x576', '\n', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x57A', '\n', '\x33', '\x3', 
		'\x33', '\x5', '\x33', '\x57D', '\n', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x584', '\n', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x589', 
		'\n', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\a', '\x33', '\x590', '\n', '\x33', '\f', '\x33', '\xE', 
		'\x33', '\x593', '\v', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', 
		'\x597', '\n', '\x33', '\x3', '\x33', '\x5', '\x33', '\x59A', '\n', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\a', '\x33', 
		'\x5A0', '\n', '\x33', '\f', '\x33', '\xE', '\x33', '\x5A3', '\v', '\x33', 
		'\x3', '\x33', '\x5', '\x33', '\x5A6', '\n', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', 
		'\x33', '\x5AE', '\n', '\x33', '\x3', '\x33', '\x5', '\x33', '\x5B1', 
		'\n', '\x33', '\x5', '\x33', '\x5B3', '\n', '\x33', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x5', '\x34', '\x5BC', '\n', '\x34', '\x3', '\x34', '\x5', '\x34', 
		'\x5BF', '\n', '\x34', '\x5', '\x34', '\x5C1', '\n', '\x34', '\x3', '\x35', 
		'\x3', '\x35', '\x5', '\x35', '\x5C5', '\n', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x5', '\x35', '\x5C9', '\n', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x5', '\x35', '\x5CD', '\n', '\x35', '\x3', '\x35', '\x5', '\x35', '\x5D0', 
		'\n', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\a', '\x36', '\x5D9', '\n', 
		'\x36', '\f', '\x36', '\xE', '\x36', '\x5DC', '\v', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x5', '\x36', '\x5E0', '\n', '\x36', '\x3', '\x37', '\x3', 
		'\x37', '\x5', '\x37', '\x5E4', '\n', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x5', '\x37', '\x5E8', '\n', '\x37', '\x3', '\x38', '\x5', '\x38', '\x5EB', 
		'\n', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', 
		'\x5F0', '\n', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x5', '\x38', '\x5F6', '\n', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x5FD', '\n', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\a', '\x38', '\x602', 
		'\n', '\x38', '\f', '\x38', '\xE', '\x38', '\x605', '\v', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\a', '\x38', '\x60B', 
		'\n', '\x38', '\f', '\x38', '\xE', '\x38', '\x60E', '\v', '\x38', '\x3', 
		'\x38', '\x5', '\x38', '\x611', '\n', '\x38', '\x5', '\x38', '\x613', 
		'\n', '\x38', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x617', '\n', 
		'\x38', '\x3', '\x38', '\x5', '\x38', '\x61A', '\n', '\x38', '\x3', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\a', '\x39', '\x620', '\n', 
		'\x39', '\f', '\x39', '\xE', '\x39', '\x623', '\v', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\x3', ':', '\x5', ':', '\x628', '\n', ':', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\x5', ':', '\x62D', '\n', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x5', ':', '\x633', '\n', ':', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x63A', '\n', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\a', ':', '\x63F', '\n', ':', 
		'\f', ':', '\xE', ':', '\x642', '\v', ':', '\x3', ':', '\x3', ':', '\x5', 
		':', '\x646', '\n', ':', '\x3', ':', '\x5', ':', '\x649', '\n', ':', '\x3', 
		':', '\x5', ':', '\x64C', '\n', ':', '\x3', ':', '\x5', ':', '\x64F', 
		'\n', ':', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x654', '\n', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x659', '\n', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', 
		'\x660', '\n', ';', '\x3', '<', '\x3', '<', '\x5', '<', '\x664', '\n', 
		'<', '\x3', '<', '\x3', '<', '\x5', '<', '\x668', '\n', '<', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '>', 
		'\x3', '>', '\x5', '>', '\x672', '\n', '>', '\x3', '>', '\x3', '>', '\x3', 
		'>', '\x3', '>', '\x3', '>', '\a', '>', '\x679', '\n', '>', '\f', '>', 
		'\xE', '>', '\x67C', '\v', '>', '\x5', '>', '\x67E', '\n', '>', '\x3', 
		'>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\a', '>', '\x685', 
		'\n', '>', '\f', '>', '\xE', '>', '\x688', '\v', '>', '\x3', '>', '\x5', 
		'>', '\x68B', '\n', '>', '\x3', '>', '\x3', '>', '\x3', '?', '\x3', '?', 
		'\x3', '?', '\x3', '?', '\x5', '?', '\x693', '\n', '?', '\x3', '?', '\x3', 
		'?', '\x3', '?', '\x3', '?', '\x3', '?', '\a', '?', '\x69A', '\n', '?', 
		'\f', '?', '\xE', '?', '\x69D', '\v', '?', '\x5', '?', '\x69F', '\n', 
		'?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\a', 
		'?', '\x6A6', '\n', '?', '\f', '?', '\xE', '?', '\x6A9', '\v', '?', '\x5', 
		'?', '\x6AB', '\n', '?', '\x3', '?', '\x5', '?', '\x6AE', '\n', '?', '\x3', 
		'?', '\x5', '?', '\x6B1', '\n', '?', '\x3', '@', '\x3', '@', '\x3', '@', 
		'\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x5', '@', 
		'\x6BB', '\n', '@', '\x5', '@', '\x6BD', '\n', '@', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', 
		'\x41', '\x5', '\x41', '\x6C6', '\n', '\x41', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\a', '\x42', '\x6CD', '\n', 
		'\x42', '\f', '\x42', '\xE', '\x42', '\x6D0', '\v', '\x42', '\x3', '\x42', 
		'\x5', '\x42', '\x6D3', '\n', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', '\x6DA', '\n', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\a', '\x43', '\x6DF', '\n', 
		'\x43', '\f', '\x43', '\xE', '\x43', '\x6E2', '\v', '\x43', '\x3', '\x43', 
		'\x5', '\x43', '\x6E5', '\n', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', 
		'\x43', '\x6E9', '\n', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\a', '\x44', '\x6F0', '\n', '\x44', '\f', 
		'\x44', '\xE', '\x44', '\x6F3', '\v', '\x44', '\x3', '\x44', '\x5', '\x44', 
		'\x6F6', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x6FA', 
		'\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', 
		'\x6FF', '\n', '\x44', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x703', 
		'\n', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\a', '\x45', 
		'\x708', '\n', '\x45', '\f', '\x45', '\xE', '\x45', '\x70B', '\v', '\x45', 
		'\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\a', '\x46', '\x712', '\n', '\x46', '\f', '\x46', '\xE', '\x46', '\x715', 
		'\v', '\x46', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x5', 'G', 
		'\x71B', '\n', 'G', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x5', 'H', '\x720', 
		'\n', 'H', '\x3', 'H', '\x5', 'H', '\x723', '\n', 'H', '\x3', 'H', '\x3', 
		'H', '\x5', 'H', '\x727', '\n', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x5', 'J', '\x735', '\n', 'J', '\x3', 
		'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 
		'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x5', 'K', '\x741', '\n', 'K', 
		'\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', 
		'\x3', 'L', '\x5', 'L', '\x74A', '\n', 'L', '\x3', 'M', '\x3', 'M', '\x3', 
		'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x5', 'M', '\x753', 
		'\n', 'M', '\x3', 'M', '\x3', 'M', '\x5', 'M', '\x757', '\n', 'M', '\x3', 
		'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 
		'M', '\x3', 'M', '\x5', 'M', '\x761', '\n', 'M', '\x3', 'M', '\x5', 'M', 
		'\x764', '\n', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 
		'M', '\x3', 'M', '\x3', 'M', '\x5', 'M', '\x76D', '\n', 'M', '\x3', 'M', 
		'\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', 
		'\x5', 'M', '\x776', '\n', 'M', '\x3', 'M', '\x5', 'M', '\x779', '\n', 
		'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x5', 'M', '\x77F', 
		'\n', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', 
		'\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', 
		'\x3', 'M', '\x5', 'M', '\x78D', '\n', 'M', '\x3', 'M', '\x3', 'M', '\x5', 
		'M', '\x791', '\n', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', 
		'\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x5', 'M', 
		'\x79C', '\n', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x5', 'M', '\x7A1', 
		'\n', 'M', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'O', '\x3', 'O', 
		'\x3', 'O', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x6', 'P', '\x7AC', '\n', 
		'P', '\r', 'P', '\xE', 'P', '\x7AD', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x6', 'Q', '\x7B3', '\n', 'Q', '\r', 'Q', '\xE', 'Q', '\x7B4', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'S', '\x3', 'S', '\x5', 
		'S', '\x7BD', '\n', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x5', 'S', 
		'\x7C2', '\n', 'S', '\a', 'S', '\x7C4', '\n', 'S', '\f', 'S', '\xE', 'S', 
		'\x7C7', '\v', 'S', '\x3', 'T', '\x3', 'T', '\x3', 'U', '\x3', 'U', '\x3', 
		'V', '\x3', 'V', '\x3', 'W', '\x3', 'W', '\x3', 'X', '\x3', 'X', '\x5', 
		'X', '\x7D3', '\n', 'X', '\x3', 'Y', '\x3', 'Y', '\x3', 'Z', '\x3', 'Z', 
		'\x3', '[', '\x3', '[', '\x3', '\\', '\x3', '\\', '\x3', ']', '\x3', ']', 
		'\x3', '^', '\x3', '^', '\x3', '_', '\x3', '_', '\x3', '`', '\x3', '`', 
		'\x3', '\x61', '\x3', '\x61', '\x3', '\x62', '\x3', '\x62', '\x3', '\x63', 
		'\x3', '\x63', '\x3', '\x64', '\x3', '\x64', '\x3', '\x65', '\x3', '\x65', 
		'\x3', '\x66', '\x3', '\x66', '\x3', 'g', '\x3', 'g', '\x3', 'h', '\x3', 
		'h', '\x3', 'i', '\x3', 'i', '\x3', 'j', '\x3', 'j', '\x3', 'k', '\x3', 
		'k', '\x3', 'l', '\x3', 'l', '\x3', 'm', '\x3', 'm', '\x3', 'n', '\x3', 
		'n', '\x3', 'o', '\x3', 'o', '\x3', 'p', '\x3', 'p', '\x3', 'q', '\x3', 
		'q', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 
		'r', '\x3', 'r', '\x5', 'r', '\x80E', '\n', 'r', '\x3', 'r', '\x4', '\x1BA', 
		'\x1DA', '\x3', '\x42', 's', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', 
		':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 
		'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 
		'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', 
		'\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', 
		'\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', 
		'\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', '\xBA', 
		'\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', '\xCA', '\xCC', 
		'\xCE', '\xD0', '\xD2', '\xD4', '\xD6', '\xD8', '\xDA', '\xDC', '\xDE', 
		'\xE0', '\xE2', '\x2', '\x1F', '\x5', '\x2', '<', '<', 'G', 'G', 'T', 
		'T', '\x4', '\x2', '\x31', '\x31', '\x44', '\x44', '\x3', '\x2', '\x87', 
		'\x88', '\x4', '\x2', '\x94', '\x94', '\xAD', '\xAD', '\x3', '\x2', '\n', 
		'\v', '\x4', '\x2', '=', '=', '\x8F', '\x8F', '\x4', '\x2', ':', ':', 
		'j', 'j', '\x4', '\x2', '<', '<', 'T', 'T', '\a', '\x2', '\x1B', '\x1B', 
		'J', 'J', 'S', 'S', '|', '|', '\x80', '\x80', '\x6', '\x2', 'V', 'V', 
		'\x86', '\x86', '\x8C', '\x8C', '\x93', '\x93', '\x4', '\x2', '\t', '\t', 
		'\xE', '\xF', '\x3', '\x2', '\x10', '\x13', '\x3', '\x2', '\x14', '\x17', 
		'\x6', '\x2', 'O', 'O', '\x63', '\x63', '\x65', '\x65', 'x', 'x', '\x5', 
		'\x2', '\x1B', '\x1B', 'J', 'J', '\x80', '\x80', '\a', '\x2', '\x36', 
		'\x38', 'j', 'j', '\xAE', '\xAF', '\xBC', '\xBC', '\xBE', '\xBF', '\x4', 
		'\x2', '\x1F', '\x1F', '@', '@', '\x5', '\x2', 'N', 'N', '\x62', '\x62', 
		'\x7F', '\x7F', '\x5', '\x2', '\x82', '\x82', '\x9C', '\x9C', '\xB5', 
		'\xB5', '\x4', '\x2', '\a', '\a', 'l', 'l', '\x3', '\x2', '\xB2', '\xB3', 
		'\x4', '\x2', '$', '$', '>', '>', '\x4', '\x2', '\x99', '\x99', '\xA4', 
		'\xA4', '\x4', '\x2', '\xA1', '\xA1', '\xA8', '\xA8', '\x4', '\x2', '\xA2', 
		'\xA2', '\xA9', '\xAA', '\x4', '\x2', '\xA3', '\xA3', '\xA5', '\xA5', 
		'\x4', '\x2', '\n', '\f', 'h', 'h', '\x4', '\x2', '\xBB', '\xBB', '\xBE', 
		'\xBE', '\x4', '\x2', '\x1B', '}', '\x7F', '\xB6', '\x2', '\x92C', '\x2', 
		'\xE7', '\x3', '\x2', '\x2', '\x2', '\x4', '\xEF', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x109', '\x3', '\x2', '\x2', '\x2', '\b', '\x125', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\x145', '\x3', '\x2', '\x2', '\x2', '\f', 
		'\x14F', '\x3', '\x2', '\x2', '\x2', '\xE', '\x157', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x161', '\x3', '\x2', '\x2', '\x2', '\x12', '\x165', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x170', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x173', '\x3', '\x2', '\x2', '\x2', '\x18', '\x179', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1A4', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x1CD', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\x1D8', '\x3', '\x2', '\x2', '\x2', '\"', '\x1EA', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x220', '\x3', '\x2', '\x2', '\x2', '&', '\x226', '\x3', 
		'\x2', '\x2', '\x2', '(', '\x24F', '\x3', '\x2', '\x2', '\x2', '*', '\x279', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x27D', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x2BD', '\x3', '\x2', '\x2', '\x2', '\x30', '\x2DD', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x2FA', '\x3', '\x2', '\x2', '\x2', '\x34', '\x30F', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x31D', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x328', '\x3', '\x2', '\x2', '\x2', ':', '\x33C', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x349', '\x3', '\x2', '\x2', '\x2', '>', '\x35B', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x361', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x3C6', '\x3', '\x2', '\x2', '\x2', '\x44', '\x448', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x452', '\x3', '\x2', '\x2', '\x2', 'H', '\x454', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x45F', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x469', '\x3', '\x2', '\x2', '\x2', 'N', '\x498', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x4A1', '\x3', '\x2', '\x2', '\x2', 'R', '\x4D0', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x4E2', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x4E4', '\x3', '\x2', '\x2', '\x2', 'X', '\x4F2', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x503', '\x3', '\x2', '\x2', '\x2', '\\', '\x54D', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x54F', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x552', '\x3', '\x2', '\x2', '\x2', '\x62', '\x55C', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x5B2', '\x3', '\x2', '\x2', '\x2', '\x66', '\x5C0', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x5CF', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x5DF', '\x3', '\x2', '\x2', '\x2', 'l', '\x5E7', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x5EA', '\x3', '\x2', '\x2', '\x2', 'p', '\x61B', 
		'\x3', '\x2', '\x2', '\x2', 'r', '\x627', '\x3', '\x2', '\x2', '\x2', 
		't', '\x653', '\x3', '\x2', '\x2', '\x2', 'v', '\x661', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x669', '\x3', '\x2', '\x2', '\x2', 'z', '\x66F', 
		'\x3', '\x2', '\x2', '\x2', '|', '\x68E', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x6B2', '\x3', '\x2', '\x2', '\x2', '\x80', '\x6BE', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x6C7', '\x3', '\x2', '\x2', '\x2', '\x84', '\x6D6', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x6EA', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x700', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x70C', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x716', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x71C', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x728', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x734', '\x3', '\x2', '\x2', '\x2', '\x94', '\x740', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x749', '\x3', '\x2', '\x2', '\x2', '\x98', '\x7A0', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x7A2', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x7A5', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x7A8', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\x7AF', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x7B6', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\x7BA', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\x7C8', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x7CA', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\x7CC', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x7CE', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\x7D2', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\x7D4', '\x3', '\x2', '\x2', '\x2', '\xB2', '\x7D6', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\x7D8', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x7DA', 
		'\x3', '\x2', '\x2', '\x2', '\xB8', '\x7DC', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\x7DE', '\x3', '\x2', '\x2', '\x2', '\xBC', '\x7E0', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\x7E2', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x7E4', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\x7E6', '\x3', '\x2', '\x2', '\x2', 
		'\xC4', '\x7E8', '\x3', '\x2', '\x2', '\x2', '\xC6', '\x7EA', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\x7EC', '\x3', '\x2', '\x2', '\x2', '\xCA', '\x7EE', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\x7F0', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\x7F2', '\x3', '\x2', '\x2', '\x2', '\xD0', '\x7F4', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\x7F6', '\x3', '\x2', '\x2', '\x2', '\xD4', '\x7F8', 
		'\x3', '\x2', '\x2', '\x2', '\xD6', '\x7FA', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\x7FC', '\x3', '\x2', '\x2', '\x2', '\xDA', '\x7FE', '\x3', '\x2', 
		'\x2', '\x2', '\xDC', '\x800', '\x3', '\x2', '\x2', '\x2', '\xDE', '\x802', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\x804', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\x80D', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE6', '\x5', '\x4', 
		'\x3', '\x2', '\xE5', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE9', 
		'\x3', '\x2', '\x2', '\x2', '\xE7', '\xE5', '\x3', '\x2', '\x2', '\x2', 
		'\xE7', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xEA', '\x3', '\x2', 
		'\x2', '\x2', '\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', 
		'\a', '\x2', '\x2', '\x3', '\xEB', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\xEC', '\xEE', '\a', '\x3', '\x2', '\x2', '\xED', '\xEC', '\x3', '\x2', 
		'\x2', '\x2', '\xEE', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xED', 
		'\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', '\x3', '\x2', '\x2', '\x2', 
		'\xF0', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xEF', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\xFB', '\x5', '\x6', '\x4', '\x2', '\xF3', '\xF5', 
		'\a', '\x3', '\x2', '\x2', '\xF4', '\xF3', '\x3', '\x2', '\x2', '\x2', 
		'\xF5', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF4', '\x3', '\x2', 
		'\x2', '\x2', '\xF6', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '\xFA', '\x5', '\x6', '\x4', '\x2', 
		'\xF9', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFD', '\x3', '\x2', 
		'\x2', '\x2', '\xFB', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', 
		'\x3', '\x2', '\x2', '\x2', '\xFC', '\x101', '\x3', '\x2', '\x2', '\x2', 
		'\xFD', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x100', '\a', '\x3', 
		'\x2', '\x2', '\xFF', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x100', '\x103', 
		'\x3', '\x2', '\x2', '\x2', '\x101', '\xFF', '\x3', '\x2', '\x2', '\x2', 
		'\x101', '\x102', '\x3', '\x2', '\x2', '\x2', '\x102', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x103', '\x101', '\x3', '\x2', '\x2', '\x2', '\x104', '\x107', 
		'\a', 'I', '\x2', '\x2', '\x105', '\x106', '\a', 't', '\x2', '\x2', '\x106', 
		'\x108', '\a', 'q', '\x2', '\x2', '\x107', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x107', '\x108', '\x3', '\x2', '\x2', '\x2', '\x108', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x104', '\x3', '\x2', '\x2', '\x2', 
		'\x109', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x123', '\x3', 
		'\x2', '\x2', '\x2', '\x10B', '\x124', '\x5', '\b', '\x5', '\x2', '\x10C', 
		'\x124', '\x5', '\n', '\x6', '\x2', '\x10D', '\x124', '\x5', '\f', '\a', 
		'\x2', '\x10E', '\x124', '\x5', '\xE', '\b', '\x2', '\x10F', '\x124', 
		'\x5', '\x10', '\t', '\x2', '\x110', '\x124', '\x5', '\x18', '\r', '\x2', 
		'\x111', '\x124', '\x5', '\x1C', '\xF', '\x2', '\x112', '\x124', '\x5', 
		',', '\x17', '\x2', '\x113', '\x124', '\x5', '.', '\x18', '\x2', '\x114', 
		'\x124', '\x5', '\x30', '\x19', '\x2', '\x115', '\x124', '\x5', ':', '\x1E', 
		'\x2', '\x116', '\x124', '\x5', '<', '\x1F', '\x2', '\x117', '\x124', 
		'\x5', '>', ' ', '\x2', '\x118', '\x124', '\x5', '@', '!', '\x2', '\x119', 
		'\x124', '\x5', 'L', '\'', '\x2', '\x11A', '\x124', '\x5', 'R', '*', '\x2', 
		'\x11B', '\x124', '\x5', 'V', ',', '\x2', '\x11C', '\x124', '\x5', '\x16', 
		'\f', '\x2', '\x11D', '\x124', '\x5', '\x12', '\n', '\x2', '\x11E', '\x124', 
		'\x5', '\x14', '\v', '\x2', '\x11F', '\x124', '\x5', 'X', '-', '\x2', 
		'\x120', '\x124', '\x5', 'n', '\x38', '\x2', '\x121', '\x124', '\x5', 
		'r', ':', '\x2', '\x122', '\x124', '\x5', 'v', '<', '\x2', '\x123', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x10C', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x123', '\x10E', '\x3', 
		'\x2', '\x2', '\x2', '\x123', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x123', 
		'\x110', '\x3', '\x2', '\x2', '\x2', '\x123', '\x111', '\x3', '\x2', '\x2', 
		'\x2', '\x123', '\x112', '\x3', '\x2', '\x2', '\x2', '\x123', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x114', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\x115', '\x3', '\x2', '\x2', '\x2', '\x123', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x123', '\x117', '\x3', '\x2', '\x2', '\x2', '\x123', 
		'\x118', '\x3', '\x2', '\x2', '\x2', '\x123', '\x119', '\x3', '\x2', '\x2', 
		'\x2', '\x123', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x123', '\x11B', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x11C', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x123', '\x11E', '\x3', 
		'\x2', '\x2', '\x2', '\x123', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x123', 
		'\x120', '\x3', '\x2', '\x2', '\x2', '\x123', '\x121', '\x3', '\x2', '\x2', 
		'\x2', '\x123', '\x122', '\x3', '\x2', '\x2', '\x2', '\x124', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x125', '\x126', '\a', ' ', '\x2', '\x2', '\x126', 
		'\x12A', '\a', '\x86', '\x2', '\x2', '\x127', '\x128', '\x5', '\xB8', 
		']', '\x2', '\x128', '\x129', '\a', '\x4', '\x2', '\x2', '\x129', '\x12B', 
		'\x3', '\x2', '\x2', '\x2', '\x12A', '\x127', '\x3', '\x2', '\x2', '\x2', 
		'\x12A', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', '\x3', 
		'\x2', '\x2', '\x2', '\x12C', '\x143', '\x5', '\xBA', '^', '\x2', '\x12D', 
		'\x137', '\a', '{', '\x2', '\x2', '\x12E', '\x12F', '\a', '\x8A', '\x2', 
		'\x2', '\x12F', '\x138', '\x5', '\xBA', '^', '\x2', '\x130', '\x132', 
		'\a', '\x30', '\x2', '\x2', '\x131', '\x130', '\x3', '\x2', '\x2', '\x2', 
		'\x131', '\x132', '\x3', '\x2', '\x2', '\x2', '\x132', '\x133', '\x3', 
		'\x2', '\x2', '\x2', '\x133', '\x134', '\x5', '\xBE', '`', '\x2', '\x134', 
		'\x135', '\a', '\x8A', '\x2', '\x2', '\x135', '\x136', '\x5', '\xBE', 
		'`', '\x2', '\x136', '\x138', '\x3', '\x2', '\x2', '\x2', '\x137', '\x12E', 
		'\x3', '\x2', '\x2', '\x2', '\x137', '\x131', '\x3', '\x2', '\x2', '\x2', 
		'\x138', '\x144', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13B', '\a', 
		'\x1D', '\x2', '\x2', '\x13A', '\x13C', '\a', '\x30', '\x2', '\x2', '\x13B', 
		'\x13A', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x13C', '\x3', '\x2', '\x2', 
		'\x2', '\x13C', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x144', 
		'\x5', '\x1E', '\x10', '\x2', '\x13E', '\x140', '\a', '\x41', '\x2', '\x2', 
		'\x13F', '\x141', '\a', '\x30', '\x2', '\x2', '\x140', '\x13F', '\x3', 
		'\x2', '\x2', '\x2', '\x140', '\x141', '\x3', '\x2', '\x2', '\x2', '\x141', 
		'\x142', '\x3', '\x2', '\x2', '\x2', '\x142', '\x144', '\x5', '\xBE', 
		'`', '\x2', '\x143', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x143', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x143', '\x13E', '\x3', '\x2', '\x2', '\x2', 
		'\x144', '\t', '\x3', '\x2', '\x2', '\x2', '\x145', '\x14D', '\a', '!', 
		'\x2', '\x2', '\x146', '\x14E', '\x5', '\xB8', ']', '\x2', '\x147', '\x148', 
		'\x5', '\xB8', ']', '\x2', '\x148', '\x149', '\a', '\x4', '\x2', '\x2', 
		'\x149', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x147', '\x3', 
		'\x2', '\x2', '\x2', '\x14A', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14B', 
		'\x14C', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14E', '\x5', '\xBC', 
		'_', '\x2', '\x14D', '\x146', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14A', 
		'\x3', '\x2', '\x2', '\x2', '\x14D', '\x14E', '\x3', '\x2', '\x2', '\x2', 
		'\x14E', '\v', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x151', '\a', '%', 
		'\x2', '\x2', '\x150', '\x152', '\a', '\x39', '\x2', '\x2', '\x151', '\x150', 
		'\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\x3', '\x2', '\x2', '\x2', 
		'\x152', '\x153', '\x3', '\x2', '\x2', '\x2', '\x153', '\x154', '\x5', 
		'\x42', '\"', '\x2', '\x154', '\x155', '\a', '#', '\x2', '\x2', '\x155', 
		'\x156', '\x5', '\xB8', ']', '\x2', '\x156', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x157', '\x159', '\a', '(', '\x2', '\x2', '\x158', '\x15A', '\t', 
		'\x2', '\x2', '\x2', '\x159', '\x158', '\x3', '\x2', '\x2', '\x2', '\x159', 
		'\x15A', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15F', '\x3', '\x2', '\x2', 
		'\x2', '\x15B', '\x15D', '\a', '\x8B', '\x2', '\x2', '\x15C', '\x15E', 
		'\x5', '\xD2', 'j', '\x2', '\x15D', '\x15C', '\x3', '\x2', '\x2', '\x2', 
		'\x15D', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x160', '\x3', 
		'\x2', '\x2', '\x2', '\x15F', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15F', 
		'\x160', '\x3', '\x2', '\x2', '\x2', '\x160', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x161', '\x163', '\t', '\x3', '\x2', '\x2', '\x162', '\x164', 
		'\a', '\x8B', '\x2', '\x2', '\x163', '\x162', '\x3', '\x2', '\x2', '\x2', 
		'\x163', '\x164', '\x3', '\x2', '\x2', '\x2', '\x164', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x165', '\x167', '\a', '\x80', '\x2', '\x2', '\x166', 
		'\x168', '\a', '\x8B', '\x2', '\x2', '\x167', '\x166', '\x3', '\x2', '\x2', 
		'\x2', '\x167', '\x168', '\x3', '\x2', '\x2', '\x2', '\x168', '\x16E', 
		'\x3', '\x2', '\x2', '\x2', '\x169', '\x16B', '\a', '\x8A', '\x2', '\x2', 
		'\x16A', '\x16C', '\a', '\x83', '\x2', '\x2', '\x16B', '\x16A', '\x3', 
		'\x2', '\x2', '\x2', '\x16B', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x16C', 
		'\x16D', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16F', '\x5', '\xCE', 
		'h', '\x2', '\x16E', '\x169', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x16F', 
		'\x3', '\x2', '\x2', '\x2', '\x16F', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x170', '\x171', '\a', '\x83', '\x2', '\x2', '\x171', '\x172', '\x5', 
		'\xCE', 'h', '\x2', '\x172', '\x15', '\x3', '\x2', '\x2', '\x2', '\x173', 
		'\x175', '\a', 'z', '\x2', '\x2', '\x174', '\x176', '\a', '\x83', '\x2', 
		'\x2', '\x175', '\x174', '\x3', '\x2', '\x2', '\x2', '\x175', '\x176', 
		'\x3', '\x2', '\x2', '\x2', '\x176', '\x177', '\x3', '\x2', '\x2', '\x2', 
		'\x177', '\x178', '\x5', '\xCE', 'h', '\x2', '\x178', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x179', '\x17B', '\a', '\x34', '\x2', '\x2', '\x17A', '\x17C', 
		'\a', '\x8E', '\x2', '\x2', '\x17B', '\x17A', '\x3', '\x2', '\x2', '\x2', 
		'\x17B', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17D', '\x3', 
		'\x2', '\x2', '\x2', '\x17D', '\x181', '\a', 'V', '\x2', '\x2', '\x17E', 
		'\x17F', '\a', 'R', '\x2', '\x2', '\x17F', '\x180', '\a', 'h', '\x2', 
		'\x2', '\x180', '\x182', '\a', 'H', '\x2', '\x2', '\x181', '\x17E', '\x3', 
		'\x2', '\x2', '\x2', '\x181', '\x182', '\x3', '\x2', '\x2', '\x2', '\x182', 
		'\x186', '\x3', '\x2', '\x2', '\x2', '\x183', '\x184', '\x5', '\xB8', 
		']', '\x2', '\x184', '\x185', '\a', '\x4', '\x2', '\x2', '\x185', '\x187', 
		'\x3', '\x2', '\x2', '\x2', '\x186', '\x183', '\x3', '\x2', '\x2', '\x2', 
		'\x186', '\x187', '\x3', '\x2', '\x2', '\x2', '\x187', '\x188', '\x3', 
		'\x2', '\x2', '\x2', '\x188', '\x189', '\x5', '\xC4', '\x63', '\x2', '\x189', 
		'\x18A', '\a', 'm', '\x2', '\x2', '\x18A', '\x18B', '\x5', '\xBA', '^', 
		'\x2', '\x18B', '\x18C', '\a', '\x5', '\x2', '\x2', '\x18C', '\x191', 
		'\x5', '\x1A', '\xE', '\x2', '\x18D', '\x18E', '\a', '\a', '\x2', '\x2', 
		'\x18E', '\x190', '\x5', '\x1A', '\xE', '\x2', '\x18F', '\x18D', '\x3', 
		'\x2', '\x2', '\x2', '\x190', '\x193', '\x3', '\x2', '\x2', '\x2', '\x191', 
		'\x18F', '\x3', '\x2', '\x2', '\x2', '\x191', '\x192', '\x3', '\x2', '\x2', 
		'\x2', '\x192', '\x194', '\x3', '\x2', '\x2', '\x2', '\x193', '\x191', 
		'\x3', '\x2', '\x2', '\x2', '\x194', '\x197', '\a', '\x6', '\x2', '\x2', 
		'\x195', '\x196', '\a', '\x96', '\x2', '\x2', '\x196', '\x198', '\x5', 
		'\x42', '\"', '\x2', '\x197', '\x195', '\x3', '\x2', '\x2', '\x2', '\x197', 
		'\x198', '\x3', '\x2', '\x2', '\x2', '\x198', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x199', '\x19C', '\x5', '\xBE', '`', '\x2', '\x19A', '\x19C', 
		'\x5', '\x42', '\"', '\x2', '\x19B', '\x199', '\x3', '\x2', '\x2', '\x2', 
		'\x19B', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19F', '\x3', 
		'\x2', '\x2', '\x2', '\x19D', '\x19E', '\a', '/', '\x2', '\x2', '\x19E', 
		'\x1A0', '\x5', '\xC0', '\x61', '\x2', '\x19F', '\x19D', '\x3', '\x2', 
		'\x2', '\x2', '\x19F', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A2', 
		'\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A3', '\x5', '\x90', 'I', '\x2', 
		'\x1A2', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A3', '\x3', 
		'\x2', '\x2', '\x2', '\x1A3', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1A4', 
		'\x1A6', '\a', '\x34', '\x2', '\x2', '\x1A5', '\x1A7', '\t', '\x4', '\x2', 
		'\x2', '\x1A6', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A7', 
		'\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A8', '\x3', '\x2', '\x2', '\x2', 
		'\x1A8', '\x1AC', '\a', '\x86', '\x2', '\x2', '\x1A9', '\x1AA', '\a', 
		'R', '\x2', '\x2', '\x1AA', '\x1AB', '\a', 'h', '\x2', '\x2', '\x1AB', 
		'\x1AD', '\a', 'H', '\x2', '\x2', '\x1AC', '\x1A9', '\x3', '\x2', '\x2', 
		'\x2', '\x1AC', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1B1', 
		'\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AF', '\x5', '\xB8', ']', '\x2', 
		'\x1AF', '\x1B0', '\a', '\x4', '\x2', '\x2', '\x1B0', '\x1B2', '\x3', 
		'\x2', '\x2', '\x2', '\x1B1', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1B1', 
		'\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B3', '\x3', '\x2', '\x2', 
		'\x2', '\x1B3', '\x1CB', '\x5', '\xBA', '^', '\x2', '\x1B4', '\x1B5', 
		'\a', '\x5', '\x2', '\x2', '\x1B5', '\x1BA', '\x5', '\x1E', '\x10', '\x2', 
		'\x1B6', '\x1B7', '\a', '\a', '\x2', '\x2', '\x1B7', '\x1B9', '\x5', '\x1E', 
		'\x10', '\x2', '\x1B8', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B9', 
		'\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BB', '\x3', '\x2', '\x2', 
		'\x2', '\x1BA', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1C1', 
		'\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BA', '\x3', '\x2', '\x2', '\x2', 
		'\x1BD', '\x1BE', '\a', '\a', '\x2', '\x2', '\x1BE', '\x1C0', '\x5', '&', 
		'\x14', '\x2', '\x1BF', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1C0', 
		'\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1BF', '\x3', '\x2', '\x2', 
		'\x2', '\x1C1', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C4', 
		'\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C1', '\x3', '\x2', '\x2', '\x2', 
		'\x1C4', '\x1C7', '\a', '\x6', '\x2', '\x2', '\x1C5', '\x1C6', '\a', '\x98', 
		'\x2', '\x2', '\x1C6', '\x1C8', '\a', '\xBB', '\x2', '\x2', '\x1C7', '\x1C5', 
		'\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1C8', '\x3', '\x2', '\x2', '\x2', 
		'\x1C8', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1CA', '\a', 
		'#', '\x2', '\x2', '\x1CA', '\x1CC', '\x5', 'X', '-', '\x2', '\x1CB', 
		'\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1C9', '\x3', '\x2', '\x2', 
		'\x2', '\x1CC', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1CF', 
		'\x5', '\xBE', '`', '\x2', '\x1CE', '\x1D0', '\x5', ' ', '\x11', '\x2', 
		'\x1CF', '\x1CE', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1D0', '\x3', 
		'\x2', '\x2', '\x2', '\x1D0', '\x1D4', '\x3', '\x2', '\x2', '\x2', '\x1D1', 
		'\x1D3', '\x5', '\"', '\x12', '\x2', '\x1D2', '\x1D1', '\x3', '\x2', '\x2', 
		'\x2', '\x1D3', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D2', 
		'\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D5', '\x3', '\x2', '\x2', '\x2', 
		'\x1D5', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D4', '\x3', 
		'\x2', '\x2', '\x2', '\x1D7', '\x1D9', '\x5', '\xB4', '[', '\x2', '\x1D8', 
		'\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DA', '\x3', '\x2', '\x2', 
		'\x2', '\x1DA', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1DA', '\x1D8', 
		'\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1E6', '\x3', '\x2', '\x2', '\x2', 
		'\x1DC', '\x1DD', '\a', '\x5', '\x2', '\x2', '\x1DD', '\x1DE', '\x5', 
		'$', '\x13', '\x2', '\x1DE', '\x1DF', '\a', '\x6', '\x2', '\x2', '\x1DF', 
		'\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1E1', '\a', '\x5', '\x2', 
		'\x2', '\x1E1', '\x1E2', '\x5', '$', '\x13', '\x2', '\x1E2', '\x1E3', 
		'\a', '\a', '\x2', '\x2', '\x1E3', '\x1E4', '\x5', '$', '\x13', '\x2', 
		'\x1E4', '\x1E5', '\a', '\x6', '\x2', '\x2', '\x1E5', '\x1E7', '\x3', 
		'\x2', '\x2', '\x2', '\x1E6', '\x1DC', '\x3', '\x2', '\x2', '\x2', '\x1E6', 
		'\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E7', '\x3', '\x2', '\x2', 
		'\x2', '\x1E7', '!', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E9', '\a', 
		'\x33', '\x2', '\x2', '\x1E9', '\x1EB', '\x5', '\xB4', '[', '\x2', '\x1EA', 
		'\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1EB', '\x3', '\x2', '\x2', 
		'\x2', '\x1EB', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1ED', 
		'\a', 's', '\x2', '\x2', '\x1ED', '\x1EF', '\a', '\x61', '\x2', '\x2', 
		'\x1EE', '\x1F0', '\x5', '\x90', 'I', '\x2', '\x1EF', '\x1EE', '\x3', 
		'\x2', '\x2', '\x2', '\x1EF', '\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1F0', 
		'\x1F2', '\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1F3', '\x5', '*', '\x16', 
		'\x2', '\x1F2', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F3', 
		'\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F5', '\x3', '\x2', '\x2', '\x2', 
		'\x1F4', '\x1F6', '\a', '&', '\x2', '\x2', '\x1F5', '\x1F4', '\x3', '\x2', 
		'\x2', '\x2', '\x1F5', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x21E', 
		'\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F9', '\a', 'h', '\x2', '\x2', 
		'\x1F8', '\x1F7', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F9', '\x3', 
		'\x2', '\x2', '\x2', '\x1F9', '\x1FA', '\x3', '\x2', '\x2', '\x2', '\x1FA', 
		'\x1FD', '\a', 'j', '\x2', '\x2', '\x1FB', '\x1FD', '\a', '\x8E', '\x2', 
		'\x2', '\x1FC', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\x1FB', 
		'\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FF', '\x3', '\x2', '\x2', '\x2', 
		'\x1FE', '\x200', '\x5', '*', '\x16', '\x2', '\x1FF', '\x1FE', '\x3', 
		'\x2', '\x2', '\x2', '\x1FF', '\x200', '\x3', '\x2', '\x2', '\x2', '\x200', 
		'\x21E', '\x3', '\x2', '\x2', '\x2', '\x201', '\x202', '\a', '.', '\x2', 
		'\x2', '\x202', '\x203', '\a', '\x5', '\x2', '\x2', '\x203', '\x204', 
		'\x5', '\x42', '\"', '\x2', '\x204', '\x205', '\a', '\x6', '\x2', '\x2', 
		'\x205', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x206', '\x20D', '\a', 
		':', '\x2', '\x2', '\x207', '\x20E', '\x5', '$', '\x13', '\x2', '\x208', 
		'\x20E', '\x5', '\x46', '$', '\x2', '\x209', '\x20A', '\a', '\x5', '\x2', 
		'\x2', '\x20A', '\x20B', '\x5', '\x42', '\"', '\x2', '\x20B', '\x20C', 
		'\a', '\x6', '\x2', '\x2', '\x20C', '\x20E', '\x3', '\x2', '\x2', '\x2', 
		'\x20D', '\x207', '\x3', '\x2', '\x2', '\x2', '\x20D', '\x208', '\x3', 
		'\x2', '\x2', '\x2', '\x20D', '\x209', '\x3', '\x2', '\x2', '\x2', '\x20E', 
		'\x21E', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x210', '\a', '/', '\x2', 
		'\x2', '\x210', '\x21E', '\x5', '\xC0', '\x61', '\x2', '\x211', '\x21E', 
		'\x5', '(', '\x15', '\x2', '\x212', '\x213', '\a', '\xAB', '\x2', '\x2', 
		'\x213', '\x215', '\a', '\xAC', '\x2', '\x2', '\x214', '\x212', '\x3', 
		'\x2', '\x2', '\x2', '\x214', '\x215', '\x3', '\x2', '\x2', '\x2', '\x215', 
		'\x216', '\x3', '\x2', '\x2', '\x2', '\x216', '\x217', '\a', '#', '\x2', 
		'\x2', '\x217', '\x218', '\a', '\x5', '\x2', '\x2', '\x218', '\x219', 
		'\x5', '\x42', '\"', '\x2', '\x219', '\x21B', '\a', '\x6', '\x2', '\x2', 
		'\x21A', '\x21C', '\t', '\x5', '\x2', '\x2', '\x21B', '\x21A', '\x3', 
		'\x2', '\x2', '\x2', '\x21B', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x21C', 
		'\x21E', '\x3', '\x2', '\x2', '\x2', '\x21D', '\x1EC', '\x3', '\x2', '\x2', 
		'\x2', '\x21D', '\x1FC', '\x3', '\x2', '\x2', '\x2', '\x21D', '\x201', 
		'\x3', '\x2', '\x2', '\x2', '\x21D', '\x206', '\x3', '\x2', '\x2', '\x2', 
		'\x21D', '\x20F', '\x3', '\x2', '\x2', '\x2', '\x21D', '\x211', '\x3', 
		'\x2', '\x2', '\x2', '\x21D', '\x214', '\x3', '\x2', '\x2', '\x2', '\x21E', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x21F', '\x221', '\t', '\x6', '\x2', 
		'\x2', '\x220', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x220', '\x221', 
		'\x3', '\x2', '\x2', '\x2', '\x221', '\x222', '\x3', '\x2', '\x2', '\x2', 
		'\x222', '\x223', '\a', '\xBC', '\x2', '\x2', '\x223', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x224', '\x225', '\a', '\x33', '\x2', '\x2', '\x225', '\x227', 
		'\x5', '\xB4', '[', '\x2', '\x226', '\x224', '\x3', '\x2', '\x2', '\x2', 
		'\x226', '\x227', '\x3', '\x2', '\x2', '\x2', '\x227', '\x24D', '\x3', 
		'\x2', '\x2', '\x2', '\x228', '\x229', '\a', 's', '\x2', '\x2', '\x229', 
		'\x22C', '\a', '\x61', '\x2', '\x2', '\x22A', '\x22C', '\a', '\x8E', '\x2', 
		'\x2', '\x22B', '\x228', '\x3', '\x2', '\x2', '\x2', '\x22B', '\x22A', 
		'\x3', '\x2', '\x2', '\x2', '\x22C', '\x22D', '\x3', '\x2', '\x2', '\x2', 
		'\x22D', '\x22E', '\a', '\x5', '\x2', '\x2', '\x22E', '\x233', '\x5', 
		'\x1A', '\xE', '\x2', '\x22F', '\x230', '\a', '\a', '\x2', '\x2', '\x230', 
		'\x232', '\x5', '\x1A', '\xE', '\x2', '\x231', '\x22F', '\x3', '\x2', 
		'\x2', '\x2', '\x232', '\x235', '\x3', '\x2', '\x2', '\x2', '\x233', '\x231', 
		'\x3', '\x2', '\x2', '\x2', '\x233', '\x234', '\x3', '\x2', '\x2', '\x2', 
		'\x234', '\x236', '\x3', '\x2', '\x2', '\x2', '\x235', '\x233', '\x3', 
		'\x2', '\x2', '\x2', '\x236', '\x238', '\a', '\x6', '\x2', '\x2', '\x237', 
		'\x239', '\x5', '*', '\x16', '\x2', '\x238', '\x237', '\x3', '\x2', '\x2', 
		'\x2', '\x238', '\x239', '\x3', '\x2', '\x2', '\x2', '\x239', '\x24E', 
		'\x3', '\x2', '\x2', '\x2', '\x23A', '\x23B', '\a', '.', '\x2', '\x2', 
		'\x23B', '\x23C', '\a', '\x5', '\x2', '\x2', '\x23C', '\x23D', '\x5', 
		'\x42', '\"', '\x2', '\x23D', '\x23E', '\a', '\x6', '\x2', '\x2', '\x23E', 
		'\x24E', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x240', '\a', 'L', '\x2', 
		'\x2', '\x240', '\x241', '\a', '\x61', '\x2', '\x2', '\x241', '\x242', 
		'\a', '\x5', '\x2', '\x2', '\x242', '\x247', '\x5', '\xBE', '`', '\x2', 
		'\x243', '\x244', '\a', '\a', '\x2', '\x2', '\x244', '\x246', '\x5', '\xBE', 
		'`', '\x2', '\x245', '\x243', '\x3', '\x2', '\x2', '\x2', '\x246', '\x249', 
		'\x3', '\x2', '\x2', '\x2', '\x247', '\x245', '\x3', '\x2', '\x2', '\x2', 
		'\x247', '\x248', '\x3', '\x2', '\x2', '\x2', '\x248', '\x24A', '\x3', 
		'\x2', '\x2', '\x2', '\x249', '\x247', '\x3', '\x2', '\x2', '\x2', '\x24A', 
		'\x24B', '\a', '\x6', '\x2', '\x2', '\x24B', '\x24C', '\x5', '(', '\x15', 
		'\x2', '\x24C', '\x24E', '\x3', '\x2', '\x2', '\x2', '\x24D', '\x22B', 
		'\x3', '\x2', '\x2', '\x2', '\x24D', '\x23A', '\x3', '\x2', '\x2', '\x2', 
		'\x24D', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x24E', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x24F', '\x250', '\a', 'w', '\x2', '\x2', '\x250', '\x25C', 
		'\x5', '\xC2', '\x62', '\x2', '\x251', '\x252', '\a', '\x5', '\x2', '\x2', 
		'\x252', '\x257', '\x5', '\xBE', '`', '\x2', '\x253', '\x254', '\a', '\a', 
		'\x2', '\x2', '\x254', '\x256', '\x5', '\xBE', '`', '\x2', '\x255', '\x253', 
		'\x3', '\x2', '\x2', '\x2', '\x256', '\x259', '\x3', '\x2', '\x2', '\x2', 
		'\x257', '\x255', '\x3', '\x2', '\x2', '\x2', '\x257', '\x258', '\x3', 
		'\x2', '\x2', '\x2', '\x258', '\x25A', '\x3', '\x2', '\x2', '\x2', '\x259', 
		'\x257', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x25B', '\a', '\x6', '\x2', 
		'\x2', '\x25B', '\x25D', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x251', 
		'\x3', '\x2', '\x2', '\x2', '\x25C', '\x25D', '\x3', '\x2', '\x2', '\x2', 
		'\x25D', '\x26C', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x25F', '\a', 
		'm', '\x2', '\x2', '\x25F', '\x266', '\t', '\a', '\x2', '\x2', '\x260', 
		'\x261', '\a', '\x85', '\x2', '\x2', '\x261', '\x267', '\t', '\b', '\x2', 
		'\x2', '\x262', '\x267', '\a', '+', '\x2', '\x2', '\x263', '\x267', '\a', 
		'}', '\x2', '\x2', '\x264', '\x265', '\a', 'g', '\x2', '\x2', '\x265', 
		'\x267', '\a', '\x1C', '\x2', '\x2', '\x266', '\x260', '\x3', '\x2', '\x2', 
		'\x2', '\x266', '\x262', '\x3', '\x2', '\x2', '\x2', '\x266', '\x263', 
		'\x3', '\x2', '\x2', '\x2', '\x266', '\x264', '\x3', '\x2', '\x2', '\x2', 
		'\x267', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x268', '\x269', '\a', 
		'\x65', '\x2', '\x2', '\x269', '\x26B', '\x5', '\xB4', '[', '\x2', '\x26A', 
		'\x25E', '\x3', '\x2', '\x2', '\x2', '\x26A', '\x268', '\x3', '\x2', '\x2', 
		'\x2', '\x26B', '\x26E', '\x3', '\x2', '\x2', '\x2', '\x26C', '\x26A', 
		'\x3', '\x2', '\x2', '\x2', '\x26C', '\x26D', '\x3', '\x2', '\x2', '\x2', 
		'\x26D', '\x277', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x26C', '\x3', 
		'\x2', '\x2', '\x2', '\x26F', '\x271', '\a', 'h', '\x2', '\x2', '\x270', 
		'\x26F', '\x3', '\x2', '\x2', '\x2', '\x270', '\x271', '\x3', '\x2', '\x2', 
		'\x2', '\x271', '\x272', '\x3', '\x2', '\x2', '\x2', '\x272', '\x275', 
		'\a', ';', '\x2', '\x2', '\x273', '\x274', '\a', 'X', '\x2', '\x2', '\x274', 
		'\x276', '\t', '\t', '\x2', '\x2', '\x275', '\x273', '\x3', '\x2', '\x2', 
		'\x2', '\x275', '\x276', '\x3', '\x2', '\x2', '\x2', '\x276', '\x278', 
		'\x3', '\x2', '\x2', '\x2', '\x277', '\x270', '\x3', '\x2', '\x2', '\x2', 
		'\x277', '\x278', '\x3', '\x2', '\x2', '\x2', '\x278', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x279', '\x27A', '\a', 'm', '\x2', '\x2', '\x27A', '\x27B', 
		'\a', '\x32', '\x2', '\x2', '\x27B', '\x27C', '\t', '\n', '\x2', '\x2', 
		'\x27C', '+', '\x3', '\x2', '\x2', '\x2', '\x27D', '\x27F', '\a', '\x34', 
		'\x2', '\x2', '\x27E', '\x280', '\t', '\x4', '\x2', '\x2', '\x27F', '\x27E', 
		'\x3', '\x2', '\x2', '\x2', '\x27F', '\x280', '\x3', '\x2', '\x2', '\x2', 
		'\x280', '\x281', '\x3', '\x2', '\x2', '\x2', '\x281', '\x285', '\a', 
		'\x8C', '\x2', '\x2', '\x282', '\x283', '\a', 'R', '\x2', '\x2', '\x283', 
		'\x284', '\a', 'h', '\x2', '\x2', '\x284', '\x286', '\a', 'H', '\x2', 
		'\x2', '\x285', '\x282', '\x3', '\x2', '\x2', '\x2', '\x285', '\x286', 
		'\x3', '\x2', '\x2', '\x2', '\x286', '\x28A', '\x3', '\x2', '\x2', '\x2', 
		'\x287', '\x288', '\x5', '\xB8', ']', '\x2', '\x288', '\x289', '\a', '\x4', 
		'\x2', '\x2', '\x289', '\x28B', '\x3', '\x2', '\x2', '\x2', '\x28A', '\x287', 
		'\x3', '\x2', '\x2', '\x2', '\x28A', '\x28B', '\x3', '\x2', '\x2', '\x2', 
		'\x28B', '\x28C', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x291', '\x5', 
		'\xC6', '\x64', '\x2', '\x28D', '\x292', '\a', '\'', '\x2', '\x2', '\x28E', 
		'\x292', '\a', '\x1E', '\x2', '\x2', '\x28F', '\x290', '\a', '[', '\x2', 
		'\x2', '\x290', '\x292', '\a', 'k', '\x2', '\x2', '\x291', '\x28D', '\x3', 
		'\x2', '\x2', '\x2', '\x291', '\x28E', '\x3', '\x2', '\x2', '\x2', '\x291', 
		'\x28F', '\x3', '\x2', '\x2', '\x2', '\x291', '\x292', '\x3', '\x2', '\x2', 
		'\x2', '\x292', '\x2A1', '\x3', '\x2', '\x2', '\x2', '\x293', '\x2A2', 
		'\a', '=', '\x2', '\x2', '\x294', '\x2A2', '\a', 'Z', '\x2', '\x2', '\x295', 
		'\x29F', '\a', '\x8F', '\x2', '\x2', '\x296', '\x297', '\a', 'k', '\x2', 
		'\x2', '\x297', '\x29C', '\x5', '\xBE', '`', '\x2', '\x298', '\x299', 
		'\a', '\a', '\x2', '\x2', '\x299', '\x29B', '\x5', '\xBE', '`', '\x2', 
		'\x29A', '\x298', '\x3', '\x2', '\x2', '\x2', '\x29B', '\x29E', '\x3', 
		'\x2', '\x2', '\x2', '\x29C', '\x29A', '\x3', '\x2', '\x2', '\x2', '\x29C', 
		'\x29D', '\x3', '\x2', '\x2', '\x2', '\x29D', '\x2A0', '\x3', '\x2', '\x2', 
		'\x2', '\x29E', '\x29C', '\x3', '\x2', '\x2', '\x2', '\x29F', '\x296', 
		'\x3', '\x2', '\x2', '\x2', '\x29F', '\x2A0', '\x3', '\x2', '\x2', '\x2', 
		'\x2A0', '\x2A2', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x293', '\x3', 
		'\x2', '\x2', '\x2', '\x2A1', '\x294', '\x3', '\x2', '\x2', '\x2', '\x2A1', 
		'\x295', '\x3', '\x2', '\x2', '\x2', '\x2A2', '\x2A3', '\x3', '\x2', '\x2', 
		'\x2', '\x2A3', '\x2A4', '\a', 'm', '\x2', '\x2', '\x2A4', '\x2A8', '\x5', 
		'\xBA', '^', '\x2', '\x2A5', '\x2A6', '\a', 'K', '\x2', '\x2', '\x2A6', 
		'\x2A7', '\a', '\x42', '\x2', '\x2', '\x2A7', '\x2A9', '\a', '\x81', '\x2', 
		'\x2', '\x2A8', '\x2A5', '\x3', '\x2', '\x2', '\x2', '\x2A8', '\x2A9', 
		'\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2AC', '\x3', '\x2', '\x2', '\x2', 
		'\x2AA', '\x2AB', '\a', '\x95', '\x2', '\x2', '\x2AB', '\x2AD', '\x5', 
		'\x42', '\"', '\x2', '\x2AC', '\x2AA', '\x3', '\x2', '\x2', '\x2', '\x2AC', 
		'\x2AD', '\x3', '\x2', '\x2', '\x2', '\x2AD', '\x2AE', '\x3', '\x2', '\x2', 
		'\x2', '\x2AE', '\x2B7', '\a', '(', '\x2', '\x2', '\x2AF', '\x2B4', '\x5', 
		'n', '\x38', '\x2', '\x2B0', '\x2B4', '\x5', 'L', '\'', '\x2', '\x2B1', 
		'\x2B4', '\x5', ':', '\x1E', '\x2', '\x2B2', '\x2B4', '\x5', 'X', '-', 
		'\x2', '\x2B3', '\x2AF', '\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2B0', 
		'\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2B1', '\x3', '\x2', '\x2', '\x2', 
		'\x2B3', '\x2B2', '\x3', '\x2', '\x2', '\x2', '\x2B4', '\x2B5', '\x3', 
		'\x2', '\x2', '\x2', '\x2B5', '\x2B6', '\a', '\x3', '\x2', '\x2', '\x2B6', 
		'\x2B8', '\x3', '\x2', '\x2', '\x2', '\x2B7', '\x2B3', '\x3', '\x2', '\x2', 
		'\x2', '\x2B8', '\x2B9', '\x3', '\x2', '\x2', '\x2', '\x2B9', '\x2B7', 
		'\x3', '\x2', '\x2', '\x2', '\x2B9', '\x2BA', '\x3', '\x2', '\x2', '\x2', 
		'\x2BA', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2BB', '\x2BC', '\a', 
		'\x44', '\x2', '\x2', '\x2BC', '-', '\x3', '\x2', '\x2', '\x2', '\x2BD', 
		'\x2BF', '\a', '\x34', '\x2', '\x2', '\x2BE', '\x2C0', '\t', '\x4', '\x2', 
		'\x2', '\x2BF', '\x2BE', '\x3', '\x2', '\x2', '\x2', '\x2BF', '\x2C0', 
		'\x3', '\x2', '\x2', '\x2', '\x2C0', '\x2C1', '\x3', '\x2', '\x2', '\x2', 
		'\x2C1', '\x2C5', '\a', '\x93', '\x2', '\x2', '\x2C2', '\x2C3', '\a', 
		'R', '\x2', '\x2', '\x2C3', '\x2C4', '\a', 'h', '\x2', '\x2', '\x2C4', 
		'\x2C6', '\a', 'H', '\x2', '\x2', '\x2C5', '\x2C2', '\x3', '\x2', '\x2', 
		'\x2', '\x2C5', '\x2C6', '\x3', '\x2', '\x2', '\x2', '\x2C6', '\x2CA', 
		'\x3', '\x2', '\x2', '\x2', '\x2C7', '\x2C8', '\x5', '\xB8', ']', '\x2', 
		'\x2C8', '\x2C9', '\a', '\x4', '\x2', '\x2', '\x2C9', '\x2CB', '\x3', 
		'\x2', '\x2', '\x2', '\x2CA', '\x2C7', '\x3', '\x2', '\x2', '\x2', '\x2CA', 
		'\x2CB', '\x3', '\x2', '\x2', '\x2', '\x2CB', '\x2CC', '\x3', '\x2', '\x2', 
		'\x2', '\x2CC', '\x2D8', '\x5', '\xC8', '\x65', '\x2', '\x2CD', '\x2CE', 
		'\a', '\x5', '\x2', '\x2', '\x2CE', '\x2D3', '\x5', '\xBE', '`', '\x2', 
		'\x2CF', '\x2D0', '\a', '\a', '\x2', '\x2', '\x2D0', '\x2D2', '\x5', '\xBE', 
		'`', '\x2', '\x2D1', '\x2CF', '\x3', '\x2', '\x2', '\x2', '\x2D2', '\x2D5', 
		'\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2D1', '\x3', '\x2', '\x2', '\x2', 
		'\x2D3', '\x2D4', '\x3', '\x2', '\x2', '\x2', '\x2D4', '\x2D6', '\x3', 
		'\x2', '\x2', '\x2', '\x2D5', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x2D6', 
		'\x2D7', '\a', '\x6', '\x2', '\x2', '\x2D7', '\x2D9', '\x3', '\x2', '\x2', 
		'\x2', '\x2D8', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x2D8', '\x2D9', 
		'\x3', '\x2', '\x2', '\x2', '\x2D9', '\x2DA', '\x3', '\x2', '\x2', '\x2', 
		'\x2DA', '\x2DB', '\a', '#', '\x2', '\x2', '\x2DB', '\x2DC', '\x5', 'X', 
		'-', '\x2', '\x2DC', '/', '\x3', '\x2', '\x2', '\x2', '\x2DD', '\x2DE', 
		'\a', '\x34', '\x2', '\x2', '\x2DE', '\x2DF', '\a', '\x94', '\x2', '\x2', 
		'\x2DF', '\x2E3', '\a', '\x86', '\x2', '\x2', '\x2E0', '\x2E1', '\a', 
		'R', '\x2', '\x2', '\x2E1', '\x2E2', '\a', 'h', '\x2', '\x2', '\x2E2', 
		'\x2E4', '\a', 'H', '\x2', '\x2', '\x2E3', '\x2E0', '\x3', '\x2', '\x2', 
		'\x2', '\x2E3', '\x2E4', '\x3', '\x2', '\x2', '\x2', '\x2E4', '\x2E8', 
		'\x3', '\x2', '\x2', '\x2', '\x2E5', '\x2E6', '\x5', '\xB8', ']', '\x2', 
		'\x2E6', '\x2E7', '\a', '\x4', '\x2', '\x2', '\x2E7', '\x2E9', '\x3', 
		'\x2', '\x2', '\x2', '\x2E8', '\x2E5', '\x3', '\x2', '\x2', '\x2', '\x2E8', 
		'\x2E9', '\x3', '\x2', '\x2', '\x2', '\x2E9', '\x2EA', '\x3', '\x2', '\x2', 
		'\x2', '\x2EA', '\x2EB', '\x5', '\xBA', '^', '\x2', '\x2EB', '\x2EC', 
		'\a', '\x90', '\x2', '\x2', '\x2EC', '\x2F8', '\x5', '\xCA', '\x66', '\x2', 
		'\x2ED', '\x2EE', '\a', '\x5', '\x2', '\x2', '\x2EE', '\x2F3', '\x5', 
		'\xAE', 'X', '\x2', '\x2EF', '\x2F0', '\a', '\a', '\x2', '\x2', '\x2F0', 
		'\x2F2', '\x5', '\xAE', 'X', '\x2', '\x2F1', '\x2EF', '\x3', '\x2', '\x2', 
		'\x2', '\x2F2', '\x2F5', '\x3', '\x2', '\x2', '\x2', '\x2F3', '\x2F1', 
		'\x3', '\x2', '\x2', '\x2', '\x2F3', '\x2F4', '\x3', '\x2', '\x2', '\x2', 
		'\x2F4', '\x2F6', '\x3', '\x2', '\x2', '\x2', '\x2F5', '\x2F3', '\x3', 
		'\x2', '\x2', '\x2', '\x2F6', '\x2F7', '\a', '\x6', '\x2', '\x2', '\x2F7', 
		'\x2F9', '\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2ED', '\x3', '\x2', '\x2', 
		'\x2', '\x2F8', '\x2F9', '\x3', '\x2', '\x2', '\x2', '\x2F9', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x2FA', '\x2FC', '\a', '\x97', '\x2', '\x2', 
		'\x2FB', '\x2FD', '\a', 'v', '\x2', '\x2', '\x2FC', '\x2FB', '\x3', '\x2', 
		'\x2', '\x2', '\x2FC', '\x2FD', '\x3', '\x2', '\x2', '\x2', '\x2FD', '\x2FE', 
		'\x3', '\x2', '\x2', '\x2', '\x2FE', '\x2FF', '\x5', '\x34', '\x1B', '\x2', 
		'\x2FF', '\x300', '\a', '#', '\x2', '\x2', '\x300', '\x301', '\a', '\x5', 
		'\x2', '\x2', '\x301', '\x302', '\x5', 'X', '-', '\x2', '\x302', '\x30C', 
		'\a', '\x6', '\x2', '\x2', '\x303', '\x304', '\a', '\a', '\x2', '\x2', 
		'\x304', '\x305', '\x5', '\x34', '\x1B', '\x2', '\x305', '\x306', '\a', 
		'#', '\x2', '\x2', '\x306', '\x307', '\a', '\x5', '\x2', '\x2', '\x307', 
		'\x308', '\x5', 'X', '-', '\x2', '\x308', '\x309', '\a', '\x6', '\x2', 
		'\x2', '\x309', '\x30B', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x303', 
		'\x3', '\x2', '\x2', '\x2', '\x30B', '\x30E', '\x3', '\x2', '\x2', '\x2', 
		'\x30C', '\x30A', '\x3', '\x2', '\x2', '\x2', '\x30C', '\x30D', '\x3', 
		'\x2', '\x2', '\x2', '\x30D', '\x33', '\x3', '\x2', '\x2', '\x2', '\x30E', 
		'\x30C', '\x3', '\x2', '\x2', '\x2', '\x30F', '\x31B', '\x5', '\xBA', 
		'^', '\x2', '\x310', '\x311', '\a', '\x5', '\x2', '\x2', '\x311', '\x316', 
		'\x5', '\xBE', '`', '\x2', '\x312', '\x313', '\a', '\a', '\x2', '\x2', 
		'\x313', '\x315', '\x5', '\xBE', '`', '\x2', '\x314', '\x312', '\x3', 
		'\x2', '\x2', '\x2', '\x315', '\x318', '\x3', '\x2', '\x2', '\x2', '\x316', 
		'\x314', '\x3', '\x2', '\x2', '\x2', '\x316', '\x317', '\x3', '\x2', '\x2', 
		'\x2', '\x317', '\x319', '\x3', '\x2', '\x2', '\x2', '\x318', '\x316', 
		'\x3', '\x2', '\x2', '\x2', '\x319', '\x31A', '\a', '\x6', '\x2', '\x2', 
		'\x31A', '\x31C', '\x3', '\x2', '\x2', '\x2', '\x31B', '\x310', '\x3', 
		'\x2', '\x2', '\x2', '\x31B', '\x31C', '\x3', '\x2', '\x2', '\x2', '\x31C', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x31D', '\x31E', '\x5', '\x34', '\x1B', 
		'\x2', '\x31E', '\x31F', '\a', '#', '\x2', '\x2', '\x31F', '\x320', '\a', 
		'\x5', '\x2', '\x2', '\x320', '\x321', '\x5', '\xA6', 'T', '\x2', '\x321', 
		'\x323', '\a', '\x8D', '\x2', '\x2', '\x322', '\x324', '\a', '\x1F', '\x2', 
		'\x2', '\x323', '\x322', '\x3', '\x2', '\x2', '\x2', '\x323', '\x324', 
		'\x3', '\x2', '\x2', '\x2', '\x324', '\x325', '\x3', '\x2', '\x2', '\x2', 
		'\x325', '\x326', '\x5', '\xA8', 'U', '\x2', '\x326', '\x327', '\a', '\x6', 
		'\x2', '\x2', '\x327', '\x37', '\x3', '\x2', '\x2', '\x2', '\x328', '\x334', 
		'\x5', '\xBA', '^', '\x2', '\x329', '\x32A', '\a', '\x5', '\x2', '\x2', 
		'\x32A', '\x32F', '\x5', '\xBE', '`', '\x2', '\x32B', '\x32C', '\a', '\a', 
		'\x2', '\x2', '\x32C', '\x32E', '\x5', '\xBE', '`', '\x2', '\x32D', '\x32B', 
		'\x3', '\x2', '\x2', '\x2', '\x32E', '\x331', '\x3', '\x2', '\x2', '\x2', 
		'\x32F', '\x32D', '\x3', '\x2', '\x2', '\x2', '\x32F', '\x330', '\x3', 
		'\x2', '\x2', '\x2', '\x330', '\x332', '\x3', '\x2', '\x2', '\x2', '\x331', 
		'\x32F', '\x3', '\x2', '\x2', '\x2', '\x332', '\x333', '\a', '\x6', '\x2', 
		'\x2', '\x333', '\x335', '\x3', '\x2', '\x2', '\x2', '\x334', '\x329', 
		'\x3', '\x2', '\x2', '\x2', '\x334', '\x335', '\x3', '\x2', '\x2', '\x2', 
		'\x335', '\x336', '\x3', '\x2', '\x2', '\x2', '\x336', '\x337', '\a', 
		'#', '\x2', '\x2', '\x337', '\x338', '\a', '\x5', '\x2', '\x2', '\x338', 
		'\x339', '\x5', 'X', '-', '\x2', '\x339', '\x33A', '\a', '\x6', '\x2', 
		'\x2', '\x33A', '\x39', '\x3', '\x2', '\x2', '\x2', '\x33B', '\x33D', 
		'\x5', '\x32', '\x1A', '\x2', '\x33C', '\x33B', '\x3', '\x2', '\x2', '\x2', 
		'\x33C', '\x33D', '\x3', '\x2', '\x2', '\x2', '\x33D', '\x33E', '\x3', 
		'\x2', '\x2', '\x2', '\x33E', '\x33F', '\a', '=', '\x2', '\x2', '\x33F', 
		'\x340', '\a', 'M', '\x2', '\x2', '\x340', '\x343', '\x5', 't', ';', '\x2', 
		'\x341', '\x342', '\a', '\x96', '\x2', '\x2', '\x342', '\x344', '\x5', 
		'\x42', '\"', '\x2', '\x343', '\x341', '\x3', '\x2', '\x2', '\x2', '\x343', 
		'\x344', '\x3', '\x2', '\x2', '\x2', '\x344', '\x346', '\x3', '\x2', '\x2', 
		'\x2', '\x345', '\x347', '\x5', 'N', '(', '\x2', '\x346', '\x345', '\x3', 
		'\x2', '\x2', '\x2', '\x346', '\x347', '\x3', '\x2', '\x2', '\x2', '\x347', 
		';', '\x3', '\x2', '\x2', '\x2', '\x348', '\x34A', '\x5', '\x32', '\x1A', 
		'\x2', '\x349', '\x348', '\x3', '\x2', '\x2', '\x2', '\x349', '\x34A', 
		'\x3', '\x2', '\x2', '\x2', '\x34A', '\x34B', '\x3', '\x2', '\x2', '\x2', 
		'\x34B', '\x34C', '\a', '=', '\x2', '\x2', '\x34C', '\x34D', '\a', 'M', 
		'\x2', '\x2', '\x34D', '\x350', '\x5', 't', ';', '\x2', '\x34E', '\x34F', 
		'\a', '\x96', '\x2', '\x2', '\x34F', '\x351', '\x5', '\x42', '\"', '\x2', 
		'\x350', '\x34E', '\x3', '\x2', '\x2', '\x2', '\x350', '\x351', '\x3', 
		'\x2', '\x2', '\x2', '\x351', '\x353', '\x3', '\x2', '\x2', '\x2', '\x352', 
		'\x354', '\x5', 'N', '(', '\x2', '\x353', '\x352', '\x3', '\x2', '\x2', 
		'\x2', '\x353', '\x354', '\x3', '\x2', '\x2', '\x2', '\x354', '\x359', 
		'\x3', '\x2', '\x2', '\x2', '\x355', '\x357', '\x5', '\x8A', '\x46', '\x2', 
		'\x356', '\x355', '\x3', '\x2', '\x2', '\x2', '\x356', '\x357', '\x3', 
		'\x2', '\x2', '\x2', '\x357', '\x358', '\x3', '\x2', '\x2', '\x2', '\x358', 
		'\x35A', '\x5', '\x8C', 'G', '\x2', '\x359', '\x356', '\x3', '\x2', '\x2', 
		'\x2', '\x359', '\x35A', '\x3', '\x2', '\x2', '\x2', '\x35A', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x35B', '\x35D', '\a', '?', '\x2', '\x2', '\x35C', 
		'\x35E', '\a', '\x39', '\x2', '\x2', '\x35D', '\x35C', '\x3', '\x2', '\x2', 
		'\x2', '\x35D', '\x35E', '\x3', '\x2', '\x2', '\x2', '\x35E', '\x35F', 
		'\x3', '\x2', '\x2', '\x2', '\x35F', '\x360', '\x5', '\xB8', ']', '\x2', 
		'\x360', '?', '\x3', '\x2', '\x2', '\x2', '\x361', '\x362', '\a', '\x41', 
		'\x2', '\x2', '\x362', '\x365', '\t', '\v', '\x2', '\x2', '\x363', '\x364', 
		'\a', 'R', '\x2', '\x2', '\x364', '\x366', '\a', 'H', '\x2', '\x2', '\x365', 
		'\x363', '\x3', '\x2', '\x2', '\x2', '\x365', '\x366', '\x3', '\x2', '\x2', 
		'\x2', '\x366', '\x36A', '\x3', '\x2', '\x2', '\x2', '\x367', '\x368', 
		'\x5', '\xB8', ']', '\x2', '\x368', '\x369', '\a', '\x4', '\x2', '\x2', 
		'\x369', '\x36B', '\x3', '\x2', '\x2', '\x2', '\x36A', '\x367', '\x3', 
		'\x2', '\x2', '\x2', '\x36A', '\x36B', '\x3', '\x2', '\x2', '\x2', '\x36B', 
		'\x36C', '\x3', '\x2', '\x2', '\x2', '\x36C', '\x36D', '\x5', '\xE2', 
		'r', '\x2', '\x36D', '\x41', '\x3', '\x2', '\x2', '\x2', '\x36E', '\x36F', 
		'\b', '\"', '\x1', '\x2', '\x36F', '\x3C7', '\x5', '\x46', '$', '\x2', 
		'\x370', '\x3C7', '\a', '\xBD', '\x2', '\x2', '\x371', '\x372', '\x5', 
		'\xB8', ']', '\x2', '\x372', '\x373', '\a', '\x4', '\x2', '\x2', '\x373', 
		'\x375', '\x3', '\x2', '\x2', '\x2', '\x374', '\x371', '\x3', '\x2', '\x2', 
		'\x2', '\x374', '\x375', '\x3', '\x2', '\x2', '\x2', '\x375', '\x376', 
		'\x3', '\x2', '\x2', '\x2', '\x376', '\x377', '\x5', '\xBA', '^', '\x2', 
		'\x377', '\x378', '\a', '\x4', '\x2', '\x2', '\x378', '\x37A', '\x3', 
		'\x2', '\x2', '\x2', '\x379', '\x374', '\x3', '\x2', '\x2', '\x2', '\x379', 
		'\x37A', '\x3', '\x2', '\x2', '\x2', '\x37A', '\x37B', '\x3', '\x2', '\x2', 
		'\x2', '\x37B', '\x3C7', '\x5', '\xBE', '`', '\x2', '\x37C', '\x37D', 
		'\x5', '\xAA', 'V', '\x2', '\x37D', '\x37E', '\x5', '\x42', '\"', '\x17', 
		'\x37E', '\x3C7', '\x3', '\x2', '\x2', '\x2', '\x37F', '\x380', '\x5', 
		'\xB6', '\\', '\x2', '\x380', '\x38D', '\a', '\x5', '\x2', '\x2', '\x381', 
		'\x383', '\a', '@', '\x2', '\x2', '\x382', '\x381', '\x3', '\x2', '\x2', 
		'\x2', '\x382', '\x383', '\x3', '\x2', '\x2', '\x2', '\x383', '\x384', 
		'\x3', '\x2', '\x2', '\x2', '\x384', '\x389', '\x5', '\x42', '\"', '\x2', 
		'\x385', '\x386', '\a', '\a', '\x2', '\x2', '\x386', '\x388', '\x5', '\x42', 
		'\"', '\x2', '\x387', '\x385', '\x3', '\x2', '\x2', '\x2', '\x388', '\x38B', 
		'\x3', '\x2', '\x2', '\x2', '\x389', '\x387', '\x3', '\x2', '\x2', '\x2', 
		'\x389', '\x38A', '\x3', '\x2', '\x2', '\x2', '\x38A', '\x38E', '\x3', 
		'\x2', '\x2', '\x2', '\x38B', '\x389', '\x3', '\x2', '\x2', '\x2', '\x38C', 
		'\x38E', '\a', '\t', '\x2', '\x2', '\x38D', '\x382', '\x3', '\x2', '\x2', 
		'\x2', '\x38D', '\x38C', '\x3', '\x2', '\x2', '\x2', '\x38D', '\x38E', 
		'\x3', '\x2', '\x2', '\x2', '\x38E', '\x38F', '\x3', '\x2', '\x2', '\x2', 
		'\x38F', '\x391', '\a', '\x6', '\x2', '\x2', '\x390', '\x392', '\x5', 
		'x', '=', '\x2', '\x391', '\x390', '\x3', '\x2', '\x2', '\x2', '\x391', 
		'\x392', '\x3', '\x2', '\x2', '\x2', '\x392', '\x394', '\x3', '\x2', '\x2', 
		'\x2', '\x393', '\x395', '\x5', '|', '?', '\x2', '\x394', '\x393', '\x3', 
		'\x2', '\x2', '\x2', '\x394', '\x395', '\x3', '\x2', '\x2', '\x2', '\x395', 
		'\x3C7', '\x3', '\x2', '\x2', '\x2', '\x396', '\x397', '\a', '\x5', '\x2', 
		'\x2', '\x397', '\x39C', '\x5', '\x42', '\"', '\x2', '\x398', '\x399', 
		'\a', '\a', '\x2', '\x2', '\x399', '\x39B', '\x5', '\x42', '\"', '\x2', 
		'\x39A', '\x398', '\x3', '\x2', '\x2', '\x2', '\x39B', '\x39E', '\x3', 
		'\x2', '\x2', '\x2', '\x39C', '\x39A', '\x3', '\x2', '\x2', '\x2', '\x39C', 
		'\x39D', '\x3', '\x2', '\x2', '\x2', '\x39D', '\x39F', '\x3', '\x2', '\x2', 
		'\x2', '\x39E', '\x39C', '\x3', '\x2', '\x2', '\x2', '\x39F', '\x3A0', 
		'\a', '\x6', '\x2', '\x2', '\x3A0', '\x3C7', '\x3', '\x2', '\x2', '\x2', 
		'\x3A1', '\x3A2', '\a', '-', '\x2', '\x2', '\x3A2', '\x3A3', '\a', '\x5', 
		'\x2', '\x2', '\x3A3', '\x3A4', '\x5', '\x42', '\"', '\x2', '\x3A4', '\x3A5', 
		'\a', '#', '\x2', '\x2', '\x3A5', '\x3A6', '\x5', ' ', '\x11', '\x2', 
		'\x3A6', '\x3A7', '\a', '\x6', '\x2', '\x2', '\x3A7', '\x3C7', '\x3', 
		'\x2', '\x2', '\x2', '\x3A8', '\x3AA', '\a', 'h', '\x2', '\x2', '\x3A9', 
		'\x3A8', '\x3', '\x2', '\x2', '\x2', '\x3A9', '\x3AA', '\x3', '\x2', '\x2', 
		'\x2', '\x3AA', '\x3AB', '\x3', '\x2', '\x2', '\x2', '\x3AB', '\x3AD', 
		'\a', 'H', '\x2', '\x2', '\x3AC', '\x3A9', '\x3', '\x2', '\x2', '\x2', 
		'\x3AC', '\x3AD', '\x3', '\x2', '\x2', '\x2', '\x3AD', '\x3AE', '\x3', 
		'\x2', '\x2', '\x2', '\x3AE', '\x3AF', '\a', '\x5', '\x2', '\x2', '\x3AF', 
		'\x3B0', '\x5', 'X', '-', '\x2', '\x3B0', '\x3B1', '\a', '\x6', '\x2', 
		'\x2', '\x3B1', '\x3C7', '\x3', '\x2', '\x2', '\x2', '\x3B2', '\x3B4', 
		'\a', ',', '\x2', '\x2', '\x3B3', '\x3B5', '\x5', '\x42', '\"', '\x2', 
		'\x3B4', '\x3B3', '\x3', '\x2', '\x2', '\x2', '\x3B4', '\x3B5', '\x3', 
		'\x2', '\x2', '\x2', '\x3B5', '\x3BB', '\x3', '\x2', '\x2', '\x2', '\x3B6', 
		'\x3B7', '\a', '\x95', '\x2', '\x2', '\x3B7', '\x3B8', '\x5', '\x42', 
		'\"', '\x2', '\x3B8', '\x3B9', '\a', '\x89', '\x2', '\x2', '\x3B9', '\x3BA', 
		'\x5', '\x42', '\"', '\x2', '\x3BA', '\x3BC', '\x3', '\x2', '\x2', '\x2', 
		'\x3BB', '\x3B6', '\x3', '\x2', '\x2', '\x2', '\x3BC', '\x3BD', '\x3', 
		'\x2', '\x2', '\x2', '\x3BD', '\x3BB', '\x3', '\x2', '\x2', '\x2', '\x3BD', 
		'\x3BE', '\x3', '\x2', '\x2', '\x2', '\x3BE', '\x3C1', '\x3', '\x2', '\x2', 
		'\x2', '\x3BF', '\x3C0', '\a', '\x43', '\x2', '\x2', '\x3C0', '\x3C2', 
		'\x5', '\x42', '\"', '\x2', '\x3C1', '\x3BF', '\x3', '\x2', '\x2', '\x2', 
		'\x3C1', '\x3C2', '\x3', '\x2', '\x2', '\x2', '\x3C2', '\x3C3', '\x3', 
		'\x2', '\x2', '\x2', '\x3C3', '\x3C4', '\a', '\x44', '\x2', '\x2', '\x3C4', 
		'\x3C7', '\x3', '\x2', '\x2', '\x2', '\x3C5', '\x3C7', '\x5', '\x44', 
		'#', '\x2', '\x3C6', '\x36E', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x370', 
		'\x3', '\x2', '\x2', '\x2', '\x3C6', '\x379', '\x3', '\x2', '\x2', '\x2', 
		'\x3C6', '\x37C', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x37F', '\x3', 
		'\x2', '\x2', '\x2', '\x3C6', '\x396', '\x3', '\x2', '\x2', '\x2', '\x3C6', 
		'\x3A1', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3AC', '\x3', '\x2', '\x2', 
		'\x2', '\x3C6', '\x3B2', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3C5', 
		'\x3', '\x2', '\x2', '\x2', '\x3C7', '\x445', '\x3', '\x2', '\x2', '\x2', 
		'\x3C8', '\x3C9', '\f', '\x16', '\x2', '\x2', '\x3C9', '\x3CA', '\a', 
		'\r', '\x2', '\x2', '\x3CA', '\x444', '\x5', '\x42', '\"', '\x17', '\x3CB', 
		'\x3CC', '\f', '\x15', '\x2', '\x2', '\x3CC', '\x3CD', '\t', '\f', '\x2', 
		'\x2', '\x3CD', '\x444', '\x5', '\x42', '\"', '\x16', '\x3CE', '\x3CF', 
		'\f', '\x14', '\x2', '\x2', '\x3CF', '\x3D0', '\t', '\x6', '\x2', '\x2', 
		'\x3D0', '\x444', '\x5', '\x42', '\"', '\x15', '\x3D1', '\x3D2', '\f', 
		'\x13', '\x2', '\x2', '\x3D2', '\x3D3', '\t', '\r', '\x2', '\x2', '\x3D3', 
		'\x444', '\x5', '\x42', '\"', '\x14', '\x3D4', '\x3D5', '\f', '\x12', 
		'\x2', '\x2', '\x3D5', '\x3D6', '\t', '\xE', '\x2', '\x2', '\x3D6', '\x444', 
		'\x5', '\x42', '\"', '\x13', '\x3D7', '\x3EA', '\f', '\x11', '\x2', '\x2', 
		'\x3D8', '\x3EB', '\a', '\b', '\x2', '\x2', '\x3D9', '\x3EB', '\a', '\x18', 
		'\x2', '\x2', '\x3DA', '\x3EB', '\a', '\x19', '\x2', '\x2', '\x3DB', '\x3EB', 
		'\a', '\x1A', '\x2', '\x2', '\x3DC', '\x3EB', '\a', '^', '\x2', '\x2', 
		'\x3DD', '\x3DE', '\a', '^', '\x2', '\x2', '\x3DE', '\x3EB', '\a', 'h', 
		'\x2', '\x2', '\x3DF', '\x3E1', '\a', '^', '\x2', '\x2', '\x3E0', '\x3E2', 
		'\a', 'h', '\x2', '\x2', '\x3E1', '\x3E0', '\x3', '\x2', '\x2', '\x2', 
		'\x3E1', '\x3E2', '\x3', '\x2', '\x2', '\x2', '\x3E2', '\x3E3', '\x3', 
		'\x2', '\x2', '\x2', '\x3E3', '\x3E4', '\a', '@', '\x2', '\x2', '\x3E4', 
		'\x3EB', '\a', 'M', '\x2', '\x2', '\x3E5', '\x3EB', '\a', 'U', '\x2', 
		'\x2', '\x3E6', '\x3EB', '\a', '\x63', '\x2', '\x2', '\x3E7', '\x3EB', 
		'\a', 'O', '\x2', '\x2', '\x3E8', '\x3EB', '\a', '\x65', '\x2', '\x2', 
		'\x3E9', '\x3EB', '\a', 'x', '\x2', '\x2', '\x3EA', '\x3D8', '\x3', '\x2', 
		'\x2', '\x2', '\x3EA', '\x3D9', '\x3', '\x2', '\x2', '\x2', '\x3EA', '\x3DA', 
		'\x3', '\x2', '\x2', '\x2', '\x3EA', '\x3DB', '\x3', '\x2', '\x2', '\x2', 
		'\x3EA', '\x3DC', '\x3', '\x2', '\x2', '\x2', '\x3EA', '\x3DD', '\x3', 
		'\x2', '\x2', '\x2', '\x3EA', '\x3DF', '\x3', '\x2', '\x2', '\x2', '\x3EA', 
		'\x3E5', '\x3', '\x2', '\x2', '\x2', '\x3EA', '\x3E6', '\x3', '\x2', '\x2', 
		'\x2', '\x3EA', '\x3E7', '\x3', '\x2', '\x2', '\x2', '\x3EA', '\x3E8', 
		'\x3', '\x2', '\x2', '\x2', '\x3EA', '\x3E9', '\x3', '\x2', '\x2', '\x2', 
		'\x3EB', '\x3EC', '\x3', '\x2', '\x2', '\x2', '\x3EC', '\x444', '\x5', 
		'\x42', '\"', '\x12', '\x3ED', '\x3EE', '\f', '\x10', '\x2', '\x2', '\x3EE', 
		'\x3EF', '\a', '\"', '\x2', '\x2', '\x3EF', '\x444', '\x5', '\x42', '\"', 
		'\x11', '\x3F0', '\x3F1', '\f', '\xF', '\x2', '\x2', '\x3F1', '\x3F2', 
		'\a', 'n', '\x2', '\x2', '\x3F2', '\x444', '\x5', '\x42', '\"', '\x10', 
		'\x3F3', '\x3F4', '\f', '\b', '\x2', '\x2', '\x3F4', '\x3F6', '\a', '^', 
		'\x2', '\x2', '\x3F5', '\x3F7', '\a', 'h', '\x2', '\x2', '\x3F6', '\x3F5', 
		'\x3', '\x2', '\x2', '\x2', '\x3F6', '\x3F7', '\x3', '\x2', '\x2', '\x2', 
		'\x3F7', '\x3F8', '\x3', '\x2', '\x2', '\x2', '\x3F8', '\x444', '\x5', 
		'\x42', '\"', '\t', '\x3F9', '\x3FB', '\f', '\a', '\x2', '\x2', '\x3FA', 
		'\x3FC', '\a', 'h', '\x2', '\x2', '\x3FB', '\x3FA', '\x3', '\x2', '\x2', 
		'\x2', '\x3FB', '\x3FC', '\x3', '\x2', '\x2', '\x2', '\x3FC', '\x3FD', 
		'\x3', '\x2', '\x2', '\x2', '\x3FD', '\x3FE', '\a', ')', '\x2', '\x2', 
		'\x3FE', '\x3FF', '\x5', '\x42', '\"', '\x2', '\x3FF', '\x400', '\a', 
		'\"', '\x2', '\x2', '\x400', '\x401', '\x5', '\x42', '\"', '\b', '\x401', 
		'\x444', '\x3', '\x2', '\x2', '\x2', '\x402', '\x403', '\f', '\v', '\x2', 
		'\x2', '\x403', '\x404', '\a', '/', '\x2', '\x2', '\x404', '\x444', '\x5', 
		'\xC0', '\x61', '\x2', '\x405', '\x407', '\f', '\n', '\x2', '\x2', '\x406', 
		'\x408', '\a', 'h', '\x2', '\x2', '\x407', '\x406', '\x3', '\x2', '\x2', 
		'\x2', '\x407', '\x408', '\x3', '\x2', '\x2', '\x2', '\x408', '\x409', 
		'\x3', '\x2', '\x2', '\x2', '\x409', '\x40A', '\t', '\xF', '\x2', '\x2', 
		'\x40A', '\x40D', '\x5', '\x42', '\"', '\x2', '\x40B', '\x40C', '\a', 
		'\x45', '\x2', '\x2', '\x40C', '\x40E', '\x5', '\x42', '\"', '\x2', '\x40D', 
		'\x40B', '\x3', '\x2', '\x2', '\x2', '\x40D', '\x40E', '\x3', '\x2', '\x2', 
		'\x2', '\x40E', '\x444', '\x3', '\x2', '\x2', '\x2', '\x40F', '\x414', 
		'\f', '\t', '\x2', '\x2', '\x410', '\x415', '\a', '_', '\x2', '\x2', '\x411', 
		'\x415', '\a', 'i', '\x2', '\x2', '\x412', '\x413', '\a', 'h', '\x2', 
		'\x2', '\x413', '\x415', '\a', 'j', '\x2', '\x2', '\x414', '\x410', '\x3', 
		'\x2', '\x2', '\x2', '\x414', '\x411', '\x3', '\x2', '\x2', '\x2', '\x414', 
		'\x412', '\x3', '\x2', '\x2', '\x2', '\x415', '\x444', '\x3', '\x2', '\x2', 
		'\x2', '\x416', '\x418', '\f', '\x6', '\x2', '\x2', '\x417', '\x419', 
		'\a', 'h', '\x2', '\x2', '\x418', '\x417', '\x3', '\x2', '\x2', '\x2', 
		'\x418', '\x419', '\x3', '\x2', '\x2', '\x2', '\x419', '\x41A', '\x3', 
		'\x2', '\x2', '\x2', '\x41A', '\x441', '\a', 'U', '\x2', '\x2', '\x41B', 
		'\x425', '\a', '\x5', '\x2', '\x2', '\x41C', '\x426', '\x5', 'X', '-', 
		'\x2', '\x41D', '\x422', '\x5', '\x42', '\"', '\x2', '\x41E', '\x41F', 
		'\a', '\a', '\x2', '\x2', '\x41F', '\x421', '\x5', '\x42', '\"', '\x2', 
		'\x420', '\x41E', '\x3', '\x2', '\x2', '\x2', '\x421', '\x424', '\x3', 
		'\x2', '\x2', '\x2', '\x422', '\x420', '\x3', '\x2', '\x2', '\x2', '\x422', 
		'\x423', '\x3', '\x2', '\x2', '\x2', '\x423', '\x426', '\x3', '\x2', '\x2', 
		'\x2', '\x424', '\x422', '\x3', '\x2', '\x2', '\x2', '\x425', '\x41C', 
		'\x3', '\x2', '\x2', '\x2', '\x425', '\x41D', '\x3', '\x2', '\x2', '\x2', 
		'\x425', '\x426', '\x3', '\x2', '\x2', '\x2', '\x426', '\x427', '\x3', 
		'\x2', '\x2', '\x2', '\x427', '\x442', '\a', '\x6', '\x2', '\x2', '\x428', 
		'\x429', '\x5', '\xB8', ']', '\x2', '\x429', '\x42A', '\a', '\x4', '\x2', 
		'\x2', '\x42A', '\x42C', '\x3', '\x2', '\x2', '\x2', '\x42B', '\x428', 
		'\x3', '\x2', '\x2', '\x2', '\x42B', '\x42C', '\x3', '\x2', '\x2', '\x2', 
		'\x42C', '\x42D', '\x3', '\x2', '\x2', '\x2', '\x42D', '\x442', '\x5', 
		'\xBA', '^', '\x2', '\x42E', '\x42F', '\x5', '\xB8', ']', '\x2', '\x42F', 
		'\x430', '\a', '\x4', '\x2', '\x2', '\x430', '\x432', '\x3', '\x2', '\x2', 
		'\x2', '\x431', '\x42E', '\x3', '\x2', '\x2', '\x2', '\x431', '\x432', 
		'\x3', '\x2', '\x2', '\x2', '\x432', '\x433', '\x3', '\x2', '\x2', '\x2', 
		'\x433', '\x434', '\x5', '\xE0', 'q', '\x2', '\x434', '\x43D', '\a', '\x5', 
		'\x2', '\x2', '\x435', '\x43A', '\x5', '\x42', '\"', '\x2', '\x436', '\x437', 
		'\a', '\a', '\x2', '\x2', '\x437', '\x439', '\x5', '\x42', '\"', '\x2', 
		'\x438', '\x436', '\x3', '\x2', '\x2', '\x2', '\x439', '\x43C', '\x3', 
		'\x2', '\x2', '\x2', '\x43A', '\x438', '\x3', '\x2', '\x2', '\x2', '\x43A', 
		'\x43B', '\x3', '\x2', '\x2', '\x2', '\x43B', '\x43E', '\x3', '\x2', '\x2', 
		'\x2', '\x43C', '\x43A', '\x3', '\x2', '\x2', '\x2', '\x43D', '\x435', 
		'\x3', '\x2', '\x2', '\x2', '\x43D', '\x43E', '\x3', '\x2', '\x2', '\x2', 
		'\x43E', '\x43F', '\x3', '\x2', '\x2', '\x2', '\x43F', '\x440', '\a', 
		'\x6', '\x2', '\x2', '\x440', '\x442', '\x3', '\x2', '\x2', '\x2', '\x441', 
		'\x41B', '\x3', '\x2', '\x2', '\x2', '\x441', '\x42B', '\x3', '\x2', '\x2', 
		'\x2', '\x441', '\x431', '\x3', '\x2', '\x2', '\x2', '\x442', '\x444', 
		'\x3', '\x2', '\x2', '\x2', '\x443', '\x3C8', '\x3', '\x2', '\x2', '\x2', 
		'\x443', '\x3CB', '\x3', '\x2', '\x2', '\x2', '\x443', '\x3CE', '\x3', 
		'\x2', '\x2', '\x2', '\x443', '\x3D1', '\x3', '\x2', '\x2', '\x2', '\x443', 
		'\x3D4', '\x3', '\x2', '\x2', '\x2', '\x443', '\x3D7', '\x3', '\x2', '\x2', 
		'\x2', '\x443', '\x3ED', '\x3', '\x2', '\x2', '\x2', '\x443', '\x3F0', 
		'\x3', '\x2', '\x2', '\x2', '\x443', '\x3F3', '\x3', '\x2', '\x2', '\x2', 
		'\x443', '\x3F9', '\x3', '\x2', '\x2', '\x2', '\x443', '\x402', '\x3', 
		'\x2', '\x2', '\x2', '\x443', '\x405', '\x3', '\x2', '\x2', '\x2', '\x443', 
		'\x40F', '\x3', '\x2', '\x2', '\x2', '\x443', '\x416', '\x3', '\x2', '\x2', 
		'\x2', '\x444', '\x447', '\x3', '\x2', '\x2', '\x2', '\x445', '\x443', 
		'\x3', '\x2', '\x2', '\x2', '\x445', '\x446', '\x3', '\x2', '\x2', '\x2', 
		'\x446', '\x43', '\x3', '\x2', '\x2', '\x2', '\x447', '\x445', '\x3', 
		'\x2', '\x2', '\x2', '\x448', '\x449', '\a', 'u', '\x2', '\x2', '\x449', 
		'\x44E', '\a', '\x5', '\x2', '\x2', '\x44A', '\x44F', '\a', 'S', '\x2', 
		'\x2', '\x44B', '\x44C', '\t', '\x10', '\x2', '\x2', '\x44C', '\x44D', 
		'\a', '\a', '\x2', '\x2', '\x44D', '\x44F', '\x5', '\xAC', 'W', '\x2', 
		'\x44E', '\x44A', '\x3', '\x2', '\x2', '\x2', '\x44E', '\x44B', '\x3', 
		'\x2', '\x2', '\x2', '\x44F', '\x450', '\x3', '\x2', '\x2', '\x2', '\x450', 
		'\x451', '\a', '\x6', '\x2', '\x2', '\x451', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x452', '\x453', '\t', '\x11', '\x2', '\x2', '\x453', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\x454', '\x455', '\a', '\x5', '\x2', '\x2', '\x455', 
		'\x45A', '\x5', '\x42', '\"', '\x2', '\x456', '\x457', '\a', '\a', '\x2', 
		'\x2', '\x457', '\x459', '\x5', '\x42', '\"', '\x2', '\x458', '\x456', 
		'\x3', '\x2', '\x2', '\x2', '\x459', '\x45C', '\x3', '\x2', '\x2', '\x2', 
		'\x45A', '\x458', '\x3', '\x2', '\x2', '\x2', '\x45A', '\x45B', '\x3', 
		'\x2', '\x2', '\x2', '\x45B', '\x45D', '\x3', '\x2', '\x2', '\x2', '\x45C', 
		'\x45A', '\x3', '\x2', '\x2', '\x2', '\x45D', '\x45E', '\a', '\x6', '\x2', 
		'\x2', '\x45E', 'I', '\x3', '\x2', '\x2', '\x2', '\x45F', '\x460', '\a', 
		'\x92', '\x2', '\x2', '\x460', '\x465', '\x5', 'H', '%', '\x2', '\x461', 
		'\x462', '\a', '\a', '\x2', '\x2', '\x462', '\x464', '\x5', 'H', '%', 
		'\x2', '\x463', '\x461', '\x3', '\x2', '\x2', '\x2', '\x464', '\x467', 
		'\x3', '\x2', '\x2', '\x2', '\x465', '\x463', '\x3', '\x2', '\x2', '\x2', 
		'\x465', '\x466', '\x3', '\x2', '\x2', '\x2', '\x466', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x467', '\x465', '\x3', '\x2', '\x2', '\x2', '\x468', '\x46A', 
		'\x5', '\x32', '\x1A', '\x2', '\x469', '\x468', '\x3', '\x2', '\x2', '\x2', 
		'\x469', '\x46A', '\x3', '\x2', '\x2', '\x2', '\x46A', '\x470', '\x3', 
		'\x2', '\x2', '\x2', '\x46B', '\x471', '\a', 'Z', '\x2', '\x2', '\x46C', 
		'\x471', '\a', '|', '\x2', '\x2', '\x46D', '\x46E', '\a', 'Z', '\x2', 
		'\x2', '\x46E', '\x46F', '\a', 'n', '\x2', '\x2', '\x46F', '\x471', '\t', 
		'\n', '\x2', '\x2', '\x470', '\x46B', '\x3', '\x2', '\x2', '\x2', '\x470', 
		'\x46C', '\x3', '\x2', '\x2', '\x2', '\x470', '\x46D', '\x3', '\x2', '\x2', 
		'\x2', '\x471', '\x472', '\x3', '\x2', '\x2', '\x2', '\x472', '\x476', 
		'\a', ']', '\x2', '\x2', '\x473', '\x474', '\x5', '\xB8', ']', '\x2', 
		'\x474', '\x475', '\a', '\x4', '\x2', '\x2', '\x475', '\x477', '\x3', 
		'\x2', '\x2', '\x2', '\x476', '\x473', '\x3', '\x2', '\x2', '\x2', '\x476', 
		'\x477', '\x3', '\x2', '\x2', '\x2', '\x477', '\x478', '\x3', '\x2', '\x2', 
		'\x2', '\x478', '\x47B', '\x5', '\xBA', '^', '\x2', '\x479', '\x47A', 
		'\a', '#', '\x2', '\x2', '\x47A', '\x47C', '\x5', '\xD0', 'i', '\x2', 
		'\x47B', '\x479', '\x3', '\x2', '\x2', '\x2', '\x47B', '\x47C', '\x3', 
		'\x2', '\x2', '\x2', '\x47C', '\x488', '\x3', '\x2', '\x2', '\x2', '\x47D', 
		'\x47E', '\a', '\x5', '\x2', '\x2', '\x47E', '\x483', '\x5', '\xBE', '`', 
		'\x2', '\x47F', '\x480', '\a', '\a', '\x2', '\x2', '\x480', '\x482', '\x5', 
		'\xBE', '`', '\x2', '\x481', '\x47F', '\x3', '\x2', '\x2', '\x2', '\x482', 
		'\x485', '\x3', '\x2', '\x2', '\x2', '\x483', '\x481', '\x3', '\x2', '\x2', 
		'\x2', '\x483', '\x484', '\x3', '\x2', '\x2', '\x2', '\x484', '\x486', 
		'\x3', '\x2', '\x2', '\x2', '\x485', '\x483', '\x3', '\x2', '\x2', '\x2', 
		'\x486', '\x487', '\a', '\x6', '\x2', '\x2', '\x487', '\x489', '\x3', 
		'\x2', '\x2', '\x2', '\x488', '\x47D', '\x3', '\x2', '\x2', '\x2', '\x488', 
		'\x489', '\x3', '\x2', '\x2', '\x2', '\x489', '\x493', '\x3', '\x2', '\x2', 
		'\x2', '\x48A', '\x48D', '\x5', 'J', '&', '\x2', '\x48B', '\x48D', '\x5', 
		'X', '-', '\x2', '\x48C', '\x48A', '\x3', '\x2', '\x2', '\x2', '\x48C', 
		'\x48B', '\x3', '\x2', '\x2', '\x2', '\x48D', '\x48F', '\x3', '\x2', '\x2', 
		'\x2', '\x48E', '\x490', '\x5', 'P', ')', '\x2', '\x48F', '\x48E', '\x3', 
		'\x2', '\x2', '\x2', '\x48F', '\x490', '\x3', '\x2', '\x2', '\x2', '\x490', 
		'\x494', '\x3', '\x2', '\x2', '\x2', '\x491', '\x492', '\a', ':', '\x2', 
		'\x2', '\x492', '\x494', '\a', '\x92', '\x2', '\x2', '\x493', '\x48C', 
		'\x3', '\x2', '\x2', '\x2', '\x493', '\x491', '\x3', '\x2', '\x2', '\x2', 
		'\x494', '\x496', '\x3', '\x2', '\x2', '\x2', '\x495', '\x497', '\x5', 
		'N', '(', '\x2', '\x496', '\x495', '\x3', '\x2', '\x2', '\x2', '\x496', 
		'\x497', '\x3', '\x2', '\x2', '\x2', '\x497', 'M', '\x3', '\x2', '\x2', 
		'\x2', '\x498', '\x499', '\a', '~', '\x2', '\x2', '\x499', '\x49E', '\x5', 
		'\x66', '\x34', '\x2', '\x49A', '\x49B', '\a', '\a', '\x2', '\x2', '\x49B', 
		'\x49D', '\x5', '\x66', '\x34', '\x2', '\x49C', '\x49A', '\x3', '\x2', 
		'\x2', '\x2', '\x49D', '\x4A0', '\x3', '\x2', '\x2', '\x2', '\x49E', '\x49C', 
		'\x3', '\x2', '\x2', '\x2', '\x49E', '\x49F', '\x3', '\x2', '\x2', '\x2', 
		'\x49F', 'O', '\x3', '\x2', '\x2', '\x2', '\x4A0', '\x49E', '\x3', '\x2', 
		'\x2', '\x2', '\x4A1', '\x4A2', '\a', 'm', '\x2', '\x2', '\x4A2', '\x4B1', 
		'\a', '\x32', '\x2', '\x2', '\x4A3', '\x4A4', '\a', '\x5', '\x2', '\x2', 
		'\x4A4', '\x4A9', '\x5', '\x1A', '\xE', '\x2', '\x4A5', '\x4A6', '\a', 
		'\a', '\x2', '\x2', '\x4A6', '\x4A8', '\x5', '\x1A', '\xE', '\x2', '\x4A7', 
		'\x4A5', '\x3', '\x2', '\x2', '\x2', '\x4A8', '\x4AB', '\x3', '\x2', '\x2', 
		'\x2', '\x4A9', '\x4A7', '\x3', '\x2', '\x2', '\x2', '\x4A9', '\x4AA', 
		'\x3', '\x2', '\x2', '\x2', '\x4AA', '\x4AC', '\x3', '\x2', '\x2', '\x2', 
		'\x4AB', '\x4A9', '\x3', '\x2', '\x2', '\x2', '\x4AC', '\x4AF', '\a', 
		'\x6', '\x2', '\x2', '\x4AD', '\x4AE', '\a', '\x96', '\x2', '\x2', '\x4AE', 
		'\x4B0', '\x5', '\x42', '\"', '\x2', '\x4AF', '\x4AD', '\x3', '\x2', '\x2', 
		'\x2', '\x4AF', '\x4B0', '\x3', '\x2', '\x2', '\x2', '\x4B0', '\x4B2', 
		'\x3', '\x2', '\x2', '\x2', '\x4B1', '\x4A3', '\x3', '\x2', '\x2', '\x2', 
		'\x4B1', '\x4B2', '\x3', '\x2', '\x2', '\x2', '\x4B2', '\x4B3', '\x3', 
		'\x2', '\x2', '\x2', '\x4B3', '\x4CE', '\a', '\xB9', '\x2', '\x2', '\x4B4', 
		'\x4CF', '\a', '\xBA', '\x2', '\x2', '\x4B5', '\x4B6', '\a', '\x8F', '\x2', 
		'\x2', '\x4B6', '\x4B9', '\a', '\x85', '\x2', '\x2', '\x4B7', '\x4BA', 
		'\x5', '\xBE', '`', '\x2', '\x4B8', '\x4BA', '\x5', 'p', '\x39', '\x2', 
		'\x4B9', '\x4B7', '\x3', '\x2', '\x2', '\x2', '\x4B9', '\x4B8', '\x3', 
		'\x2', '\x2', '\x2', '\x4BA', '\x4BB', '\x3', '\x2', '\x2', '\x2', '\x4BB', 
		'\x4BC', '\a', '\b', '\x2', '\x2', '\x4BC', '\x4C7', '\x5', '\x42', '\"', 
		'\x2', '\x4BD', '\x4C0', '\a', '\a', '\x2', '\x2', '\x4BE', '\x4C1', '\x5', 
		'\xBE', '`', '\x2', '\x4BF', '\x4C1', '\x5', 'p', '\x39', '\x2', '\x4C0', 
		'\x4BE', '\x3', '\x2', '\x2', '\x2', '\x4C0', '\x4BF', '\x3', '\x2', '\x2', 
		'\x2', '\x4C1', '\x4C2', '\x3', '\x2', '\x2', '\x2', '\x4C2', '\x4C3', 
		'\a', '\b', '\x2', '\x2', '\x4C3', '\x4C4', '\x5', '\x42', '\"', '\x2', 
		'\x4C4', '\x4C6', '\x3', '\x2', '\x2', '\x2', '\x4C5', '\x4BD', '\x3', 
		'\x2', '\x2', '\x2', '\x4C6', '\x4C9', '\x3', '\x2', '\x2', '\x2', '\x4C7', 
		'\x4C5', '\x3', '\x2', '\x2', '\x2', '\x4C7', '\x4C8', '\x3', '\x2', '\x2', 
		'\x2', '\x4C8', '\x4CC', '\x3', '\x2', '\x2', '\x2', '\x4C9', '\x4C7', 
		'\x3', '\x2', '\x2', '\x2', '\x4CA', '\x4CB', '\a', '\x96', '\x2', '\x2', 
		'\x4CB', '\x4CD', '\x5', '\x42', '\"', '\x2', '\x4CC', '\x4CA', '\x3', 
		'\x2', '\x2', '\x2', '\x4CC', '\x4CD', '\x3', '\x2', '\x2', '\x2', '\x4CD', 
		'\x4CF', '\x3', '\x2', '\x2', '\x2', '\x4CE', '\x4B4', '\x3', '\x2', '\x2', 
		'\x2', '\x4CE', '\x4B5', '\x3', '\x2', '\x2', '\x2', '\x4CF', 'Q', '\x3', 
		'\x2', '\x2', '\x2', '\x4D0', '\x4D4', '\a', 'r', '\x2', '\x2', '\x4D1', 
		'\x4D2', '\x5', '\xB8', ']', '\x2', '\x4D2', '\x4D3', '\a', '\x4', '\x2', 
		'\x2', '\x4D3', '\x4D5', '\x3', '\x2', '\x2', '\x2', '\x4D4', '\x4D1', 
		'\x3', '\x2', '\x2', '\x2', '\x4D4', '\x4D5', '\x3', '\x2', '\x2', '\x2', 
		'\x4D5', '\x4D6', '\x3', '\x2', '\x2', '\x2', '\x4D6', '\x4DD', '\x5', 
		'\xCC', 'g', '\x2', '\x4D7', '\x4D8', '\a', '\b', '\x2', '\x2', '\x4D8', 
		'\x4DE', '\x5', 'T', '+', '\x2', '\x4D9', '\x4DA', '\a', '\x5', '\x2', 
		'\x2', '\x4DA', '\x4DB', '\x5', 'T', '+', '\x2', '\x4DB', '\x4DC', '\a', 
		'\x6', '\x2', '\x2', '\x4DC', '\x4DE', '\x3', '\x2', '\x2', '\x2', '\x4DD', 
		'\x4D7', '\x3', '\x2', '\x2', '\x2', '\x4DD', '\x4D9', '\x3', '\x2', '\x2', 
		'\x2', '\x4DD', '\x4DE', '\x3', '\x2', '\x2', '\x2', '\x4DE', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\x4DF', '\x4E3', '\x5', '$', '\x13', '\x2', '\x4E0', 
		'\x4E3', '\x5', '\xB4', '[', '\x2', '\x4E1', '\x4E3', '\a', '\xBE', '\x2', 
		'\x2', '\x4E2', '\x4DF', '\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4E0', 
		'\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4E1', '\x3', '\x2', '\x2', '\x2', 
		'\x4E3', 'U', '\x3', '\x2', '\x2', '\x2', '\x4E4', '\x4EF', '\a', 'y', 
		'\x2', '\x2', '\x4E5', '\x4F0', '\x5', '\xC0', '\x61', '\x2', '\x4E6', 
		'\x4E7', '\x5', '\xB8', ']', '\x2', '\x4E7', '\x4E8', '\a', '\x4', '\x2', 
		'\x2', '\x4E8', '\x4EA', '\x3', '\x2', '\x2', '\x2', '\x4E9', '\x4E6', 
		'\x3', '\x2', '\x2', '\x2', '\x4E9', '\x4EA', '\x3', '\x2', '\x2', '\x2', 
		'\x4EA', '\x4ED', '\x3', '\x2', '\x2', '\x2', '\x4EB', '\x4EE', '\x5', 
		'\xBA', '^', '\x2', '\x4EC', '\x4EE', '\x5', '\xC4', '\x63', '\x2', '\x4ED', 
		'\x4EB', '\x3', '\x2', '\x2', '\x2', '\x4ED', '\x4EC', '\x3', '\x2', '\x2', 
		'\x2', '\x4EE', '\x4F0', '\x3', '\x2', '\x2', '\x2', '\x4EF', '\x4E5', 
		'\x3', '\x2', '\x2', '\x2', '\x4EF', '\x4E9', '\x3', '\x2', '\x2', '\x2', 
		'\x4EF', '\x4F0', '\x3', '\x2', '\x2', '\x2', '\x4F0', 'W', '\x3', '\x2', 
		'\x2', '\x2', '\x4F1', '\x4F3', '\x5', '\x88', '\x45', '\x2', '\x4F2', 
		'\x4F1', '\x3', '\x2', '\x2', '\x2', '\x4F2', '\x4F3', '\x3', '\x2', '\x2', 
		'\x2', '\x4F3', '\x4F4', '\x3', '\x2', '\x2', '\x2', '\x4F4', '\x4FA', 
		'\x5', '\\', '/', '\x2', '\x4F5', '\x4F6', '\x5', 'l', '\x37', '\x2', 
		'\x4F6', '\x4F7', '\x5', '\\', '/', '\x2', '\x4F7', '\x4F9', '\x3', '\x2', 
		'\x2', '\x2', '\x4F8', '\x4F5', '\x3', '\x2', '\x2', '\x2', '\x4F9', '\x4FC', 
		'\x3', '\x2', '\x2', '\x2', '\x4FA', '\x4F8', '\x3', '\x2', '\x2', '\x2', 
		'\x4FA', '\x4FB', '\x3', '\x2', '\x2', '\x2', '\x4FB', '\x4FE', '\x3', 
		'\x2', '\x2', '\x2', '\x4FC', '\x4FA', '\x3', '\x2', '\x2', '\x2', '\x4FD', 
		'\x4FF', '\x5', '\x8A', '\x46', '\x2', '\x4FE', '\x4FD', '\x3', '\x2', 
		'\x2', '\x2', '\x4FE', '\x4FF', '\x3', '\x2', '\x2', '\x2', '\x4FF', '\x501', 
		'\x3', '\x2', '\x2', '\x2', '\x500', '\x502', '\x5', '\x8C', 'G', '\x2', 
		'\x501', '\x500', '\x3', '\x2', '\x2', '\x2', '\x501', '\x502', '\x3', 
		'\x2', '\x2', '\x2', '\x502', 'Y', '\x3', '\x2', '\x2', '\x2', '\x503', 
		'\x50B', '\x5', '\x64', '\x33', '\x2', '\x504', '\x505', '\x5', 'h', '\x35', 
		'\x2', '\x505', '\x507', '\x5', '\x64', '\x33', '\x2', '\x506', '\x508', 
		'\x5', 'j', '\x36', '\x2', '\x507', '\x506', '\x3', '\x2', '\x2', '\x2', 
		'\x507', '\x508', '\x3', '\x2', '\x2', '\x2', '\x508', '\x50A', '\x3', 
		'\x2', '\x2', '\x2', '\x509', '\x504', '\x3', '\x2', '\x2', '\x2', '\x50A', 
		'\x50D', '\x3', '\x2', '\x2', '\x2', '\x50B', '\x509', '\x3', '\x2', '\x2', 
		'\x2', '\x50B', '\x50C', '\x3', '\x2', '\x2', '\x2', '\x50C', '[', '\x3', 
		'\x2', '\x2', '\x2', '\x50D', '\x50B', '\x3', '\x2', '\x2', '\x2', '\x50E', 
		'\x510', '\a', '\x84', '\x2', '\x2', '\x50F', '\x511', '\t', '\x12', '\x2', 
		'\x2', '\x510', '\x50F', '\x3', '\x2', '\x2', '\x2', '\x510', '\x511', 
		'\x3', '\x2', '\x2', '\x2', '\x511', '\x512', '\x3', '\x2', '\x2', '\x2', 
		'\x512', '\x517', '\x5', '\x66', '\x34', '\x2', '\x513', '\x514', '\a', 
		'\a', '\x2', '\x2', '\x514', '\x516', '\x5', '\x66', '\x34', '\x2', '\x515', 
		'\x513', '\x3', '\x2', '\x2', '\x2', '\x516', '\x519', '\x3', '\x2', '\x2', 
		'\x2', '\x517', '\x515', '\x3', '\x2', '\x2', '\x2', '\x517', '\x518', 
		'\x3', '\x2', '\x2', '\x2', '\x518', '\x526', '\x3', '\x2', '\x2', '\x2', 
		'\x519', '\x517', '\x3', '\x2', '\x2', '\x2', '\x51A', '\x524', '\a', 
		'M', '\x2', '\x2', '\x51B', '\x520', '\x5', '\x64', '\x33', '\x2', '\x51C', 
		'\x51D', '\a', '\a', '\x2', '\x2', '\x51D', '\x51F', '\x5', '\x64', '\x33', 
		'\x2', '\x51E', '\x51C', '\x3', '\x2', '\x2', '\x2', '\x51F', '\x522', 
		'\x3', '\x2', '\x2', '\x2', '\x520', '\x51E', '\x3', '\x2', '\x2', '\x2', 
		'\x520', '\x521', '\x3', '\x2', '\x2', '\x2', '\x521', '\x525', '\x3', 
		'\x2', '\x2', '\x2', '\x522', '\x520', '\x3', '\x2', '\x2', '\x2', '\x523', 
		'\x525', '\x5', 'Z', '.', '\x2', '\x524', '\x51B', '\x3', '\x2', '\x2', 
		'\x2', '\x524', '\x523', '\x3', '\x2', '\x2', '\x2', '\x525', '\x527', 
		'\x3', '\x2', '\x2', '\x2', '\x526', '\x51A', '\x3', '\x2', '\x2', '\x2', 
		'\x526', '\x527', '\x3', '\x2', '\x2', '\x2', '\x527', '\x52A', '\x3', 
		'\x2', '\x2', '\x2', '\x528', '\x529', '\a', '\x96', '\x2', '\x2', '\x529', 
		'\x52B', '\x5', '\x42', '\"', '\x2', '\x52A', '\x528', '\x3', '\x2', '\x2', 
		'\x2', '\x52A', '\x52B', '\x3', '\x2', '\x2', '\x2', '\x52B', '\x53A', 
		'\x3', '\x2', '\x2', '\x2', '\x52C', '\x52D', '\a', 'P', '\x2', '\x2', 
		'\x52D', '\x52E', '\a', '*', '\x2', '\x2', '\x52E', '\x533', '\x5', '\x42', 
		'\"', '\x2', '\x52F', '\x530', '\a', '\a', '\x2', '\x2', '\x530', '\x532', 
		'\x5', '\x42', '\"', '\x2', '\x531', '\x52F', '\x3', '\x2', '\x2', '\x2', 
		'\x532', '\x535', '\x3', '\x2', '\x2', '\x2', '\x533', '\x531', '\x3', 
		'\x2', '\x2', '\x2', '\x533', '\x534', '\x3', '\x2', '\x2', '\x2', '\x534', 
		'\x538', '\x3', '\x2', '\x2', '\x2', '\x535', '\x533', '\x3', '\x2', '\x2', 
		'\x2', '\x536', '\x537', '\a', 'Q', '\x2', '\x2', '\x537', '\x539', '\x5', 
		'\x42', '\"', '\x2', '\x538', '\x536', '\x3', '\x2', '\x2', '\x2', '\x538', 
		'\x539', '\x3', '\x2', '\x2', '\x2', '\x539', '\x53B', '\x3', '\x2', '\x2', 
		'\x2', '\x53A', '\x52C', '\x3', '\x2', '\x2', '\x2', '\x53A', '\x53B', 
		'\x3', '\x2', '\x2', '\x2', '\x53B', '\x54A', '\x3', '\x2', '\x2', '\x2', 
		'\x53C', '\x53D', '\a', '\xB0', '\x2', '\x2', '\x53D', '\x53E', '\x5', 
		'\xD4', 'k', '\x2', '\x53E', '\x53F', '\a', '#', '\x2', '\x2', '\x53F', 
		'\x547', '\x5', 'z', '>', '\x2', '\x540', '\x541', '\a', '\a', '\x2', 
		'\x2', '\x541', '\x542', '\x5', '\xD4', 'k', '\x2', '\x542', '\x543', 
		'\a', '#', '\x2', '\x2', '\x543', '\x544', '\x5', 'z', '>', '\x2', '\x544', 
		'\x546', '\x3', '\x2', '\x2', '\x2', '\x545', '\x540', '\x3', '\x2', '\x2', 
		'\x2', '\x546', '\x549', '\x3', '\x2', '\x2', '\x2', '\x547', '\x545', 
		'\x3', '\x2', '\x2', '\x2', '\x547', '\x548', '\x3', '\x2', '\x2', '\x2', 
		'\x548', '\x54B', '\x3', '\x2', '\x2', '\x2', '\x549', '\x547', '\x3', 
		'\x2', '\x2', '\x2', '\x54A', '\x53C', '\x3', '\x2', '\x2', '\x2', '\x54A', 
		'\x54B', '\x3', '\x2', '\x2', '\x2', '\x54B', '\x54E', '\x3', '\x2', '\x2', 
		'\x2', '\x54C', '\x54E', '\x5', 'J', '&', '\x2', '\x54D', '\x50E', '\x3', 
		'\x2', '\x2', '\x2', '\x54D', '\x54C', '\x3', '\x2', '\x2', '\x2', '\x54E', 
		']', '\x3', '\x2', '\x2', '\x2', '\x54F', '\x550', '\x5', 'X', '-', '\x2', 
		'\x550', '_', '\x3', '\x2', '\x2', '\x2', '\x551', '\x553', '\x5', '\x88', 
		'\x45', '\x2', '\x552', '\x551', '\x3', '\x2', '\x2', '\x2', '\x552', 
		'\x553', '\x3', '\x2', '\x2', '\x2', '\x553', '\x554', '\x3', '\x2', '\x2', 
		'\x2', '\x554', '\x556', '\x5', '\\', '/', '\x2', '\x555', '\x557', '\x5', 
		'\x8A', '\x46', '\x2', '\x556', '\x555', '\x3', '\x2', '\x2', '\x2', '\x556', 
		'\x557', '\x3', '\x2', '\x2', '\x2', '\x557', '\x559', '\x3', '\x2', '\x2', 
		'\x2', '\x558', '\x55A', '\x5', '\x8C', 'G', '\x2', '\x559', '\x558', 
		'\x3', '\x2', '\x2', '\x2', '\x559', '\x55A', '\x3', '\x2', '\x2', '\x2', 
		'\x55A', '\x61', '\x3', '\x2', '\x2', '\x2', '\x55B', '\x55D', '\x5', 
		'\x88', '\x45', '\x2', '\x55C', '\x55B', '\x3', '\x2', '\x2', '\x2', '\x55C', 
		'\x55D', '\x3', '\x2', '\x2', '\x2', '\x55D', '\x55E', '\x3', '\x2', '\x2', 
		'\x2', '\x55E', '\x568', '\x5', '\\', '/', '\x2', '\x55F', '\x561', '\a', 
		'\x8D', '\x2', '\x2', '\x560', '\x562', '\a', '\x1F', '\x2', '\x2', '\x561', 
		'\x560', '\x3', '\x2', '\x2', '\x2', '\x561', '\x562', '\x3', '\x2', '\x2', 
		'\x2', '\x562', '\x566', '\x3', '\x2', '\x2', '\x2', '\x563', '\x566', 
		'\a', '\\', '\x2', '\x2', '\x564', '\x566', '\a', '\x46', '\x2', '\x2', 
		'\x565', '\x55F', '\x3', '\x2', '\x2', '\x2', '\x565', '\x563', '\x3', 
		'\x2', '\x2', '\x2', '\x565', '\x564', '\x3', '\x2', '\x2', '\x2', '\x566', 
		'\x567', '\x3', '\x2', '\x2', '\x2', '\x567', '\x569', '\x5', '\\', '/', 
		'\x2', '\x568', '\x565', '\x3', '\x2', '\x2', '\x2', '\x569', '\x56A', 
		'\x3', '\x2', '\x2', '\x2', '\x56A', '\x568', '\x3', '\x2', '\x2', '\x2', 
		'\x56A', '\x56B', '\x3', '\x2', '\x2', '\x2', '\x56B', '\x56D', '\x3', 
		'\x2', '\x2', '\x2', '\x56C', '\x56E', '\x5', '\x8A', '\x46', '\x2', '\x56D', 
		'\x56C', '\x3', '\x2', '\x2', '\x2', '\x56D', '\x56E', '\x3', '\x2', '\x2', 
		'\x2', '\x56E', '\x570', '\x3', '\x2', '\x2', '\x2', '\x56F', '\x571', 
		'\x5', '\x8C', 'G', '\x2', '\x570', '\x56F', '\x3', '\x2', '\x2', '\x2', 
		'\x570', '\x571', '\x3', '\x2', '\x2', '\x2', '\x571', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x572', '\x573', '\x5', '\xB8', ']', '\x2', '\x573', 
		'\x574', '\a', '\x4', '\x2', '\x2', '\x574', '\x576', '\x3', '\x2', '\x2', 
		'\x2', '\x575', '\x572', '\x3', '\x2', '\x2', '\x2', '\x575', '\x576', 
		'\x3', '\x2', '\x2', '\x2', '\x576', '\x577', '\x3', '\x2', '\x2', '\x2', 
		'\x577', '\x57C', '\x5', '\xBA', '^', '\x2', '\x578', '\x57A', '\a', '#', 
		'\x2', '\x2', '\x579', '\x578', '\x3', '\x2', '\x2', '\x2', '\x579', '\x57A', 
		'\x3', '\x2', '\x2', '\x2', '\x57A', '\x57B', '\x3', '\x2', '\x2', '\x2', 
		'\x57B', '\x57D', '\x5', '\xD0', 'i', '\x2', '\x57C', '\x579', '\x3', 
		'\x2', '\x2', '\x2', '\x57C', '\x57D', '\x3', '\x2', '\x2', '\x2', '\x57D', 
		'\x583', '\x3', '\x2', '\x2', '\x2', '\x57E', '\x57F', '\a', 'W', '\x2', 
		'\x2', '\x57F', '\x580', '\a', '*', '\x2', '\x2', '\x580', '\x584', '\x5', 
		'\xC4', '\x63', '\x2', '\x581', '\x582', '\a', 'h', '\x2', '\x2', '\x582', 
		'\x584', '\a', 'W', '\x2', '\x2', '\x583', '\x57E', '\x3', '\x2', '\x2', 
		'\x2', '\x583', '\x581', '\x3', '\x2', '\x2', '\x2', '\x583', '\x584', 
		'\x3', '\x2', '\x2', '\x2', '\x584', '\x5B3', '\x3', '\x2', '\x2', '\x2', 
		'\x585', '\x586', '\x5', '\xB8', ']', '\x2', '\x586', '\x587', '\a', '\x4', 
		'\x2', '\x2', '\x587', '\x589', '\x3', '\x2', '\x2', '\x2', '\x588', '\x585', 
		'\x3', '\x2', '\x2', '\x2', '\x588', '\x589', '\x3', '\x2', '\x2', '\x2', 
		'\x589', '\x58A', '\x3', '\x2', '\x2', '\x2', '\x58A', '\x58B', '\x5', 
		'\xE0', 'q', '\x2', '\x58B', '\x58C', '\a', '\x5', '\x2', '\x2', '\x58C', 
		'\x591', '\x5', '\x42', '\"', '\x2', '\x58D', '\x58E', '\a', '\a', '\x2', 
		'\x2', '\x58E', '\x590', '\x5', '\x42', '\"', '\x2', '\x58F', '\x58D', 
		'\x3', '\x2', '\x2', '\x2', '\x590', '\x593', '\x3', '\x2', '\x2', '\x2', 
		'\x591', '\x58F', '\x3', '\x2', '\x2', '\x2', '\x591', '\x592', '\x3', 
		'\x2', '\x2', '\x2', '\x592', '\x594', '\x3', '\x2', '\x2', '\x2', '\x593', 
		'\x591', '\x3', '\x2', '\x2', '\x2', '\x594', '\x599', '\a', '\x6', '\x2', 
		'\x2', '\x595', '\x597', '\a', '#', '\x2', '\x2', '\x596', '\x595', '\x3', 
		'\x2', '\x2', '\x2', '\x596', '\x597', '\x3', '\x2', '\x2', '\x2', '\x597', 
		'\x598', '\x3', '\x2', '\x2', '\x2', '\x598', '\x59A', '\x5', '\xD0', 
		'i', '\x2', '\x599', '\x596', '\x3', '\x2', '\x2', '\x2', '\x599', '\x59A', 
		'\x3', '\x2', '\x2', '\x2', '\x59A', '\x5B3', '\x3', '\x2', '\x2', '\x2', 
		'\x59B', '\x5A5', '\a', '\x5', '\x2', '\x2', '\x59C', '\x5A1', '\x5', 
		'\x64', '\x33', '\x2', '\x59D', '\x59E', '\a', '\a', '\x2', '\x2', '\x59E', 
		'\x5A0', '\x5', '\x64', '\x33', '\x2', '\x59F', '\x59D', '\x3', '\x2', 
		'\x2', '\x2', '\x5A0', '\x5A3', '\x3', '\x2', '\x2', '\x2', '\x5A1', '\x59F', 
		'\x3', '\x2', '\x2', '\x2', '\x5A1', '\x5A2', '\x3', '\x2', '\x2', '\x2', 
		'\x5A2', '\x5A6', '\x3', '\x2', '\x2', '\x2', '\x5A3', '\x5A1', '\x3', 
		'\x2', '\x2', '\x2', '\x5A4', '\x5A6', '\x5', 'Z', '.', '\x2', '\x5A5', 
		'\x59C', '\x3', '\x2', '\x2', '\x2', '\x5A5', '\x5A4', '\x3', '\x2', '\x2', 
		'\x2', '\x5A6', '\x5A7', '\x3', '\x2', '\x2', '\x2', '\x5A7', '\x5A8', 
		'\a', '\x6', '\x2', '\x2', '\x5A8', '\x5B3', '\x3', '\x2', '\x2', '\x2', 
		'\x5A9', '\x5AA', '\a', '\x5', '\x2', '\x2', '\x5AA', '\x5AB', '\x5', 
		'X', '-', '\x2', '\x5AB', '\x5B0', '\a', '\x6', '\x2', '\x2', '\x5AC', 
		'\x5AE', '\a', '#', '\x2', '\x2', '\x5AD', '\x5AC', '\x3', '\x2', '\x2', 
		'\x2', '\x5AD', '\x5AE', '\x3', '\x2', '\x2', '\x2', '\x5AE', '\x5AF', 
		'\x3', '\x2', '\x2', '\x2', '\x5AF', '\x5B1', '\x5', '\xD0', 'i', '\x2', 
		'\x5B0', '\x5AD', '\x3', '\x2', '\x2', '\x2', '\x5B0', '\x5B1', '\x3', 
		'\x2', '\x2', '\x2', '\x5B1', '\x5B3', '\x3', '\x2', '\x2', '\x2', '\x5B2', 
		'\x575', '\x3', '\x2', '\x2', '\x2', '\x5B2', '\x588', '\x3', '\x2', '\x2', 
		'\x2', '\x5B2', '\x59B', '\x3', '\x2', '\x2', '\x2', '\x5B2', '\x5A9', 
		'\x3', '\x2', '\x2', '\x2', '\x5B3', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x5B4', '\x5C1', '\a', '\t', '\x2', '\x2', '\x5B5', '\x5B6', '\x5', '\xBA', 
		'^', '\x2', '\x5B6', '\x5B7', '\a', '\x4', '\x2', '\x2', '\x5B7', '\x5B8', 
		'\a', '\t', '\x2', '\x2', '\x5B8', '\x5C1', '\x3', '\x2', '\x2', '\x2', 
		'\x5B9', '\x5BE', '\x5', '\x42', '\"', '\x2', '\x5BA', '\x5BC', '\a', 
		'#', '\x2', '\x2', '\x5BB', '\x5BA', '\x3', '\x2', '\x2', '\x2', '\x5BB', 
		'\x5BC', '\x3', '\x2', '\x2', '\x2', '\x5BC', '\x5BD', '\x3', '\x2', '\x2', 
		'\x2', '\x5BD', '\x5BF', '\x5', '\xB0', 'Y', '\x2', '\x5BE', '\x5BB', 
		'\x3', '\x2', '\x2', '\x2', '\x5BE', '\x5BF', '\x3', '\x2', '\x2', '\x2', 
		'\x5BF', '\x5C1', '\x3', '\x2', '\x2', '\x2', '\x5C0', '\x5B4', '\x3', 
		'\x2', '\x2', '\x2', '\x5C0', '\x5B5', '\x3', '\x2', '\x2', '\x2', '\x5C0', 
		'\x5B9', '\x3', '\x2', '\x2', '\x2', '\x5C1', 'g', '\x3', '\x2', '\x2', 
		'\x2', '\x5C2', '\x5D0', '\a', '\a', '\x2', '\x2', '\x5C3', '\x5C5', '\a', 
		'\x66', '\x2', '\x2', '\x5C4', '\x5C3', '\x3', '\x2', '\x2', '\x2', '\x5C4', 
		'\x5C5', '\x3', '\x2', '\x2', '\x2', '\x5C5', '\x5CC', '\x3', '\x2', '\x2', 
		'\x2', '\x5C6', '\x5C8', '\t', '\x13', '\x2', '\x2', '\x5C7', '\x5C9', 
		'\a', 'p', '\x2', '\x2', '\x5C8', '\x5C7', '\x3', '\x2', '\x2', '\x2', 
		'\x5C8', '\x5C9', '\x3', '\x2', '\x2', '\x2', '\x5C9', '\x5CD', '\x3', 
		'\x2', '\x2', '\x2', '\x5CA', '\x5CD', '\a', 'Y', '\x2', '\x2', '\x5CB', 
		'\x5CD', '\a', '\x35', '\x2', '\x2', '\x5CC', '\x5C6', '\x3', '\x2', '\x2', 
		'\x2', '\x5CC', '\x5CA', '\x3', '\x2', '\x2', '\x2', '\x5CC', '\x5CB', 
		'\x3', '\x2', '\x2', '\x2', '\x5CC', '\x5CD', '\x3', '\x2', '\x2', '\x2', 
		'\x5CD', '\x5CE', '\x3', '\x2', '\x2', '\x2', '\x5CE', '\x5D0', '\a', 
		'`', '\x2', '\x2', '\x5CF', '\x5C2', '\x3', '\x2', '\x2', '\x2', '\x5CF', 
		'\x5C4', '\x3', '\x2', '\x2', '\x2', '\x5D0', 'i', '\x3', '\x2', '\x2', 
		'\x2', '\x5D1', '\x5D2', '\a', 'm', '\x2', '\x2', '\x5D2', '\x5E0', '\x5', 
		'\x42', '\"', '\x2', '\x5D3', '\x5D4', '\a', '\x90', '\x2', '\x2', '\x5D4', 
		'\x5D5', '\a', '\x5', '\x2', '\x2', '\x5D5', '\x5DA', '\x5', '\xBE', '`', 
		'\x2', '\x5D6', '\x5D7', '\a', '\a', '\x2', '\x2', '\x5D7', '\x5D9', '\x5', 
		'\xBE', '`', '\x2', '\x5D8', '\x5D6', '\x3', '\x2', '\x2', '\x2', '\x5D9', 
		'\x5DC', '\x3', '\x2', '\x2', '\x2', '\x5DA', '\x5D8', '\x3', '\x2', '\x2', 
		'\x2', '\x5DA', '\x5DB', '\x3', '\x2', '\x2', '\x2', '\x5DB', '\x5DD', 
		'\x3', '\x2', '\x2', '\x2', '\x5DC', '\x5DA', '\x3', '\x2', '\x2', '\x2', 
		'\x5DD', '\x5DE', '\a', '\x6', '\x2', '\x2', '\x5DE', '\x5E0', '\x3', 
		'\x2', '\x2', '\x2', '\x5DF', '\x5D1', '\x3', '\x2', '\x2', '\x2', '\x5DF', 
		'\x5D3', '\x3', '\x2', '\x2', '\x2', '\x5E0', 'k', '\x3', '\x2', '\x2', 
		'\x2', '\x5E1', '\x5E3', '\a', '\x8D', '\x2', '\x2', '\x5E2', '\x5E4', 
		'\a', '\x1F', '\x2', '\x2', '\x5E3', '\x5E2', '\x3', '\x2', '\x2', '\x2', 
		'\x5E3', '\x5E4', '\x3', '\x2', '\x2', '\x2', '\x5E4', '\x5E8', '\x3', 
		'\x2', '\x2', '\x2', '\x5E5', '\x5E8', '\a', '\\', '\x2', '\x2', '\x5E6', 
		'\x5E8', '\a', '\x46', '\x2', '\x2', '\x5E7', '\x5E1', '\x3', '\x2', '\x2', 
		'\x2', '\x5E7', '\x5E5', '\x3', '\x2', '\x2', '\x2', '\x5E7', '\x5E6', 
		'\x3', '\x2', '\x2', '\x2', '\x5E8', 'm', '\x3', '\x2', '\x2', '\x2', 
		'\x5E9', '\x5EB', '\x5', '\x32', '\x1A', '\x2', '\x5EA', '\x5E9', '\x3', 
		'\x2', '\x2', '\x2', '\x5EA', '\x5EB', '\x3', '\x2', '\x2', '\x2', '\x5EB', 
		'\x5EC', '\x3', '\x2', '\x2', '\x2', '\x5EC', '\x5EF', '\a', '\x8F', '\x2', 
		'\x2', '\x5ED', '\x5EE', '\a', 'n', '\x2', '\x2', '\x5EE', '\x5F0', '\t', 
		'\n', '\x2', '\x2', '\x5EF', '\x5ED', '\x3', '\x2', '\x2', '\x2', '\x5EF', 
		'\x5F0', '\x3', '\x2', '\x2', '\x2', '\x5F0', '\x5F1', '\x3', '\x2', '\x2', 
		'\x2', '\x5F1', '\x5F2', '\x5', 't', ';', '\x2', '\x5F2', '\x5F5', '\a', 
		'\x85', '\x2', '\x2', '\x5F3', '\x5F6', '\x5', '\xBE', '`', '\x2', '\x5F4', 
		'\x5F6', '\x5', 'p', '\x39', '\x2', '\x5F5', '\x5F3', '\x3', '\x2', '\x2', 
		'\x2', '\x5F5', '\x5F4', '\x3', '\x2', '\x2', '\x2', '\x5F6', '\x5F7', 
		'\x3', '\x2', '\x2', '\x2', '\x5F7', '\x5F8', '\a', '\b', '\x2', '\x2', 
		'\x5F8', '\x603', '\x5', '\x42', '\"', '\x2', '\x5F9', '\x5FC', '\a', 
		'\a', '\x2', '\x2', '\x5FA', '\x5FD', '\x5', '\xBE', '`', '\x2', '\x5FB', 
		'\x5FD', '\x5', 'p', '\x39', '\x2', '\x5FC', '\x5FA', '\x3', '\x2', '\x2', 
		'\x2', '\x5FC', '\x5FB', '\x3', '\x2', '\x2', '\x2', '\x5FD', '\x5FE', 
		'\x3', '\x2', '\x2', '\x2', '\x5FE', '\x5FF', '\a', '\b', '\x2', '\x2', 
		'\x5FF', '\x600', '\x5', '\x42', '\"', '\x2', '\x600', '\x602', '\x3', 
		'\x2', '\x2', '\x2', '\x601', '\x5F9', '\x3', '\x2', '\x2', '\x2', '\x602', 
		'\x605', '\x3', '\x2', '\x2', '\x2', '\x603', '\x601', '\x3', '\x2', '\x2', 
		'\x2', '\x603', '\x604', '\x3', '\x2', '\x2', '\x2', '\x604', '\x612', 
		'\x3', '\x2', '\x2', '\x2', '\x605', '\x603', '\x3', '\x2', '\x2', '\x2', 
		'\x606', '\x610', '\a', 'M', '\x2', '\x2', '\x607', '\x60C', '\x5', '\x64', 
		'\x33', '\x2', '\x608', '\x609', '\a', '\a', '\x2', '\x2', '\x609', '\x60B', 
		'\x5', '\x64', '\x33', '\x2', '\x60A', '\x608', '\x3', '\x2', '\x2', '\x2', 
		'\x60B', '\x60E', '\x3', '\x2', '\x2', '\x2', '\x60C', '\x60A', '\x3', 
		'\x2', '\x2', '\x2', '\x60C', '\x60D', '\x3', '\x2', '\x2', '\x2', '\x60D', 
		'\x611', '\x3', '\x2', '\x2', '\x2', '\x60E', '\x60C', '\x3', '\x2', '\x2', 
		'\x2', '\x60F', '\x611', '\x5', 'Z', '.', '\x2', '\x610', '\x607', '\x3', 
		'\x2', '\x2', '\x2', '\x610', '\x60F', '\x3', '\x2', '\x2', '\x2', '\x611', 
		'\x613', '\x3', '\x2', '\x2', '\x2', '\x612', '\x606', '\x3', '\x2', '\x2', 
		'\x2', '\x612', '\x613', '\x3', '\x2', '\x2', '\x2', '\x613', '\x616', 
		'\x3', '\x2', '\x2', '\x2', '\x614', '\x615', '\a', '\x96', '\x2', '\x2', 
		'\x615', '\x617', '\x5', '\x42', '\"', '\x2', '\x616', '\x614', '\x3', 
		'\x2', '\x2', '\x2', '\x616', '\x617', '\x3', '\x2', '\x2', '\x2', '\x617', 
		'\x619', '\x3', '\x2', '\x2', '\x2', '\x618', '\x61A', '\x5', 'N', '(', 
		'\x2', '\x619', '\x618', '\x3', '\x2', '\x2', '\x2', '\x619', '\x61A', 
		'\x3', '\x2', '\x2', '\x2', '\x61A', 'o', '\x3', '\x2', '\x2', '\x2', 
		'\x61B', '\x61C', '\a', '\x5', '\x2', '\x2', '\x61C', '\x621', '\x5', 
		'\xBE', '`', '\x2', '\x61D', '\x61E', '\a', '\a', '\x2', '\x2', '\x61E', 
		'\x620', '\x5', '\xBE', '`', '\x2', '\x61F', '\x61D', '\x3', '\x2', '\x2', 
		'\x2', '\x620', '\x623', '\x3', '\x2', '\x2', '\x2', '\x621', '\x61F', 
		'\x3', '\x2', '\x2', '\x2', '\x621', '\x622', '\x3', '\x2', '\x2', '\x2', 
		'\x622', '\x624', '\x3', '\x2', '\x2', '\x2', '\x623', '\x621', '\x3', 
		'\x2', '\x2', '\x2', '\x624', '\x625', '\a', '\x6', '\x2', '\x2', '\x625', 
		'q', '\x3', '\x2', '\x2', '\x2', '\x626', '\x628', '\x5', '\x32', '\x1A', 
		'\x2', '\x627', '\x626', '\x3', '\x2', '\x2', '\x2', '\x627', '\x628', 
		'\x3', '\x2', '\x2', '\x2', '\x628', '\x629', '\x3', '\x2', '\x2', '\x2', 
		'\x629', '\x62C', '\a', '\x8F', '\x2', '\x2', '\x62A', '\x62B', '\a', 
		'n', '\x2', '\x2', '\x62B', '\x62D', '\t', '\n', '\x2', '\x2', '\x62C', 
		'\x62A', '\x3', '\x2', '\x2', '\x2', '\x62C', '\x62D', '\x3', '\x2', '\x2', 
		'\x2', '\x62D', '\x62E', '\x3', '\x2', '\x2', '\x2', '\x62E', '\x62F', 
		'\x5', 't', ';', '\x2', '\x62F', '\x632', '\a', '\x85', '\x2', '\x2', 
		'\x630', '\x633', '\x5', '\xBE', '`', '\x2', '\x631', '\x633', '\x5', 
		'p', '\x39', '\x2', '\x632', '\x630', '\x3', '\x2', '\x2', '\x2', '\x632', 
		'\x631', '\x3', '\x2', '\x2', '\x2', '\x633', '\x634', '\x3', '\x2', '\x2', 
		'\x2', '\x634', '\x635', '\a', '\b', '\x2', '\x2', '\x635', '\x640', '\x5', 
		'\x42', '\"', '\x2', '\x636', '\x639', '\a', '\a', '\x2', '\x2', '\x637', 
		'\x63A', '\x5', '\xBE', '`', '\x2', '\x638', '\x63A', '\x5', 'p', '\x39', 
		'\x2', '\x639', '\x637', '\x3', '\x2', '\x2', '\x2', '\x639', '\x638', 
		'\x3', '\x2', '\x2', '\x2', '\x63A', '\x63B', '\x3', '\x2', '\x2', '\x2', 
		'\x63B', '\x63C', '\a', '\b', '\x2', '\x2', '\x63C', '\x63D', '\x5', '\x42', 
		'\"', '\x2', '\x63D', '\x63F', '\x3', '\x2', '\x2', '\x2', '\x63E', '\x636', 
		'\x3', '\x2', '\x2', '\x2', '\x63F', '\x642', '\x3', '\x2', '\x2', '\x2', 
		'\x640', '\x63E', '\x3', '\x2', '\x2', '\x2', '\x640', '\x641', '\x3', 
		'\x2', '\x2', '\x2', '\x641', '\x645', '\x3', '\x2', '\x2', '\x2', '\x642', 
		'\x640', '\x3', '\x2', '\x2', '\x2', '\x643', '\x644', '\a', '\x96', '\x2', 
		'\x2', '\x644', '\x646', '\x5', '\x42', '\"', '\x2', '\x645', '\x643', 
		'\x3', '\x2', '\x2', '\x2', '\x645', '\x646', '\x3', '\x2', '\x2', '\x2', 
		'\x646', '\x648', '\x3', '\x2', '\x2', '\x2', '\x647', '\x649', '\x5', 
		'N', '(', '\x2', '\x648', '\x647', '\x3', '\x2', '\x2', '\x2', '\x648', 
		'\x649', '\x3', '\x2', '\x2', '\x2', '\x649', '\x64E', '\x3', '\x2', '\x2', 
		'\x2', '\x64A', '\x64C', '\x5', '\x8A', '\x46', '\x2', '\x64B', '\x64A', 
		'\x3', '\x2', '\x2', '\x2', '\x64B', '\x64C', '\x3', '\x2', '\x2', '\x2', 
		'\x64C', '\x64D', '\x3', '\x2', '\x2', '\x2', '\x64D', '\x64F', '\x5', 
		'\x8C', 'G', '\x2', '\x64E', '\x64B', '\x3', '\x2', '\x2', '\x2', '\x64E', 
		'\x64F', '\x3', '\x2', '\x2', '\x2', '\x64F', 's', '\x3', '\x2', '\x2', 
		'\x2', '\x650', '\x651', '\x5', '\xB8', ']', '\x2', '\x651', '\x652', 
		'\a', '\x4', '\x2', '\x2', '\x652', '\x654', '\x3', '\x2', '\x2', '\x2', 
		'\x653', '\x650', '\x3', '\x2', '\x2', '\x2', '\x653', '\x654', '\x3', 
		'\x2', '\x2', '\x2', '\x654', '\x655', '\x3', '\x2', '\x2', '\x2', '\x655', 
		'\x658', '\x5', '\xBA', '^', '\x2', '\x656', '\x657', '\a', '#', '\x2', 
		'\x2', '\x657', '\x659', '\x5', '\xD6', 'l', '\x2', '\x658', '\x656', 
		'\x3', '\x2', '\x2', '\x2', '\x658', '\x659', '\x3', '\x2', '\x2', '\x2', 
		'\x659', '\x65F', '\x3', '\x2', '\x2', '\x2', '\x65A', '\x65B', '\a', 
		'W', '\x2', '\x2', '\x65B', '\x65C', '\a', '*', '\x2', '\x2', '\x65C', 
		'\x660', '\x5', '\xC4', '\x63', '\x2', '\x65D', '\x65E', '\a', 'h', '\x2', 
		'\x2', '\x65E', '\x660', '\a', 'W', '\x2', '\x2', '\x65F', '\x65A', '\x3', 
		'\x2', '\x2', '\x2', '\x65F', '\x65D', '\x3', '\x2', '\x2', '\x2', '\x65F', 
		'\x660', '\x3', '\x2', '\x2', '\x2', '\x660', 'u', '\x3', '\x2', '\x2', 
		'\x2', '\x661', '\x663', '\a', '\x91', '\x2', '\x2', '\x662', '\x664', 
		'\x5', '\xB8', ']', '\x2', '\x663', '\x662', '\x3', '\x2', '\x2', '\x2', 
		'\x663', '\x664', '\x3', '\x2', '\x2', '\x2', '\x664', '\x667', '\x3', 
		'\x2', '\x2', '\x2', '\x665', '\x666', '\a', ']', '\x2', '\x2', '\x666', 
		'\x668', '\x5', '\xD8', 'm', '\x2', '\x667', '\x665', '\x3', '\x2', '\x2', 
		'\x2', '\x667', '\x668', '\x3', '\x2', '\x2', '\x2', '\x668', 'w', '\x3', 
		'\x2', '\x2', '\x2', '\x669', '\x66A', '\a', '\xB4', '\x2', '\x2', '\x66A', 
		'\x66B', '\a', '\x5', '\x2', '\x2', '\x66B', '\x66C', '\a', '\x96', '\x2', 
		'\x2', '\x66C', '\x66D', '\x5', '\x42', '\"', '\x2', '\x66D', '\x66E', 
		'\a', '\x6', '\x2', '\x2', '\x66E', 'y', '\x3', '\x2', '\x2', '\x2', '\x66F', 
		'\x671', '\a', '\x5', '\x2', '\x2', '\x670', '\x672', '\x5', '\xDA', 'n', 
		'\x2', '\x671', '\x670', '\x3', '\x2', '\x2', '\x2', '\x671', '\x672', 
		'\x3', '\x2', '\x2', '\x2', '\x672', '\x67D', '\x3', '\x2', '\x2', '\x2', 
		'\x673', '\x674', '\a', '\x9B', '\x2', '\x2', '\x674', '\x675', '\a', 
		'*', '\x2', '\x2', '\x675', '\x67A', '\x5', '\x42', '\"', '\x2', '\x676', 
		'\x677', '\a', '\a', '\x2', '\x2', '\x677', '\x679', '\x5', '\x42', '\"', 
		'\x2', '\x678', '\x676', '\x3', '\x2', '\x2', '\x2', '\x679', '\x67C', 
		'\x3', '\x2', '\x2', '\x2', '\x67A', '\x678', '\x3', '\x2', '\x2', '\x2', 
		'\x67A', '\x67B', '\x3', '\x2', '\x2', '\x2', '\x67B', '\x67E', '\x3', 
		'\x2', '\x2', '\x2', '\x67C', '\x67A', '\x3', '\x2', '\x2', '\x2', '\x67D', 
		'\x673', '\x3', '\x2', '\x2', '\x2', '\x67D', '\x67E', '\x3', '\x2', '\x2', 
		'\x2', '\x67E', '\x67F', '\x3', '\x2', '\x2', '\x2', '\x67F', '\x680', 
		'\a', 'o', '\x2', '\x2', '\x680', '\x681', '\a', '*', '\x2', '\x2', '\x681', 
		'\x686', '\x5', '\x8E', 'H', '\x2', '\x682', '\x683', '\a', '\a', '\x2', 
		'\x2', '\x683', '\x685', '\x5', '\x8E', 'H', '\x2', '\x684', '\x682', 
		'\x3', '\x2', '\x2', '\x2', '\x685', '\x688', '\x3', '\x2', '\x2', '\x2', 
		'\x686', '\x684', '\x3', '\x2', '\x2', '\x2', '\x686', '\x687', '\x3', 
		'\x2', '\x2', '\x2', '\x687', '\x68A', '\x3', '\x2', '\x2', '\x2', '\x688', 
		'\x686', '\x3', '\x2', '\x2', '\x2', '\x689', '\x68B', '\x5', '~', '@', 
		'\x2', '\x68A', '\x689', '\x3', '\x2', '\x2', '\x2', '\x68A', '\x68B', 
		'\x3', '\x2', '\x2', '\x2', '\x68B', '\x68C', '\x3', '\x2', '\x2', '\x2', 
		'\x68C', '\x68D', '\a', '\x6', '\x2', '\x2', '\x68D', '{', '\x3', '\x2', 
		'\x2', '\x2', '\x68E', '\x6B0', '\a', '\x9A', '\x2', '\x2', '\x68F', '\x6B1', 
		'\x5', '\xD4', 'k', '\x2', '\x690', '\x692', '\a', '\x5', '\x2', '\x2', 
		'\x691', '\x693', '\x5', '\xDA', 'n', '\x2', '\x692', '\x691', '\x3', 
		'\x2', '\x2', '\x2', '\x692', '\x693', '\x3', '\x2', '\x2', '\x2', '\x693', 
		'\x69E', '\x3', '\x2', '\x2', '\x2', '\x694', '\x695', '\a', '\x9B', '\x2', 
		'\x2', '\x695', '\x696', '\a', '*', '\x2', '\x2', '\x696', '\x69B', '\x5', 
		'\x42', '\"', '\x2', '\x697', '\x698', '\a', '\a', '\x2', '\x2', '\x698', 
		'\x69A', '\x5', '\x42', '\"', '\x2', '\x699', '\x697', '\x3', '\x2', '\x2', 
		'\x2', '\x69A', '\x69D', '\x3', '\x2', '\x2', '\x2', '\x69B', '\x699', 
		'\x3', '\x2', '\x2', '\x2', '\x69B', '\x69C', '\x3', '\x2', '\x2', '\x2', 
		'\x69C', '\x69F', '\x3', '\x2', '\x2', '\x2', '\x69D', '\x69B', '\x3', 
		'\x2', '\x2', '\x2', '\x69E', '\x694', '\x3', '\x2', '\x2', '\x2', '\x69E', 
		'\x69F', '\x3', '\x2', '\x2', '\x2', '\x69F', '\x6AA', '\x3', '\x2', '\x2', 
		'\x2', '\x6A0', '\x6A1', '\a', 'o', '\x2', '\x2', '\x6A1', '\x6A2', '\a', 
		'*', '\x2', '\x2', '\x6A2', '\x6A7', '\x5', '\x8E', 'H', '\x2', '\x6A3', 
		'\x6A4', '\a', '\a', '\x2', '\x2', '\x6A4', '\x6A6', '\x5', '\x8E', 'H', 
		'\x2', '\x6A5', '\x6A3', '\x3', '\x2', '\x2', '\x2', '\x6A6', '\x6A9', 
		'\x3', '\x2', '\x2', '\x2', '\x6A7', '\x6A5', '\x3', '\x2', '\x2', '\x2', 
		'\x6A7', '\x6A8', '\x3', '\x2', '\x2', '\x2', '\x6A8', '\x6AB', '\x3', 
		'\x2', '\x2', '\x2', '\x6A9', '\x6A7', '\x3', '\x2', '\x2', '\x2', '\x6AA', 
		'\x6A0', '\x3', '\x2', '\x2', '\x2', '\x6AA', '\x6AB', '\x3', '\x2', '\x2', 
		'\x2', '\x6AB', '\x6AD', '\x3', '\x2', '\x2', '\x2', '\x6AC', '\x6AE', 
		'\x5', '~', '@', '\x2', '\x6AD', '\x6AC', '\x3', '\x2', '\x2', '\x2', 
		'\x6AD', '\x6AE', '\x3', '\x2', '\x2', '\x2', '\x6AE', '\x6AF', '\x3', 
		'\x2', '\x2', '\x2', '\x6AF', '\x6B1', '\a', '\x6', '\x2', '\x2', '\x6B0', 
		'\x68F', '\x3', '\x2', '\x2', '\x2', '\x6B0', '\x690', '\x3', '\x2', '\x2', 
		'\x2', '\x6B1', '}', '\x3', '\x2', '\x2', '\x2', '\x6B2', '\x6BC', '\x5', 
		'\x80', '\x41', '\x2', '\x6B3', '\x6BA', '\a', '\xB6', '\x2', '\x2', '\x6B4', 
		'\x6B5', '\a', 'g', '\x2', '\x2', '\x6B5', '\x6BB', '\a', '\xB8', '\x2', 
		'\x2', '\x6B6', '\x6B7', '\a', '\x9F', '\x2', '\x2', '\x6B7', '\x6BB', 
		'\a', '\x81', '\x2', '\x2', '\x6B8', '\x6BB', '\a', 'P', '\x2', '\x2', 
		'\x6B9', '\x6BB', '\a', '\xB7', '\x2', '\x2', '\x6BA', '\x6B4', '\x3', 
		'\x2', '\x2', '\x2', '\x6BA', '\x6B6', '\x3', '\x2', '\x2', '\x2', '\x6BA', 
		'\x6B8', '\x3', '\x2', '\x2', '\x2', '\x6BA', '\x6B9', '\x3', '\x2', '\x2', 
		'\x2', '\x6BB', '\x6BD', '\x3', '\x2', '\x2', '\x2', '\x6BC', '\x6B3', 
		'\x3', '\x2', '\x2', '\x2', '\x6BC', '\x6BD', '\x3', '\x2', '\x2', '\x2', 
		'\x6BD', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x6BE', '\x6C5', '\t', '\x14', 
		'\x2', '\x2', '\x6BF', '\x6C6', '\x5', '\x96', 'L', '\x2', '\x6C0', '\x6C1', 
		'\a', ')', '\x2', '\x2', '\x6C1', '\x6C2', '\x5', '\x92', 'J', '\x2', 
		'\x6C2', '\x6C3', '\a', '\"', '\x2', '\x2', '\x6C3', '\x6C4', '\x5', '\x94', 
		'K', '\x2', '\x6C4', '\x6C6', '\x3', '\x2', '\x2', '\x2', '\x6C5', '\x6BF', 
		'\x3', '\x2', '\x2', '\x2', '\x6C5', '\x6C0', '\x3', '\x2', '\x2', '\x2', 
		'\x6C6', '\x81', '\x3', '\x2', '\x2', '\x2', '\x6C7', '\x6C8', '\x5', 
		'\xDC', 'o', '\x2', '\x6C8', '\x6D2', '\a', '\x5', '\x2', '\x2', '\x6C9', 
		'\x6CE', '\x5', '\x42', '\"', '\x2', '\x6CA', '\x6CB', '\a', '\a', '\x2', 
		'\x2', '\x6CB', '\x6CD', '\x5', '\x42', '\"', '\x2', '\x6CC', '\x6CA', 
		'\x3', '\x2', '\x2', '\x2', '\x6CD', '\x6D0', '\x3', '\x2', '\x2', '\x2', 
		'\x6CE', '\x6CC', '\x3', '\x2', '\x2', '\x2', '\x6CE', '\x6CF', '\x3', 
		'\x2', '\x2', '\x2', '\x6CF', '\x6D3', '\x3', '\x2', '\x2', '\x2', '\x6D0', 
		'\x6CE', '\x3', '\x2', '\x2', '\x2', '\x6D1', '\x6D3', '\a', '\t', '\x2', 
		'\x2', '\x6D2', '\x6C9', '\x3', '\x2', '\x2', '\x2', '\x6D2', '\x6D1', 
		'\x3', '\x2', '\x2', '\x2', '\x6D3', '\x6D4', '\x3', '\x2', '\x2', '\x2', 
		'\x6D4', '\x6D5', '\a', '\x6', '\x2', '\x2', '\x6D5', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x6D6', '\x6D7', '\x5', '\xDE', 'p', '\x2', '\x6D7', '\x6E4', 
		'\a', '\x5', '\x2', '\x2', '\x6D8', '\x6DA', '\a', '@', '\x2', '\x2', 
		'\x6D9', '\x6D8', '\x3', '\x2', '\x2', '\x2', '\x6D9', '\x6DA', '\x3', 
		'\x2', '\x2', '\x2', '\x6DA', '\x6DB', '\x3', '\x2', '\x2', '\x2', '\x6DB', 
		'\x6E0', '\x5', '\x42', '\"', '\x2', '\x6DC', '\x6DD', '\a', '\a', '\x2', 
		'\x2', '\x6DD', '\x6DF', '\x5', '\x42', '\"', '\x2', '\x6DE', '\x6DC', 
		'\x3', '\x2', '\x2', '\x2', '\x6DF', '\x6E2', '\x3', '\x2', '\x2', '\x2', 
		'\x6E0', '\x6DE', '\x3', '\x2', '\x2', '\x2', '\x6E0', '\x6E1', '\x3', 
		'\x2', '\x2', '\x2', '\x6E1', '\x6E5', '\x3', '\x2', '\x2', '\x2', '\x6E2', 
		'\x6E0', '\x3', '\x2', '\x2', '\x2', '\x6E3', '\x6E5', '\a', '\t', '\x2', 
		'\x2', '\x6E4', '\x6D9', '\x3', '\x2', '\x2', '\x2', '\x6E4', '\x6E3', 
		'\x3', '\x2', '\x2', '\x2', '\x6E4', '\x6E5', '\x3', '\x2', '\x2', '\x2', 
		'\x6E5', '\x6E6', '\x3', '\x2', '\x2', '\x2', '\x6E6', '\x6E8', '\a', 
		'\x6', '\x2', '\x2', '\x6E7', '\x6E9', '\x5', 'x', '=', '\x2', '\x6E8', 
		'\x6E7', '\x3', '\x2', '\x2', '\x2', '\x6E8', '\x6E9', '\x3', '\x2', '\x2', 
		'\x2', '\x6E9', '\x85', '\x3', '\x2', '\x2', '\x2', '\x6EA', '\x6EB', 
		'\x5', '\x98', 'M', '\x2', '\x6EB', '\x6F5', '\a', '\x5', '\x2', '\x2', 
		'\x6EC', '\x6F1', '\x5', '\x42', '\"', '\x2', '\x6ED', '\x6EE', '\a', 
		'\a', '\x2', '\x2', '\x6EE', '\x6F0', '\x5', '\x42', '\"', '\x2', '\x6EF', 
		'\x6ED', '\x3', '\x2', '\x2', '\x2', '\x6F0', '\x6F3', '\x3', '\x2', '\x2', 
		'\x2', '\x6F1', '\x6EF', '\x3', '\x2', '\x2', '\x2', '\x6F1', '\x6F2', 
		'\x3', '\x2', '\x2', '\x2', '\x6F2', '\x6F6', '\x3', '\x2', '\x2', '\x2', 
		'\x6F3', '\x6F1', '\x3', '\x2', '\x2', '\x2', '\x6F4', '\x6F6', '\a', 
		'\t', '\x2', '\x2', '\x6F5', '\x6EC', '\x3', '\x2', '\x2', '\x2', '\x6F5', 
		'\x6F4', '\x3', '\x2', '\x2', '\x2', '\x6F5', '\x6F6', '\x3', '\x2', '\x2', 
		'\x2', '\x6F6', '\x6F7', '\x3', '\x2', '\x2', '\x2', '\x6F7', '\x6F9', 
		'\a', '\x6', '\x2', '\x2', '\x6F8', '\x6FA', '\x5', 'x', '=', '\x2', '\x6F9', 
		'\x6F8', '\x3', '\x2', '\x2', '\x2', '\x6F9', '\x6FA', '\x3', '\x2', '\x2', 
		'\x2', '\x6FA', '\x6FB', '\x3', '\x2', '\x2', '\x2', '\x6FB', '\x6FE', 
		'\a', '\x9A', '\x2', '\x2', '\x6FC', '\x6FF', '\x5', 'z', '>', '\x2', 
		'\x6FD', '\x6FF', '\x5', '\xD4', 'k', '\x2', '\x6FE', '\x6FC', '\x3', 
		'\x2', '\x2', '\x2', '\x6FE', '\x6FD', '\x3', '\x2', '\x2', '\x2', '\x6FF', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x700', '\x702', '\a', '\x97', '\x2', 
		'\x2', '\x701', '\x703', '\a', 'v', '\x2', '\x2', '\x702', '\x701', '\x3', 
		'\x2', '\x2', '\x2', '\x702', '\x703', '\x3', '\x2', '\x2', '\x2', '\x703', 
		'\x704', '\x3', '\x2', '\x2', '\x2', '\x704', '\x709', '\x5', '\x38', 
		'\x1D', '\x2', '\x705', '\x706', '\a', '\a', '\x2', '\x2', '\x706', '\x708', 
		'\x5', '\x38', '\x1D', '\x2', '\x707', '\x705', '\x3', '\x2', '\x2', '\x2', 
		'\x708', '\x70B', '\x3', '\x2', '\x2', '\x2', '\x709', '\x707', '\x3', 
		'\x2', '\x2', '\x2', '\x709', '\x70A', '\x3', '\x2', '\x2', '\x2', '\x70A', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x70B', '\x709', '\x3', '\x2', '\x2', 
		'\x2', '\x70C', '\x70D', '\a', 'o', '\x2', '\x2', '\x70D', '\x70E', '\a', 
		'*', '\x2', '\x2', '\x70E', '\x713', '\x5', '\x8E', 'H', '\x2', '\x70F', 
		'\x710', '\a', '\a', '\x2', '\x2', '\x710', '\x712', '\x5', '\x8E', 'H', 
		'\x2', '\x711', '\x70F', '\x3', '\x2', '\x2', '\x2', '\x712', '\x715', 
		'\x3', '\x2', '\x2', '\x2', '\x713', '\x711', '\x3', '\x2', '\x2', '\x2', 
		'\x713', '\x714', '\x3', '\x2', '\x2', '\x2', '\x714', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x715', '\x713', '\x3', '\x2', '\x2', '\x2', '\x716', 
		'\x717', '\a', '\x64', '\x2', '\x2', '\x717', '\x71A', '\x5', '\x42', 
		'\"', '\x2', '\x718', '\x719', '\t', '\x15', '\x2', '\x2', '\x719', '\x71B', 
		'\x5', '\x42', '\"', '\x2', '\x71A', '\x718', '\x3', '\x2', '\x2', '\x2', 
		'\x71A', '\x71B', '\x3', '\x2', '\x2', '\x2', '\x71B', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x71C', '\x71F', '\x5', '\x42', '\"', '\x2', '\x71D', 
		'\x71E', '\a', '/', '\x2', '\x2', '\x71E', '\x720', '\x5', '\xC0', '\x61', 
		'\x2', '\x71F', '\x71D', '\x3', '\x2', '\x2', '\x2', '\x71F', '\x720', 
		'\x3', '\x2', '\x2', '\x2', '\x720', '\x722', '\x3', '\x2', '\x2', '\x2', 
		'\x721', '\x723', '\x5', '\x90', 'I', '\x2', '\x722', '\x721', '\x3', 
		'\x2', '\x2', '\x2', '\x722', '\x723', '\x3', '\x2', '\x2', '\x2', '\x723', 
		'\x726', '\x3', '\x2', '\x2', '\x2', '\x724', '\x725', '\a', '\xB1', '\x2', 
		'\x2', '\x725', '\x727', '\t', '\x16', '\x2', '\x2', '\x726', '\x724', 
		'\x3', '\x2', '\x2', '\x2', '\x726', '\x727', '\x3', '\x2', '\x2', '\x2', 
		'\x727', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x728', '\x729', '\t', '\x17', 
		'\x2', '\x2', '\x729', '\x91', '\x3', '\x2', '\x2', '\x2', '\x72A', '\x72B', 
		'\x5', '\x42', '\"', '\x2', '\x72B', '\x72C', '\a', '\x9D', '\x2', '\x2', 
		'\x72C', '\x735', '\x3', '\x2', '\x2', '\x2', '\x72D', '\x72E', '\x5', 
		'\x42', '\"', '\x2', '\x72E', '\x72F', '\a', '\xA0', '\x2', '\x2', '\x72F', 
		'\x735', '\x3', '\x2', '\x2', '\x2', '\x730', '\x731', '\a', '\x9F', '\x2', 
		'\x2', '\x731', '\x735', '\a', '\x81', '\x2', '\x2', '\x732', '\x733', 
		'\a', '\x9E', '\x2', '\x2', '\x733', '\x735', '\a', '\x9D', '\x2', '\x2', 
		'\x734', '\x72A', '\x3', '\x2', '\x2', '\x2', '\x734', '\x72D', '\x3', 
		'\x2', '\x2', '\x2', '\x734', '\x730', '\x3', '\x2', '\x2', '\x2', '\x734', 
		'\x732', '\x3', '\x2', '\x2', '\x2', '\x735', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x736', '\x737', '\x5', '\x42', '\"', '\x2', '\x737', '\x738', 
		'\a', '\x9D', '\x2', '\x2', '\x738', '\x741', '\x3', '\x2', '\x2', '\x2', 
		'\x739', '\x73A', '\x5', '\x42', '\"', '\x2', '\x73A', '\x73B', '\a', 
		'\xA0', '\x2', '\x2', '\x73B', '\x741', '\x3', '\x2', '\x2', '\x2', '\x73C', 
		'\x73D', '\a', '\x9F', '\x2', '\x2', '\x73D', '\x741', '\a', '\x81', '\x2', 
		'\x2', '\x73E', '\x73F', '\a', '\x9E', '\x2', '\x2', '\x73F', '\x741', 
		'\a', '\xA0', '\x2', '\x2', '\x740', '\x736', '\x3', '\x2', '\x2', '\x2', 
		'\x740', '\x739', '\x3', '\x2', '\x2', '\x2', '\x740', '\x73C', '\x3', 
		'\x2', '\x2', '\x2', '\x740', '\x73E', '\x3', '\x2', '\x2', '\x2', '\x741', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x742', '\x743', '\x5', '\x42', '\"', 
		'\x2', '\x743', '\x744', '\a', '\x9D', '\x2', '\x2', '\x744', '\x74A', 
		'\x3', '\x2', '\x2', '\x2', '\x745', '\x746', '\a', '\x9E', '\x2', '\x2', 
		'\x746', '\x74A', '\a', '\x9D', '\x2', '\x2', '\x747', '\x748', '\a', 
		'\x9F', '\x2', '\x2', '\x748', '\x74A', '\a', '\x81', '\x2', '\x2', '\x749', 
		'\x742', '\x3', '\x2', '\x2', '\x2', '\x749', '\x745', '\x3', '\x2', '\x2', 
		'\x2', '\x749', '\x747', '\x3', '\x2', '\x2', '\x2', '\x74A', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x74B', '\x74C', '\t', '\x18', '\x2', '\x2', 
		'\x74C', '\x74D', '\a', '\x5', '\x2', '\x2', '\x74D', '\x74E', '\x5', 
		'\x42', '\"', '\x2', '\x74E', '\x74F', '\a', '\x6', '\x2', '\x2', '\x74F', 
		'\x750', '\a', '\x9A', '\x2', '\x2', '\x750', '\x752', '\a', '\x5', '\x2', 
		'\x2', '\x751', '\x753', '\x5', '\x9E', 'P', '\x2', '\x752', '\x751', 
		'\x3', '\x2', '\x2', '\x2', '\x752', '\x753', '\x3', '\x2', '\x2', '\x2', 
		'\x753', '\x754', '\x3', '\x2', '\x2', '\x2', '\x754', '\x756', '\x5', 
		'\xA2', 'R', '\x2', '\x755', '\x757', '\x5', '\x80', '\x41', '\x2', '\x756', 
		'\x755', '\x3', '\x2', '\x2', '\x2', '\x756', '\x757', '\x3', '\x2', '\x2', 
		'\x2', '\x757', '\x758', '\x3', '\x2', '\x2', '\x2', '\x758', '\x759', 
		'\a', '\x6', '\x2', '\x2', '\x759', '\x7A1', '\x3', '\x2', '\x2', '\x2', 
		'\x75A', '\x75B', '\t', '\x19', '\x2', '\x2', '\x75B', '\x75C', '\a', 
		'\x5', '\x2', '\x2', '\x75C', '\x75D', '\a', '\x6', '\x2', '\x2', '\x75D', 
		'\x75E', '\a', '\x9A', '\x2', '\x2', '\x75E', '\x760', '\a', '\x5', '\x2', 
		'\x2', '\x75F', '\x761', '\x5', '\x9E', 'P', '\x2', '\x760', '\x75F', 
		'\x3', '\x2', '\x2', '\x2', '\x760', '\x761', '\x3', '\x2', '\x2', '\x2', 
		'\x761', '\x763', '\x3', '\x2', '\x2', '\x2', '\x762', '\x764', '\x5', 
		'\xA0', 'Q', '\x2', '\x763', '\x762', '\x3', '\x2', '\x2', '\x2', '\x763', 
		'\x764', '\x3', '\x2', '\x2', '\x2', '\x764', '\x765', '\x3', '\x2', '\x2', 
		'\x2', '\x765', '\x7A1', '\a', '\x6', '\x2', '\x2', '\x766', '\x767', 
		'\t', '\x1A', '\x2', '\x2', '\x767', '\x768', '\a', '\x5', '\x2', '\x2', 
		'\x768', '\x769', '\a', '\x6', '\x2', '\x2', '\x769', '\x76A', '\a', '\x9A', 
		'\x2', '\x2', '\x76A', '\x76C', '\a', '\x5', '\x2', '\x2', '\x76B', '\x76D', 
		'\x5', '\x9E', 'P', '\x2', '\x76C', '\x76B', '\x3', '\x2', '\x2', '\x2', 
		'\x76C', '\x76D', '\x3', '\x2', '\x2', '\x2', '\x76D', '\x76E', '\x3', 
		'\x2', '\x2', '\x2', '\x76E', '\x76F', '\x5', '\xA2', 'R', '\x2', '\x76F', 
		'\x770', '\a', '\x6', '\x2', '\x2', '\x770', '\x7A1', '\x3', '\x2', '\x2', 
		'\x2', '\x771', '\x772', '\t', '\x1B', '\x2', '\x2', '\x772', '\x773', 
		'\a', '\x5', '\x2', '\x2', '\x773', '\x775', '\x5', '\x42', '\"', '\x2', 
		'\x774', '\x776', '\x5', '\x9A', 'N', '\x2', '\x775', '\x774', '\x3', 
		'\x2', '\x2', '\x2', '\x775', '\x776', '\x3', '\x2', '\x2', '\x2', '\x776', 
		'\x778', '\x3', '\x2', '\x2', '\x2', '\x777', '\x779', '\x5', '\x9C', 
		'O', '\x2', '\x778', '\x777', '\x3', '\x2', '\x2', '\x2', '\x778', '\x779', 
		'\x3', '\x2', '\x2', '\x2', '\x779', '\x77A', '\x3', '\x2', '\x2', '\x2', 
		'\x77A', '\x77B', '\a', '\x6', '\x2', '\x2', '\x77B', '\x77C', '\a', '\x9A', 
		'\x2', '\x2', '\x77C', '\x77E', '\a', '\x5', '\x2', '\x2', '\x77D', '\x77F', 
		'\x5', '\x9E', 'P', '\x2', '\x77E', '\x77D', '\x3', '\x2', '\x2', '\x2', 
		'\x77E', '\x77F', '\x3', '\x2', '\x2', '\x2', '\x77F', '\x780', '\x3', 
		'\x2', '\x2', '\x2', '\x780', '\x781', '\x5', '\xA2', 'R', '\x2', '\x781', 
		'\x782', '\a', '\x6', '\x2', '\x2', '\x782', '\x7A1', '\x3', '\x2', '\x2', 
		'\x2', '\x783', '\x784', '\a', '\xA6', '\x2', '\x2', '\x784', '\x785', 
		'\a', '\x5', '\x2', '\x2', '\x785', '\x786', '\x5', '\x42', '\"', '\x2', 
		'\x786', '\x787', '\a', '\a', '\x2', '\x2', '\x787', '\x788', '\x5', '$', 
		'\x13', '\x2', '\x788', '\x789', '\a', '\x6', '\x2', '\x2', '\x789', '\x78A', 
		'\a', '\x9A', '\x2', '\x2', '\x78A', '\x78C', '\a', '\x5', '\x2', '\x2', 
		'\x78B', '\x78D', '\x5', '\x9E', 'P', '\x2', '\x78C', '\x78B', '\x3', 
		'\x2', '\x2', '\x2', '\x78C', '\x78D', '\x3', '\x2', '\x2', '\x2', '\x78D', 
		'\x78E', '\x3', '\x2', '\x2', '\x2', '\x78E', '\x790', '\x5', '\xA2', 
		'R', '\x2', '\x78F', '\x791', '\x5', '\x80', '\x41', '\x2', '\x790', '\x78F', 
		'\x3', '\x2', '\x2', '\x2', '\x790', '\x791', '\x3', '\x2', '\x2', '\x2', 
		'\x791', '\x792', '\x3', '\x2', '\x2', '\x2', '\x792', '\x793', '\a', 
		'\x6', '\x2', '\x2', '\x793', '\x7A1', '\x3', '\x2', '\x2', '\x2', '\x794', 
		'\x795', '\a', '\xA7', '\x2', '\x2', '\x795', '\x796', '\a', '\x5', '\x2', 
		'\x2', '\x796', '\x797', '\x5', '\x42', '\"', '\x2', '\x797', '\x798', 
		'\a', '\x6', '\x2', '\x2', '\x798', '\x799', '\a', '\x9A', '\x2', '\x2', 
		'\x799', '\x79B', '\a', '\x5', '\x2', '\x2', '\x79A', '\x79C', '\x5', 
		'\x9E', 'P', '\x2', '\x79B', '\x79A', '\x3', '\x2', '\x2', '\x2', '\x79B', 
		'\x79C', '\x3', '\x2', '\x2', '\x2', '\x79C', '\x79D', '\x3', '\x2', '\x2', 
		'\x2', '\x79D', '\x79E', '\x5', '\xA2', 'R', '\x2', '\x79E', '\x79F', 
		'\a', '\x6', '\x2', '\x2', '\x79F', '\x7A1', '\x3', '\x2', '\x2', '\x2', 
		'\x7A0', '\x74B', '\x3', '\x2', '\x2', '\x2', '\x7A0', '\x75A', '\x3', 
		'\x2', '\x2', '\x2', '\x7A0', '\x766', '\x3', '\x2', '\x2', '\x2', '\x7A0', 
		'\x771', '\x3', '\x2', '\x2', '\x2', '\x7A0', '\x783', '\x3', '\x2', '\x2', 
		'\x2', '\x7A0', '\x794', '\x3', '\x2', '\x2', '\x2', '\x7A1', '\x99', 
		'\x3', '\x2', '\x2', '\x2', '\x7A2', '\x7A3', '\a', '\a', '\x2', '\x2', 
		'\x7A3', '\x7A4', '\x5', '$', '\x13', '\x2', '\x7A4', '\x9B', '\x3', '\x2', 
		'\x2', '\x2', '\x7A5', '\x7A6', '\a', '\a', '\x2', '\x2', '\x7A6', '\x7A7', 
		'\x5', '$', '\x13', '\x2', '\x7A7', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x7A8', '\x7A9', '\a', '\x9B', '\x2', '\x2', '\x7A9', '\x7AB', '\a', 
		'*', '\x2', '\x2', '\x7AA', '\x7AC', '\x5', '\x42', '\"', '\x2', '\x7AB', 
		'\x7AA', '\x3', '\x2', '\x2', '\x2', '\x7AC', '\x7AD', '\x3', '\x2', '\x2', 
		'\x2', '\x7AD', '\x7AB', '\x3', '\x2', '\x2', '\x2', '\x7AD', '\x7AE', 
		'\x3', '\x2', '\x2', '\x2', '\x7AE', '\x9F', '\x3', '\x2', '\x2', '\x2', 
		'\x7AF', '\x7B0', '\a', 'o', '\x2', '\x2', '\x7B0', '\x7B2', '\a', '*', 
		'\x2', '\x2', '\x7B1', '\x7B3', '\x5', '\x42', '\"', '\x2', '\x7B2', '\x7B1', 
		'\x3', '\x2', '\x2', '\x2', '\x7B3', '\x7B4', '\x3', '\x2', '\x2', '\x2', 
		'\x7B4', '\x7B2', '\x3', '\x2', '\x2', '\x2', '\x7B4', '\x7B5', '\x3', 
		'\x2', '\x2', '\x2', '\x7B5', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x7B6', 
		'\x7B7', '\a', 'o', '\x2', '\x2', '\x7B7', '\x7B8', '\a', '*', '\x2', 
		'\x2', '\x7B8', '\x7B9', '\x5', '\xA4', 'S', '\x2', '\x7B9', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\x7BA', '\x7BC', '\x5', '\x42', '\"', '\x2', '\x7BB', 
		'\x7BD', '\x5', '\x90', 'I', '\x2', '\x7BC', '\x7BB', '\x3', '\x2', '\x2', 
		'\x2', '\x7BC', '\x7BD', '\x3', '\x2', '\x2', '\x2', '\x7BD', '\x7C5', 
		'\x3', '\x2', '\x2', '\x2', '\x7BE', '\x7BF', '\a', '\a', '\x2', '\x2', 
		'\x7BF', '\x7C1', '\x5', '\x42', '\"', '\x2', '\x7C0', '\x7C2', '\x5', 
		'\x90', 'I', '\x2', '\x7C1', '\x7C0', '\x3', '\x2', '\x2', '\x2', '\x7C1', 
		'\x7C2', '\x3', '\x2', '\x2', '\x2', '\x7C2', '\x7C4', '\x3', '\x2', '\x2', 
		'\x2', '\x7C3', '\x7BE', '\x3', '\x2', '\x2', '\x2', '\x7C4', '\x7C7', 
		'\x3', '\x2', '\x2', '\x2', '\x7C5', '\x7C3', '\x3', '\x2', '\x2', '\x2', 
		'\x7C5', '\x7C6', '\x3', '\x2', '\x2', '\x2', '\x7C6', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\x7C7', '\x7C5', '\x3', '\x2', '\x2', '\x2', '\x7C8', 
		'\x7C9', '\x5', 'X', '-', '\x2', '\x7C9', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '\x7CA', '\x7CB', '\x5', 'X', '-', '\x2', '\x7CB', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\x7CC', '\x7CD', '\t', '\x1C', '\x2', '\x2', '\x7CD', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\x7CE', '\x7CF', '\a', '\xBE', '\x2', 
		'\x2', '\x7CF', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x7D0', '\x7D3', 
		'\x5', '\x42', '\"', '\x2', '\x7D1', '\x7D3', '\x5', '\x1E', '\x10', '\x2', 
		'\x7D2', '\x7D0', '\x3', '\x2', '\x2', '\x2', '\x7D2', '\x7D1', '\x3', 
		'\x2', '\x2', '\x2', '\x7D3', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x7D4', 
		'\x7D5', '\t', '\x1D', '\x2', '\x2', '\x7D5', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\x7D6', '\x7D7', '\t', '\x1E', '\x2', '\x2', '\x7D7', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\x7D8', '\x7D9', '\x5', '\xE2', 'r', '\x2', 
		'\x7D9', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x7DA', '\x7DB', '\x5', 
		'\xE2', 'r', '\x2', '\x7DB', '\xB7', '\x3', '\x2', '\x2', '\x2', '\x7DC', 
		'\x7DD', '\x5', '\xE2', 'r', '\x2', '\x7DD', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '\x7DE', '\x7DF', '\x5', '\xE2', 'r', '\x2', '\x7DF', '\xBB', '\x3', 
		'\x2', '\x2', '\x2', '\x7E0', '\x7E1', '\x5', '\xE2', 'r', '\x2', '\x7E1', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\x7E2', '\x7E3', '\x5', '\xE2', 'r', 
		'\x2', '\x7E3', '\xBF', '\x3', '\x2', '\x2', '\x2', '\x7E4', '\x7E5', 
		'\x5', '\xE2', 'r', '\x2', '\x7E5', '\xC1', '\x3', '\x2', '\x2', '\x2', 
		'\x7E6', '\x7E7', '\x5', '\xE2', 'r', '\x2', '\x7E7', '\xC3', '\x3', '\x2', 
		'\x2', '\x2', '\x7E8', '\x7E9', '\x5', '\xE2', 'r', '\x2', '\x7E9', '\xC5', 
		'\x3', '\x2', '\x2', '\x2', '\x7EA', '\x7EB', '\x5', '\xE2', 'r', '\x2', 
		'\x7EB', '\xC7', '\x3', '\x2', '\x2', '\x2', '\x7EC', '\x7ED', '\x5', 
		'\xE2', 'r', '\x2', '\x7ED', '\xC9', '\x3', '\x2', '\x2', '\x2', '\x7EE', 
		'\x7EF', '\x5', '\xE2', 'r', '\x2', '\x7EF', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\x7F0', '\x7F1', '\x5', '\xE2', 'r', '\x2', '\x7F1', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\x7F2', '\x7F3', '\x5', '\xE2', 'r', '\x2', '\x7F3', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\x7F4', '\x7F5', '\x5', '\xE2', 'r', 
		'\x2', '\x7F5', '\xD1', '\x3', '\x2', '\x2', '\x2', '\x7F6', '\x7F7', 
		'\x5', '\xE2', 'r', '\x2', '\x7F7', '\xD3', '\x3', '\x2', '\x2', '\x2', 
		'\x7F8', '\x7F9', '\x5', '\xE2', 'r', '\x2', '\x7F9', '\xD5', '\x3', '\x2', 
		'\x2', '\x2', '\x7FA', '\x7FB', '\x5', '\xE2', 'r', '\x2', '\x7FB', '\xD7', 
		'\x3', '\x2', '\x2', '\x2', '\x7FC', '\x7FD', '\x5', '\xE2', 'r', '\x2', 
		'\x7FD', '\xD9', '\x3', '\x2', '\x2', '\x2', '\x7FE', '\x7FF', '\x5', 
		'\xE2', 'r', '\x2', '\x7FF', '\xDB', '\x3', '\x2', '\x2', '\x2', '\x800', 
		'\x801', '\x5', '\xE2', 'r', '\x2', '\x801', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\x802', '\x803', '\x5', '\xE2', 'r', '\x2', '\x803', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\x804', '\x805', '\x5', '\xE2', 'r', '\x2', '\x805', 
		'\xE1', '\x3', '\x2', '\x2', '\x2', '\x806', '\x80E', '\a', '\xBB', '\x2', 
		'\x2', '\x807', '\x80E', '\x5', '\xB2', 'Z', '\x2', '\x808', '\x80E', 
		'\a', '\xBE', '\x2', '\x2', '\x809', '\x80A', '\a', '\x5', '\x2', '\x2', 
		'\x80A', '\x80B', '\x5', '\xE2', 'r', '\x2', '\x80B', '\x80C', '\a', '\x6', 
		'\x2', '\x2', '\x80C', '\x80E', '\x3', '\x2', '\x2', '\x2', '\x80D', '\x806', 
		'\x3', '\x2', '\x2', '\x2', '\x80D', '\x807', '\x3', '\x2', '\x2', '\x2', 
		'\x80D', '\x808', '\x3', '\x2', '\x2', '\x2', '\x80D', '\x809', '\x3', 
		'\x2', '\x2', '\x2', '\x80E', '\xE3', '\x3', '\x2', '\x2', '\x2', '\x12B', 
		'\xE7', '\xEF', '\xF6', '\xFB', '\x101', '\x107', '\x109', '\x123', '\x12A', 
		'\x131', '\x137', '\x13B', '\x140', '\x143', '\x14A', '\x14D', '\x151', 
		'\x159', '\x15D', '\x15F', '\x163', '\x167', '\x16B', '\x16E', '\x175', 
		'\x17B', '\x181', '\x186', '\x191', '\x197', '\x19B', '\x19F', '\x1A2', 
		'\x1A6', '\x1AC', '\x1B1', '\x1BA', '\x1C1', '\x1C7', '\x1CB', '\x1CF', 
		'\x1D4', '\x1DA', '\x1E6', '\x1EA', '\x1EF', '\x1F2', '\x1F5', '\x1F8', 
		'\x1FC', '\x1FF', '\x20D', '\x214', '\x21B', '\x21D', '\x220', '\x226', 
		'\x22B', '\x233', '\x238', '\x247', '\x24D', '\x257', '\x25C', '\x266', 
		'\x26A', '\x26C', '\x270', '\x275', '\x277', '\x27F', '\x285', '\x28A', 
		'\x291', '\x29C', '\x29F', '\x2A1', '\x2A8', '\x2AC', '\x2B3', '\x2B9', 
		'\x2BF', '\x2C5', '\x2CA', '\x2D3', '\x2D8', '\x2E3', '\x2E8', '\x2F3', 
		'\x2F8', '\x2FC', '\x30C', '\x316', '\x31B', '\x323', '\x32F', '\x334', 
		'\x33C', '\x343', '\x346', '\x349', '\x350', '\x353', '\x356', '\x359', 
		'\x35D', '\x365', '\x36A', '\x374', '\x379', '\x382', '\x389', '\x38D', 
		'\x391', '\x394', '\x39C', '\x3A9', '\x3AC', '\x3B4', '\x3BD', '\x3C1', 
		'\x3C6', '\x3E1', '\x3EA', '\x3F6', '\x3FB', '\x407', '\x40D', '\x414', 
		'\x418', '\x422', '\x425', '\x42B', '\x431', '\x43A', '\x43D', '\x441', 
		'\x443', '\x445', '\x44E', '\x45A', '\x465', '\x469', '\x470', '\x476', 
		'\x47B', '\x483', '\x488', '\x48C', '\x48F', '\x493', '\x496', '\x49E', 
		'\x4A9', '\x4AF', '\x4B1', '\x4B9', '\x4C0', '\x4C7', '\x4CC', '\x4CE', 
		'\x4D4', '\x4DD', '\x4E2', '\x4E9', '\x4ED', '\x4EF', '\x4F2', '\x4FA', 
		'\x4FE', '\x501', '\x507', '\x50B', '\x510', '\x517', '\x520', '\x524', 
		'\x526', '\x52A', '\x533', '\x538', '\x53A', '\x547', '\x54A', '\x54D', 
		'\x552', '\x556', '\x559', '\x55C', '\x561', '\x565', '\x56A', '\x56D', 
		'\x570', '\x575', '\x579', '\x57C', '\x583', '\x588', '\x591', '\x596', 
		'\x599', '\x5A1', '\x5A5', '\x5AD', '\x5B0', '\x5B2', '\x5BB', '\x5BE', 
		'\x5C0', '\x5C4', '\x5C8', '\x5CC', '\x5CF', '\x5DA', '\x5DF', '\x5E3', 
		'\x5E7', '\x5EA', '\x5EF', '\x5F5', '\x5FC', '\x603', '\x60C', '\x610', 
		'\x612', '\x616', '\x619', '\x621', '\x627', '\x62C', '\x632', '\x639', 
		'\x640', '\x645', '\x648', '\x64B', '\x64E', '\x653', '\x658', '\x65F', 
		'\x663', '\x667', '\x671', '\x67A', '\x67D', '\x686', '\x68A', '\x692', 
		'\x69B', '\x69E', '\x6A7', '\x6AA', '\x6AD', '\x6B0', '\x6BA', '\x6BC', 
		'\x6C5', '\x6CE', '\x6D2', '\x6D9', '\x6E0', '\x6E4', '\x6E8', '\x6F1', 
		'\x6F5', '\x6F9', '\x6FE', '\x702', '\x709', '\x713', '\x71A', '\x71F', 
		'\x722', '\x726', '\x734', '\x740', '\x749', '\x752', '\x756', '\x760', 
		'\x763', '\x76C', '\x775', '\x778', '\x77E', '\x78C', '\x790', '\x79B', 
		'\x7A0', '\x7AD', '\x7B4', '\x7BC', '\x7C1', '\x7C5', '\x7D2', '\x80D',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
